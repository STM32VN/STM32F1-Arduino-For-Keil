<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [..\..\STM32CppOutput\F1Cpp.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image ..\..\STM32CppOutput\F1Cpp.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5050106: Last Updated: Wed Mar 24 12:42:22 2021
<BR><P>
<H3>Maximum Stack Usage =        592 bytes + Unknown(Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
main &rArr; Initialize() &rArr; MPU6050::CalibrateGyro(unsigned char) &rArr; MPU6050::PID(unsigned char, float, float, unsigned char) &rArr; MPU6050::getDeviceID() &rArr; I2Cdev::readBits(unsigned char, unsigned char, unsigned char, unsigned char, unsigned char*, unsigned short) &rArr; I2Cdev::readByte(unsigned char, unsigned char, unsigned char*, unsigned short) &rArr; I2Cdev::readBytes(unsigned char, unsigned char, unsigned char, unsigned char*, unsigned short) &rArr; TwoWire::requestFrom(unsigned char, unsigned char) &rArr; TwoWire::requestFrom(unsigned char, unsigned char, unsigned char) &rArr; TwoWire::requestFrom(unsigned char, unsigned char, unsigned, unsigned char, unsigned char) &rArr; TwoWire::endTransmission(unsigned char) &rArr; i2c_master_write &rArr; i2c_IsDeviceReady &rArr; HAL_I2C_IsDeviceReady &rArr; I2C_WaitOnFlagUntilTimeout(__I2C_HandleTypeDef*, unsigned, FlagStatus, unsigned, unsigned)
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[a]">SVC_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[a]">SVC_Handler</a><BR>
 <LI><a href="#[c]">PendSV_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[c]">PendSV_Handler</a><BR>
 <LI><a href="#[20]">ADC1_2_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[20]">ADC1_2_IRQHandler</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[20]">ADC1_2_IRQHandler</a> from startup_stm32f103xg.o(.text) referenced from startup_stm32f103xg.o(RESET)
 <LI><a href="#[3d]">ADC3_IRQHandler</a> from startup_stm32f103xg.o(.text) referenced from startup_stm32f103xg.o(RESET)
 <LI><a href="#[8]">BusFault_Handler</a> from stm32f1xx_it.o(i.BusFault_Handler) referenced from startup_stm32f103xg.o(RESET)
 <LI><a href="#[23]">CAN1_RX1_IRQHandler</a> from startup_stm32f103xg.o(.text) referenced from startup_stm32f103xg.o(RESET)
 <LI><a href="#[24]">CAN1_SCE_IRQHandler</a> from startup_stm32f103xg.o(.text) referenced from startup_stm32f103xg.o(RESET)
 <LI><a href="#[19]">DMA1_Channel1_IRQHandler</a> from sys.o(i.DMA1_Channel1_IRQHandler) referenced from startup_stm32f103xg.o(RESET)
 <LI><a href="#[1a]">DMA1_Channel2_IRQHandler</a> from sys.o(i.DMA1_Channel2_IRQHandler) referenced from startup_stm32f103xg.o(RESET)
 <LI><a href="#[1b]">DMA1_Channel3_IRQHandler</a> from sys.o(i.DMA1_Channel3_IRQHandler) referenced from startup_stm32f103xg.o(RESET)
 <LI><a href="#[1c]">DMA1_Channel4_IRQHandler</a> from sys.o(i.DMA1_Channel4_IRQHandler) referenced from startup_stm32f103xg.o(RESET)
 <LI><a href="#[1d]">DMA1_Channel5_IRQHandler</a> from sys.o(i.DMA1_Channel5_IRQHandler) referenced from startup_stm32f103xg.o(RESET)
 <LI><a href="#[1e]">DMA1_Channel6_IRQHandler</a> from sys.o(i.DMA1_Channel6_IRQHandler) referenced from startup_stm32f103xg.o(RESET)
 <LI><a href="#[1f]">DMA1_Channel7_IRQHandler</a> from sys.o(i.DMA1_Channel7_IRQHandler) referenced from startup_stm32f103xg.o(RESET)
 <LI><a href="#[46]">DMA2_Channel1_IRQHandler</a> from sys.o(i.DMA2_Channel1_IRQHandler) referenced from startup_stm32f103xg.o(RESET)
 <LI><a href="#[47]">DMA2_Channel2_IRQHandler</a> from sys.o(i.DMA2_Channel2_IRQHandler) referenced from startup_stm32f103xg.o(RESET)
 <LI><a href="#[48]">DMA2_Channel3_IRQHandler</a> from sys.o(i.DMA2_Channel3_IRQHandler) referenced from startup_stm32f103xg.o(RESET)
 <LI><a href="#[49]">DMA2_Channel4_5_IRQHandler</a> from sys.o(i.DMA2_Channel4_5_IRQHandler) referenced from startup_stm32f103xg.o(RESET)
 <LI><a href="#[b]">DebugMon_Handler</a> from stm32f1xx_it.o(i.DebugMon_Handler) referenced from startup_stm32f103xg.o(RESET)
 <LI><a href="#[14]">EXTI0_IRQHandler</a> from sys.o(i.EXTI0_IRQHandler) referenced from startup_stm32f103xg.o(RESET)
 <LI><a href="#[36]">EXTI15_10_IRQHandler</a> from sys.o(i.EXTI15_10_IRQHandler) referenced from startup_stm32f103xg.o(RESET)
 <LI><a href="#[15]">EXTI1_IRQHandler</a> from sys.o(i.EXTI1_IRQHandler) referenced from startup_stm32f103xg.o(RESET)
 <LI><a href="#[16]">EXTI2_IRQHandler</a> from sys.o(i.EXTI2_IRQHandler) referenced from startup_stm32f103xg.o(RESET)
 <LI><a href="#[17]">EXTI3_IRQHandler</a> from sys.o(i.EXTI3_IRQHandler) referenced from startup_stm32f103xg.o(RESET)
 <LI><a href="#[18]">EXTI4_IRQHandler</a> from sys.o(i.EXTI4_IRQHandler) referenced from startup_stm32f103xg.o(RESET)
 <LI><a href="#[25]">EXTI9_5_IRQHandler</a> from sys.o(i.EXTI9_5_IRQHandler) referenced from startup_stm32f103xg.o(RESET)
 <LI><a href="#[12]">FLASH_IRQHandler</a> from startup_stm32f103xg.o(.text) referenced from startup_stm32f103xg.o(RESET)
 <LI><a href="#[3e]">FSMC_IRQHandler</a> from startup_stm32f103xg.o(.text) referenced from startup_stm32f103xg.o(RESET)
 <LI><a href="#[6]">HardFault_Handler</a> from stm32f1xx_it.o(i.HardFault_Handler) referenced from startup_stm32f103xg.o(RESET)
 <LI><a href="#[2e]">I2C1_ER_IRQHandler</a> from twi.o(i.I2C1_ER_IRQHandler) referenced from startup_stm32f103xg.o(RESET)
 <LI><a href="#[2d]">I2C1_EV_IRQHandler</a> from twi.o(i.I2C1_EV_IRQHandler) referenced from startup_stm32f103xg.o(RESET)
 <LI><a href="#[30]">I2C2_ER_IRQHandler</a> from twi.o(i.I2C2_ER_IRQHandler) referenced from startup_stm32f103xg.o(RESET)
 <LI><a href="#[2f]">I2C2_EV_IRQHandler</a> from twi.o(i.I2C2_EV_IRQHandler) referenced from startup_stm32f103xg.o(RESET)
 <LI><a href="#[7]">MemManage_Handler</a> from stm32f1xx_it.o(i.MemManage_Handler) referenced from startup_stm32f103xg.o(RESET)
 <LI><a href="#[5]">NMI_Handler</a> from stm32f1xx_it.o(i.NMI_Handler) referenced from startup_stm32f103xg.o(RESET)
 <LI><a href="#[f]">PVD_IRQHandler</a> from startup_stm32f103xg.o(.text) referenced from startup_stm32f103xg.o(RESET)
 <LI><a href="#[c]">PendSV_Handler</a> from startup_stm32f103xg.o(.text) referenced from startup_stm32f103xg.o(RESET)
 <LI><a href="#[13]">RCC_IRQHandler</a> from startup_stm32f103xg.o(.text) referenced from startup_stm32f103xg.o(RESET)
 <LI><a href="#[37]">RTC_Alarm_IRQHandler</a> from startup_stm32f103xg.o(.text) referenced from startup_stm32f103xg.o(RESET)
 <LI><a href="#[11]">RTC_IRQHandler</a> from startup_stm32f103xg.o(.text) referenced from startup_stm32f103xg.o(RESET)
 <LI><a href="#[4]">Reset_Handler</a> from startup_stm32f103xg.o(.text) referenced from startup_stm32f103xg.o(RESET)
 <LI><a href="#[3f]">SDIO_IRQHandler</a> from startup_stm32f103xg.o(.text) referenced from startup_stm32f103xg.o(RESET)
 <LI><a href="#[31]">SPI1_IRQHandler</a> from startup_stm32f103xg.o(.text) referenced from startup_stm32f103xg.o(RESET)
 <LI><a href="#[32]">SPI2_IRQHandler</a> from startup_stm32f103xg.o(.text) referenced from startup_stm32f103xg.o(RESET)
 <LI><a href="#[41]">SPI3_IRQHandler</a> from startup_stm32f103xg.o(.text) referenced from startup_stm32f103xg.o(RESET)
 <LI><a href="#[a]">SVC_Handler</a> from startup_stm32f103xg.o(.text) referenced from startup_stm32f103xg.o(RESET)
 <LI><a href="#[d]">SysTick_Handler</a> from stm32f1xx_it.o(i.SysTick_Handler) referenced from startup_stm32f103xg.o(RESET)
 <LI><a href="#[4b]">SystemInit</a> from system_stm32f1xx.o(i.SystemInit) referenced from startup_stm32f103xg.o(.text)
 <LI><a href="#[10]">TAMPER_IRQHandler</a> from startup_stm32f103xg.o(.text) referenced from startup_stm32f103xg.o(RESET)
 <LI><a href="#[26]">TIM1_BRK_TIM9_IRQHandler</a> from startup_stm32f103xg.o(.text) referenced from startup_stm32f103xg.o(RESET)
 <LI><a href="#[29]">TIM1_CC_IRQHandler</a> from startup_stm32f103xg.o(.text) referenced from startup_stm32f103xg.o(RESET)
 <LI><a href="#[28]">TIM1_TRG_COM_TIM11_IRQHandler</a> from startup_stm32f103xg.o(.text) referenced from startup_stm32f103xg.o(RESET)
 <LI><a href="#[27]">TIM1_UP_TIM10_IRQHandler</a> from startup_stm32f103xg.o(.text) referenced from startup_stm32f103xg.o(RESET)
 <LI><a href="#[2a]">TIM2_IRQHandler</a> from startup_stm32f103xg.o(.text) referenced from startup_stm32f103xg.o(RESET)
 <LI><a href="#[2b]">TIM3_IRQHandler</a> from startup_stm32f103xg.o(.text) referenced from startup_stm32f103xg.o(RESET)
 <LI><a href="#[2c]">TIM4_IRQHandler</a> from startup_stm32f103xg.o(.text) referenced from startup_stm32f103xg.o(RESET)
 <LI><a href="#[40]">TIM5_IRQHandler</a> from startup_stm32f103xg.o(.text) referenced from startup_stm32f103xg.o(RESET)
 <LI><a href="#[44]">TIM6_IRQHandler</a> from startup_stm32f103xg.o(.text) referenced from startup_stm32f103xg.o(RESET)
 <LI><a href="#[45]">TIM7_IRQHandler</a> from startup_stm32f103xg.o(.text) referenced from startup_stm32f103xg.o(RESET)
 <LI><a href="#[39]">TIM8_BRK_TIM12_IRQHandler</a> from startup_stm32f103xg.o(.text) referenced from startup_stm32f103xg.o(RESET)
 <LI><a href="#[3c]">TIM8_CC_IRQHandler</a> from startup_stm32f103xg.o(.text) referenced from startup_stm32f103xg.o(RESET)
 <LI><a href="#[3b]">TIM8_TRG_COM_TIM14_IRQHandler</a> from startup_stm32f103xg.o(.text) referenced from startup_stm32f103xg.o(RESET)
 <LI><a href="#[3a]">TIM8_UP_TIM13_IRQHandler</a> from startup_stm32f103xg.o(.text) referenced from startup_stm32f103xg.o(RESET)
 <LI><a href="#[42]">UART4_IRQHandler</a> from sys.o(i.UART4_IRQHandler) referenced from startup_stm32f103xg.o(RESET)
 <LI><a href="#[43]">UART5_IRQHandler</a> from sys.o(i.UART5_IRQHandler) referenced from startup_stm32f103xg.o(RESET)
 <LI><a href="#[33]">USART1_IRQHandler</a> from sys.o(i.USART1_IRQHandler) referenced from startup_stm32f103xg.o(RESET)
 <LI><a href="#[34]">USART2_IRQHandler</a> from sys.o(i.USART2_IRQHandler) referenced from startup_stm32f103xg.o(RESET)
 <LI><a href="#[35]">USART3_IRQHandler</a> from sys.o(i.USART3_IRQHandler) referenced from startup_stm32f103xg.o(RESET)
 <LI><a href="#[38]">USBWakeUp_IRQHandler</a> from startup_stm32f103xg.o(.text) referenced from startup_stm32f103xg.o(RESET)
 <LI><a href="#[21]">USB_HP_CAN1_TX_IRQHandler</a> from startup_stm32f103xg.o(.text) referenced from startup_stm32f103xg.o(RESET)
 <LI><a href="#[22]">USB_LP_CAN1_RX0_IRQHandler</a> from startup_stm32f103xg.o(.text) referenced from startup_stm32f103xg.o(RESET)
 <LI><a href="#[9]">UsageFault_Handler</a> from stm32f1xx_it.o(i.UsageFault_Handler) referenced from startup_stm32f103xg.o(RESET)
 <LI><a href="#[e]">WWDG_IRQHandler</a> from startup_stm32f103xg.o(.text) referenced from startup_stm32f103xg.o(RESET)
 <LI><a href="#[51]">SPI_1_Init()</a> from sys.o(i._Z10SPI_1_Initv) referenced from sys.o(i.__sti___5_sys_c_pinMode)
 <LI><a href="#[52]">SPI_2_Init()</a> from sys.o(i._Z10SPI_2_Initv) referenced from sys.o(i.__sti___5_sys_c_pinMode)
 <LI><a href="#[53]">SPI_3_Init()</a> from sys.o(i._Z10SPI_3_Initv) referenced from sys.o(i.__sti___5_sys_c_pinMode)
 <LI><a href="#[4d]">I2C_DMAAbort(__DMA_HandleTypeDef*)</a> from stm32f1xx_hal_i2c.o(i._Z12I2C_DMAAbortP19__DMA_HandleTypeDef) referenced from stm32f1xx_hal_i2c.o(i._Z11I2C_ITErrorP19__I2C_HandleTypeDef)
 <LI><a href="#[4d]">I2C_DMAAbort(__DMA_HandleTypeDef*)</a> from stm32f1xx_hal_i2c.o(i._Z12I2C_DMAAbortP19__DMA_HandleTypeDef) referenced from stm32f1xx_hal_i2c.o(i._Z15I2C_Slave_STOPFP19__I2C_HandleTypeDef)
 <LI><a href="#[54]">USARTClass::write(unsigned char)</a> from usartclass.o(i._ZN10USARTClass5writeEh) referenced from usartclass.o(.constdata__ZTV10USARTClass)
 <LI><a href="#[55]">Print::write(const unsigned char*, unsigned)</a> from print.o(i._ZN5Print5writeEPKhj) referenced from usartclass.o(.constdata__ZTV10USARTClass)
 <LI><a href="#[55]">Print::write(const unsigned char*, unsigned)</a> from print.o(i._ZN5Print5writeEPKhj) referenced from print.o(.constdata__ZTV5Print)
 <LI><a href="#[55]">Print::write(const unsigned char*, unsigned)</a> from print.o(i._ZN5Print5writeEPKhj) referenced from wire.o(.constdata__ZTV6Stream)
 <LI><a href="#[4f]">TwoWire::onReceiveService(i2c_s*)</a> from wire.o(i._ZN7TwoWire16onReceiveServiceEP5i2c_s) referenced from wire.o(i._ZN7TwoWire5beginEhb)
 <LI><a href="#[4e]">TwoWire::onRequestService(i2c_s*)</a> from wire.o(i._ZN7TwoWire16onRequestServiceEP5i2c_s) referenced from wire.o(i._ZN7TwoWire5beginEhb)
 <LI><a href="#[5a]">TwoWire::read()</a> from wire.o(i._ZN7TwoWire4readEv) referenced from wire.o(.constdata__ZTV7TwoWire)
 <LI><a href="#[58]">TwoWire::write(const unsigned char*, unsigned)</a> from wire.o(i._ZN7TwoWire5writeEPKhj) referenced from wire.o(.constdata__ZTV7TwoWire)
 <LI><a href="#[57]">TwoWire::write(unsigned char)</a> from wire.o(i._ZN7TwoWire5writeEh) referenced from wire.o(.constdata__ZTV7TwoWire)
 <LI><a href="#[59]">TwoWire::available()</a> from wire.o(i._ZN7TwoWire9availableEv) referenced from wire.o(.constdata__ZTV7TwoWire)
 <LI><a href="#[5e]">String::StringIfHelper() const</a> from i2cdev.o(i._ZNK6String14StringIfHelperEv) referenced 3 times from i2cdev.o(.data)
 <LI><a href="#[56]">__cxa_pure_virtual</a> from pure_virt.o(i.__cxa_pure_virtual) referenced from print.o(.constdata__ZTV5Print)
 <LI><a href="#[56]">__cxa_pure_virtual</a> from pure_virt.o(i.__cxa_pure_virtual) referenced 5 times from wire.o(.constdata__ZTV6Stream)
 <LI><a href="#[4c]">__main</a> from entry.o(.ARM.Collect$$$$00000000) referenced from startup_stm32f103xg.o(.text)
 <LI><a href="#[5d]">__sti___5_sys_c_pinMode</a> from sys.o(i.__sti___5_sys_c_pinMode) referenced from sys.o(.init_array)
 <LI><a href="#[5c]">__sti___6_main_c_70058f14</a> from main.o(i.__sti___6_main_c_70058f14) referenced from main.o(.init_array)
 <LI><a href="#[5b]">__sti___8_Wire_cpp_4e99b9cf</a> from wire.o(i.__sti___8_Wire_cpp_4e99b9cf) referenced from wire.o(.init_array)
 <LI><a href="#[50]">_sputc</a> from printfa.o(i._sputc) referenced from printfa.o(i.__0sprintf)
 <LI><a href="#[4a]">main</a> from main.o(i.main) referenced from entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[4c]"></a>__main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry.o(.ARM.Collect$$$$00000000))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xg.o(.text)
</UL>
<P><STRONG><a name="[12c]"></a>_main_stk</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry2.o(.ARM.Collect$$$$00000001))

<P><STRONG><a name="[60]"></a>_main_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[7e]"></a>__main_after_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Called By]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[12d]"></a>_main_clock</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry7b.o(.ARM.Collect$$$$00000008))

<P><STRONG><a name="[62]"></a>_main_cpp_init$empty</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry8a.o(.ARM.Collect$$$$00000009))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = _main_cpp_init$empty &rArr; __cpp_initialize__aeabi_
</UL>
<BR>[Calls]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cpp_initialize__aeabi_
</UL>

<P><STRONG><a name="[12e]"></a>_main_cpp_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry8b.o(.ARM.Collect$$$$0000000A))

<P><STRONG><a name="[12f]"></a>_main_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry9a.o(.ARM.Collect$$$$0000000B))

<P><STRONG><a name="[130]"></a>__rt_final_cpp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry10a.o(.ARM.Collect$$$$0000000D))

<P><STRONG><a name="[131]"></a>__rt_final_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry11a.o(.ARM.Collect$$$$0000000F))

<P><STRONG><a name="[4]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_stm32f103xg.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xg.o(RESET)
</UL>
<P><STRONG><a name="[a]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f103xg.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xg.o(RESET)
</UL>
<P><STRONG><a name="[c]"></a>PendSV_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f103xg.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xg.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>ADC1_2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xg.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_2_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_2_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xg.o(RESET)
</UL>
<P><STRONG><a name="[3d]"></a>ADC3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xg.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xg.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>CAN1_RX1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xg.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xg.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>CAN1_SCE_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xg.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xg.o(RESET)
</UL>
<P><STRONG><a name="[12]"></a>FLASH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xg.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xg.o(RESET)
</UL>
<P><STRONG><a name="[3e]"></a>FSMC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xg.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xg.o(RESET)
</UL>
<P><STRONG><a name="[f]"></a>PVD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xg.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xg.o(RESET)
</UL>
<P><STRONG><a name="[13]"></a>RCC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xg.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xg.o(RESET)
</UL>
<P><STRONG><a name="[37]"></a>RTC_Alarm_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xg.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xg.o(RESET)
</UL>
<P><STRONG><a name="[11]"></a>RTC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xg.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xg.o(RESET)
</UL>
<P><STRONG><a name="[3f]"></a>SDIO_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xg.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xg.o(RESET)
</UL>
<P><STRONG><a name="[31]"></a>SPI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xg.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xg.o(RESET)
</UL>
<P><STRONG><a name="[32]"></a>SPI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xg.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xg.o(RESET)
</UL>
<P><STRONG><a name="[41]"></a>SPI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xg.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xg.o(RESET)
</UL>
<P><STRONG><a name="[10]"></a>TAMPER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xg.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xg.o(RESET)
</UL>
<P><STRONG><a name="[26]"></a>TIM1_BRK_TIM9_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xg.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xg.o(RESET)
</UL>
<P><STRONG><a name="[29]"></a>TIM1_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xg.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xg.o(RESET)
</UL>
<P><STRONG><a name="[28]"></a>TIM1_TRG_COM_TIM11_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xg.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xg.o(RESET)
</UL>
<P><STRONG><a name="[27]"></a>TIM1_UP_TIM10_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xg.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xg.o(RESET)
</UL>
<P><STRONG><a name="[2a]"></a>TIM2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xg.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xg.o(RESET)
</UL>
<P><STRONG><a name="[2b]"></a>TIM3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xg.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xg.o(RESET)
</UL>
<P><STRONG><a name="[2c]"></a>TIM4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xg.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xg.o(RESET)
</UL>
<P><STRONG><a name="[40]"></a>TIM5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xg.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xg.o(RESET)
</UL>
<P><STRONG><a name="[44]"></a>TIM6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xg.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xg.o(RESET)
</UL>
<P><STRONG><a name="[45]"></a>TIM7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xg.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xg.o(RESET)
</UL>
<P><STRONG><a name="[39]"></a>TIM8_BRK_TIM12_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xg.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xg.o(RESET)
</UL>
<P><STRONG><a name="[3c]"></a>TIM8_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xg.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xg.o(RESET)
</UL>
<P><STRONG><a name="[3b]"></a>TIM8_TRG_COM_TIM14_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xg.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xg.o(RESET)
</UL>
<P><STRONG><a name="[3a]"></a>TIM8_UP_TIM13_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xg.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xg.o(RESET)
</UL>
<P><STRONG><a name="[38]"></a>USBWakeUp_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xg.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xg.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>USB_HP_CAN1_TX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xg.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xg.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>USB_LP_CAN1_RX0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xg.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xg.o(RESET)
</UL>
<P><STRONG><a name="[e]"></a>WWDG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xg.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xg.o(RESET)
</UL>
<P><STRONG><a name="[132]"></a>___aeabi_memcpy4$move</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, memmovea.o(.text), UNUSED)

<P><STRONG><a name="[133]"></a>___aeabi_memcpy8$move</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, memmovea.o(.text), UNUSED)

<P><STRONG><a name="[10c]"></a>__aeabi_memcpy</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, memmovea.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TwoWire::write(const unsigned char*, unsigned)
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TwoWire::onReceiveService(i2c_s*)
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;internal_alloc
</UL>

<P><STRONG><a name="[134]"></a>__aeabi_memmove</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, memmovea.o(.text), UNUSED)

<P><STRONG><a name="[135]"></a>__aeabi_memmove4</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, memmovea.o(.text), UNUSED)

<P><STRONG><a name="[136]"></a>__aeabi_memmove8</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, memmovea.o(.text), UNUSED)

<P><STRONG><a name="[64]"></a>__aeabi_memset</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset$wrapper
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>

<P><STRONG><a name="[137]"></a>__aeabi_memset4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[138]"></a>__aeabi_memset8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[63]"></a>__aeabi_memclr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TwoWire::resetTxBuffer()
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TwoWire::resetRxBuffer()
</UL>

<P><STRONG><a name="[ac]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RingBuffer::RingBuffer()
</UL>

<P><STRONG><a name="[139]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[65]"></a>_memset$wrapper</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[e1]"></a>strlen</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, strlen.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print::write(const char*)
</UL>

<P><STRONG><a name="[5f]"></a>__cpp_initialize__aeabi_</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, cpp_init.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __cpp_initialize__aeabi_
</UL>
<BR>[Called By]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_cpp_init$empty
</UL>

<P><STRONG><a name="[66]"></a>__aeabi_fadd</STRONG> (Thumb, 164 bytes, Stack size 16 bytes, fadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = __aeabi_fadd &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_round
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fsub
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6050::PID(unsigned char, float, float, unsigned char)
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_frsub
</UL>

<P><STRONG><a name="[69]"></a>__aeabi_fsub</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, fadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = __aeabi_fsub &rArr; __aeabi_fadd &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
</UL>
<BR>[Called By]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6050::PID(unsigned char, float, float, unsigned char)
</UL>

<P><STRONG><a name="[6a]"></a>__aeabi_frsub</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, fadd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
</UL>

<P><STRONG><a name="[f9]"></a>__aeabi_fmul</STRONG> (Thumb, 100 bytes, Stack size 8 bytes, fmul.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_fmul
</UL>
<BR>[Called By]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6050::PID(unsigned char, float, float, unsigned char)
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6050::CalibrateAccel(unsigned char)
</UL>

<P><STRONG><a name="[6b]"></a>__aeabi_fdiv</STRONG> (Thumb, 124 bytes, Stack size 8 bytes, fdiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_fdiv
</UL>
<BR>[Calls]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_round
</UL>
<BR>[Called By]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6050::PID(unsigned char, float, float, unsigned char)
</UL>

<P><STRONG><a name="[6c]"></a>__aeabi_dadd</STRONG> (Thumb, 322 bytes, Stack size 48 bytes, dadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_lasr
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6050::PID(unsigned char, float, float, unsigned char)
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[71]"></a>__aeabi_dsub</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __aeabi_dsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6050::PID(unsigned char, float, float, unsigned char)
</UL>

<P><STRONG><a name="[72]"></a>__aeabi_drsub</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dadd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[73]"></a>__aeabi_dmul</STRONG> (Thumb, 228 bytes, Stack size 48 bytes, dmul.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6050::PID(unsigned char, float, float, unsigned char)
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6050::CalibrateAccel(unsigned char)
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6050::CalibrateGyro(unsigned char)
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[74]"></a>__aeabi_ddiv</STRONG> (Thumb, 222 bytes, Stack size 32 bytes, ddiv.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[75]"></a>__aeabi_i2f</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, fflti.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = __aeabi_i2f &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6050::PID(unsigned char, float, float, unsigned char)
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6050::PrintActiveOffsets()
</UL>

<P><STRONG><a name="[76]"></a>__aeabi_ui2f</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, ffltui.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = __aeabi_ui2f &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6050::PID(unsigned char, float, float, unsigned char)
</UL>

<P><STRONG><a name="[77]"></a>__aeabi_i2d</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, dflti.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = __aeabi_i2d &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6050::CalibrateAccel(unsigned char)
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6050::CalibrateGyro(unsigned char)
</UL>

<P><STRONG><a name="[78]"></a>__aeabi_ui2d</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, dfltui.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = __aeabi_ui2d &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6050::PID(unsigned char, float, float, unsigned char)
</UL>

<P><STRONG><a name="[fb]"></a>__aeabi_f2uiz</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, ffixui.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6050::PID(unsigned char, float, float, unsigned char)
</UL>

<P><STRONG><a name="[79]"></a>__aeabi_d2iz</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, dfixi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_d2iz
</UL>
<BR>[Calls]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
</UL>
<BR>[Called By]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6050::PID(unsigned char, float, float, unsigned char)
</UL>

<P><STRONG><a name="[f7]"></a>__aeabi_f2d</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, f2d.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6050::PID(unsigned char, float, float, unsigned char)
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6050::PrintActiveOffsets()
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6050::CalibrateGyro(unsigned char)
</UL>

<P><STRONG><a name="[13a]"></a>__aeabi_cdcmpeq</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, cdcmple.o(.text), UNUSED)

<P><STRONG><a name="[fd]"></a>__aeabi_cdcmple</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, cdcmple.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6050::PID(unsigned char, float, float, unsigned char)
</UL>

<P><STRONG><a name="[11e]"></a>__aeabi_cdrcmple</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, cdrcmple.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[7b]"></a>__aeabi_d2f</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, d2f.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_d2f
</UL>
<BR>[Calls]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_round
</UL>
<BR>[Called By]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6050::PID(unsigned char, float, float, unsigned char)
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6050::CalibrateAccel(unsigned char)
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6050::CalibrateGyro(unsigned char)
</UL>

<P><STRONG><a name="[fc]"></a>__aeabi_cfrcmple</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, cfrcmple.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6050::PID(unsigned char, float, float, unsigned char)
</UL>

<P><STRONG><a name="[13b]"></a>__aeabi_uidiv</STRONG> (Thumb, 0 bytes, Stack size 12 bytes, uidiv.o(.text), UNUSED)

<P><STRONG><a name="[121]"></a>__aeabi_uidivmod</STRONG> (Thumb, 44 bytes, Stack size 12 bytes, uidiv.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[7c]"></a>__aeabi_uldivmod</STRONG> (Thumb, 98 bytes, Stack size 40 bytes, uldiv.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[6d]"></a>__aeabi_llsl</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, llshl.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
</UL>

<P><STRONG><a name="[13c]"></a>_ll_shift_l</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llshl.o(.text), UNUSED)

<P><STRONG><a name="[7a]"></a>__aeabi_llsr</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, llushr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
</UL>

<P><STRONG><a name="[13d]"></a>_ll_ushift_r</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llushr.o(.text), UNUSED)

<P><STRONG><a name="[6e]"></a>__aeabi_lasr</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, llsshr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[13e]"></a>_ll_sshift_r</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llsshr.o(.text), UNUSED)

<P><STRONG><a name="[13f]"></a>__I$use$fp</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, iusefp.o(.text), UNUSED)

<P><STRONG><a name="[117]"></a>__rt_SIGPVFN</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, cpp_signal.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_pure_virtual
</UL>

<P><STRONG><a name="[68]"></a>_float_round</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, fepilogue.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
</UL>

<P><STRONG><a name="[67]"></a>_float_epilogue</STRONG> (Thumb, 92 bytes, Stack size 4 bytes, fepilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = _float_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
</UL>

<P><STRONG><a name="[70]"></a>_double_round</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, depilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>

<P><STRONG><a name="[6f]"></a>_double_epilogue</STRONG> (Thumb, 156 bytes, Stack size 32 bytes, depilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[7d]"></a>__aeabi_d2ulz</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, dfixul.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[61]"></a>__scatterload</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, init.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main_after_scatterload
</UL>
<BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_scatterload
</UL>

<P><STRONG><a name="[140]"></a>__scatterload_rt2</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, init.o(.text), UNUSED)

<P><STRONG><a name="[8]"></a>BusFault_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f1xx_it.o(i.BusFault_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xg.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>DMA1_Channel1_IRQHandler</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, sys.o(i.DMA1_Channel1_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xg.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>DMA1_Channel2_IRQHandler</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, sys.o(i.DMA1_Channel2_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xg.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>DMA1_Channel3_IRQHandler</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, sys.o(i.DMA1_Channel3_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xg.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>DMA1_Channel4_IRQHandler</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, sys.o(i.DMA1_Channel4_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xg.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>DMA1_Channel5_IRQHandler</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, sys.o(i.DMA1_Channel5_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xg.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>DMA1_Channel6_IRQHandler</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, sys.o(i.DMA1_Channel6_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xg.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>DMA1_Channel7_IRQHandler</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, sys.o(i.DMA1_Channel7_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xg.o(RESET)
</UL>
<P><STRONG><a name="[46]"></a>DMA2_Channel1_IRQHandler</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, sys.o(i.DMA2_Channel1_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xg.o(RESET)
</UL>
<P><STRONG><a name="[47]"></a>DMA2_Channel2_IRQHandler</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, sys.o(i.DMA2_Channel2_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xg.o(RESET)
</UL>
<P><STRONG><a name="[48]"></a>DMA2_Channel3_IRQHandler</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, sys.o(i.DMA2_Channel3_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xg.o(RESET)
</UL>
<P><STRONG><a name="[49]"></a>DMA2_Channel4_5_IRQHandler</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, sys.o(i.DMA2_Channel4_5_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xg.o(RESET)
</UL>
<P><STRONG><a name="[b]"></a>DebugMon_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f1xx_it.o(i.DebugMon_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xg.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>EXTI0_IRQHandler</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, sys.o(i.EXTI0_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = EXTI0_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_EXTI_Callback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xg.o(RESET)
</UL>
<P><STRONG><a name="[36]"></a>EXTI15_10_IRQHandler</STRONG> (Thumb, 144 bytes, Stack size 16 bytes, sys.o(i.EXTI15_10_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = EXTI15_10_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_EXTI_Callback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xg.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>EXTI1_IRQHandler</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, sys.o(i.EXTI1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = EXTI1_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_EXTI_Callback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xg.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>EXTI2_IRQHandler</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, sys.o(i.EXTI2_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = EXTI2_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_EXTI_Callback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xg.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>EXTI3_IRQHandler</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, sys.o(i.EXTI3_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = EXTI3_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_EXTI_Callback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xg.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>EXTI4_IRQHandler</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, sys.o(i.EXTI4_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = EXTI4_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_EXTI_Callback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xg.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>EXTI9_5_IRQHandler</STRONG> (Thumb, 118 bytes, Stack size 16 bytes, sys.o(i.EXTI9_5_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = EXTI9_5_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_EXTI_Callback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xg.o(RESET)
</UL>
<P><STRONG><a name="[ad]"></a>Error_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, main.o(i.Error_Handler))
<BR><BR>[Called By]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_custom_init
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TwoWire::onReceiveService(i2c_s*)
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TwoWire::allocateTxBuffer(unsigned)
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TwoWire::allocateRxBuffer(unsigned)
</UL>

<P><STRONG><a name="[c4]"></a>HAL_DMA_Abort_IT</STRONG> (Thumb, 296 bytes, Stack size 40 bytes, stm32f1xx_hal_dma.o(i.HAL_DMA_Abort_IT))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = HAL_DMA_Abort_IT
</UL>
<BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Slave_STOPF(__I2C_HandleTypeDef*)
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_ITError(__I2C_HandleTypeDef*)
</UL>

<P><STRONG><a name="[ce]"></a>HAL_DMA_GetState</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f1xx_hal_dma.o(i.HAL_DMA_GetState))
<BR><BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Slave_STOPF(__I2C_HandleTypeDef*)
</UL>

<P><STRONG><a name="[7f]"></a>HAL_GPIO_EXTI_Callback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f1xx_hal_gpio.o(i.HAL_GPIO_EXTI_Callback))
<BR><BR>[Called By]<UL><LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI9_5_IRQHandler
<LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI4_IRQHandler
<LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI3_IRQHandler
<LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI2_IRQHandler
<LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI1_IRQHandler
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI15_10_IRQHandler
<LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI0_IRQHandler
</UL>

<P><STRONG><a name="[124]"></a>HAL_GPIO_Init</STRONG> (Thumb, 462 bytes, Stack size 40 bytes, stm32f1xx_hal_gpio.o(i.HAL_GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pinMode
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_custom_init
</UL>

<P><STRONG><a name="[97]"></a>HAL_GetTick</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f1xx_hal.o(i.HAL_GetTick))
<BR><BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;millis
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_PeriphCLKConfig
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnFlagUntilTimeout(__I2C_HandleTypeDef*, unsigned, FlagStatus, unsigned, unsigned)
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_IsDeviceReady
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_master_write
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_master_read
</UL>

<P><STRONG><a name="[c5]"></a>HAL_I2C_AbortCpltCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f1xx_hal_i2c.o(i.HAL_I2C_AbortCpltCallback))
<BR><BR>[Called By]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_DMAAbort(__DMA_HandleTypeDef*)
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_ITError(__I2C_HandleTypeDef*)
</UL>

<P><STRONG><a name="[80]"></a>HAL_I2C_AddrCallback</STRONG> (Thumb, 92 bytes, Stack size 24 bytes, twi.o(i.HAL_I2C_AddrCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = HAL_I2C_AddrCallback &rArr; HAL_I2C_Slave_Seq_Transmit_IT
</UL>
<BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Slave_Seq_Transmit_IT
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Slave_Seq_Receive_IT
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_i2c_obj
</UL>
<BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_EV_IRQHandler
</UL>

<P><STRONG><a name="[84]"></a>HAL_I2C_ER_IRQHandler</STRONG> (Thumb, 196 bytes, Stack size 24 bytes, stm32f1xx_hal_i2c.o(i.HAL_I2C_ER_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = HAL_I2C_ER_IRQHandler &rArr; I2C_ITError(__I2C_HandleTypeDef*) &rArr; HAL_DMA_Abort_IT
</UL>
<BR>[Calls]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Slave_AF(__I2C_HandleTypeDef*)
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_ITError(__I2C_HandleTypeDef*)
</UL>
<BR>[Called By]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C2_ER_IRQHandler
<LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C1_ER_IRQHandler
</UL>

<P><STRONG><a name="[87]"></a>HAL_I2C_EV_IRQHandler</STRONG> (Thumb, 602 bytes, Stack size 24 bytes, stm32f1xx_hal_i2c.o(i.HAL_I2C_EV_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = HAL_I2C_EV_IRQHandler &rArr; I2C_Slave_STOPF(__I2C_HandleTypeDef*) &rArr; I2C_ITError(__I2C_HandleTypeDef*) &rArr; HAL_DMA_Abort_IT
</UL>
<BR>[Calls]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_MasterTransmit_TXE(__I2C_HandleTypeDef*)
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_MasterTransmit_BTF(__I2C_HandleTypeDef*)
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_MasterReceive_RXNE(__I2C_HandleTypeDef*)
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_MasterReceive_BTF(__I2C_HandleTypeDef*)
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Slave_STOPF(__I2C_HandleTypeDef*)
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Master_ADDR(__I2C_HandleTypeDef*)
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Master_SB(__I2C_HandleTypeDef*)
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_SlaveTxCpltCallback
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_SlaveRxCpltCallback
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_AddrCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C2_EV_IRQHandler
<LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C1_EV_IRQHandler
</UL>

<P><STRONG><a name="[92]"></a>HAL_I2C_EnableListen_IT</STRONG> (Thumb, 58 bytes, Stack size 0 bytes, stm32f1xx_hal_i2c.o(i.HAL_I2C_EnableListen_IT))
<BR><BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_ListenCpltCallback
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_ErrorCallback
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_attachSlaveTxEvent
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_attachSlaveRxEvent
</UL>

<P><STRONG><a name="[91]"></a>HAL_I2C_ErrorCallback</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, twi.o(i.HAL_I2C_ErrorCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_I2C_ErrorCallback
</UL>
<BR>[Calls]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_EnableListen_IT
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_i2c_obj
</UL>
<BR>[Called By]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_DMAAbort(__DMA_HandleTypeDef*)
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_ITError(__I2C_HandleTypeDef*)
</UL>

<P><STRONG><a name="[127]"></a>HAL_I2C_GetError</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f1xx_hal_i2c.o(i.HAL_I2C_GetError))
<BR><BR>[Called By]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_master_write
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_master_read
</UL>

<P><STRONG><a name="[128]"></a>HAL_I2C_GetState</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f1xx_hal_i2c.o(i.HAL_I2C_GetState))
<BR><BR>[Called By]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_master_write
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_master_read
</UL>

<P><STRONG><a name="[93]"></a>HAL_I2C_Init</STRONG> (Thumb, 356 bytes, Stack size 16 bytes, stm32f1xx_hal_i2c.o(i.HAL_I2C_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_I2C_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_MspInit
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK1Freq
</UL>
<BR>[Called By]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_custom_init
</UL>

<P><STRONG><a name="[96]"></a>HAL_I2C_IsDeviceReady</STRONG> (Thumb, 336 bytes, Stack size 56 bytes, stm32f1xx_hal_i2c.o(i.HAL_I2C_IsDeviceReady))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = HAL_I2C_IsDeviceReady &rArr; I2C_WaitOnFlagUntilTimeout(__I2C_HandleTypeDef*, unsigned, FlagStatus, unsigned, unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnFlagUntilTimeout(__I2C_HandleTypeDef*, unsigned, FlagStatus, unsigned, unsigned)
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_IsDeviceReady
</UL>

<P><STRONG><a name="[99]"></a>HAL_I2C_ListenCpltCallback</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, twi.o(i.HAL_I2C_ListenCpltCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_I2C_ListenCpltCallback
</UL>
<BR>[Calls]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_EnableListen_IT
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_i2c_obj
</UL>
<BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Slave_STOPF(__I2C_HandleTypeDef*)
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Slave_AF(__I2C_HandleTypeDef*)
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_ITError(__I2C_HandleTypeDef*)
</UL>

<P><STRONG><a name="[d0]"></a>HAL_I2C_MasterRxCpltCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f1xx_hal_i2c.o(i.HAL_I2C_MasterRxCpltCallback))
<BR><BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_MasterReceive_RXNE(__I2C_HandleTypeDef*)
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_MasterReceive_BTF(__I2C_HandleTypeDef*)
</UL>

<P><STRONG><a name="[d2]"></a>HAL_I2C_MasterTxCpltCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f1xx_hal_i2c.o(i.HAL_I2C_MasterTxCpltCallback))
<BR><BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_MasterTransmit_TXE(__I2C_HandleTypeDef*)
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_MasterTransmit_BTF(__I2C_HandleTypeDef*)
</UL>

<P><STRONG><a name="[126]"></a>HAL_I2C_Master_Seq_Receive_IT</STRONG> (Thumb, 340 bytes, Stack size 44 bytes, stm32f1xx_hal_i2c.o(i.HAL_I2C_Master_Seq_Receive_IT))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = HAL_I2C_Master_Seq_Receive_IT
</UL>
<BR>[Called By]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_master_read
</UL>

<P><STRONG><a name="[129]"></a>HAL_I2C_Master_Seq_Transmit_IT</STRONG> (Thumb, 268 bytes, Stack size 36 bytes, stm32f1xx_hal_i2c.o(i.HAL_I2C_Master_Seq_Transmit_IT))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = HAL_I2C_Master_Seq_Transmit_IT
</UL>
<BR>[Called By]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_master_write
</UL>

<P><STRONG><a name="[d1]"></a>HAL_I2C_MemRxCpltCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f1xx_hal_i2c.o(i.HAL_I2C_MemRxCpltCallback))
<BR><BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_MasterReceive_RXNE(__I2C_HandleTypeDef*)
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_MasterReceive_BTF(__I2C_HandleTypeDef*)
</UL>

<P><STRONG><a name="[d3]"></a>HAL_I2C_MemTxCpltCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f1xx_hal_i2c.o(i.HAL_I2C_MemTxCpltCallback))
<BR><BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_MasterTransmit_TXE(__I2C_HandleTypeDef*)
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_MasterTransmit_BTF(__I2C_HandleTypeDef*)
</UL>

<P><STRONG><a name="[94]"></a>HAL_I2C_MspInit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f1xx_hal_i2c.o(i.HAL_I2C_MspInit))
<BR><BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Init
</UL>

<P><STRONG><a name="[8f]"></a>HAL_I2C_SlaveRxCpltCallback</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, twi.o(i.HAL_I2C_SlaveRxCpltCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = HAL_I2C_SlaveRxCpltCallback &rArr; HAL_I2C_Slave_Seq_Receive_IT
</UL>
<BR>[Calls]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Slave_Seq_Receive_IT
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_i2c_obj
</UL>
<BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Slave_STOPF(__I2C_HandleTypeDef*)
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_EV_IRQHandler
</UL>

<P><STRONG><a name="[90]"></a>HAL_I2C_SlaveTxCpltCallback</STRONG> (Thumb, 20 bytes, Stack size 12 bytes, twi.o(i.HAL_I2C_SlaveTxCpltCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = HAL_I2C_SlaveTxCpltCallback
</UL>
<BR>[Calls]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_i2c_obj
</UL>
<BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Slave_AF(__I2C_HandleTypeDef*)
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_EV_IRQHandler
</UL>

<P><STRONG><a name="[83]"></a>HAL_I2C_Slave_Seq_Receive_IT</STRONG> (Thumb, 116 bytes, Stack size 16 bytes, stm32f1xx_hal_i2c.o(i.HAL_I2C_Slave_Seq_Receive_IT))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_I2C_Slave_Seq_Receive_IT
</UL>
<BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_SlaveRxCpltCallback
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_AddrCallback
</UL>

<P><STRONG><a name="[82]"></a>HAL_I2C_Slave_Seq_Transmit_IT</STRONG> (Thumb, 116 bytes, Stack size 16 bytes, stm32f1xx_hal_i2c.o(i.HAL_I2C_Slave_Seq_Transmit_IT))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_I2C_Slave_Seq_Transmit_IT
</UL>
<BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_AddrCallback
</UL>

<P><STRONG><a name="[aa]"></a>HAL_IncTick</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f1xx_hal.o(i.HAL_IncTick))
<BR><BR>[Called By]<UL><LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[9a]"></a>HAL_Init</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, stm32f1xx_hal.o(i.HAL_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = HAL_Init &rArr; HAL_InitTick &rArr; HAL_NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriorityGrouping
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[9c]"></a>HAL_InitTick</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, stm32f1xx_hal.o(i.HAL_InitTick))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = HAL_InitTick &rArr; HAL_NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SYSTICK_Config
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
</UL>

<P><STRONG><a name="[9d]"></a>HAL_MspInit</STRONG> (Thumb, 92 bytes, Stack size 8 bytes, stm32f1xx_hal_msp.o(i.HAL_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_MspInit &rArr; HAL_NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriorityGrouping
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
</UL>

<P><STRONG><a name="[d5]"></a>HAL_NVIC_ClearPendingIRQ</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f1xx_hal_cortex.o(i.HAL_NVIC_ClearPendingIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USARTClass::begin(unsigned)
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_INT_ClearAllFlags(USART_TypeDef*, IRQn_Type)
</UL>

<P><STRONG><a name="[d9]"></a>HAL_NVIC_DisableIRQ</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f1xx_hal_cortex.o(i.HAL_NVIC_DisableIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USARTClass::begin(unsigned)
</UL>

<P><STRONG><a name="[da]"></a>HAL_NVIC_EnableIRQ</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f1xx_hal_cortex.o(i.HAL_NVIC_EnableIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USARTClass::begin(unsigned)
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_custom_init
</UL>

<P><STRONG><a name="[9f]"></a>HAL_NVIC_SetPriority</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, stm32f1xx_hal_cortex.o(i.HAL_NVIC_SetPriority))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_SetPriority(IRQn_Type, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USARTClass::begin(unsigned)
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MspInit
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_custom_init
</UL>

<P><STRONG><a name="[9b]"></a>HAL_NVIC_SetPriorityGrouping</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f1xx_hal_cortex.o(i.HAL_NVIC_SetPriorityGrouping))
<BR><BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MspInit
</UL>

<P><STRONG><a name="[a1]"></a>HAL_RCCEx_PeriphCLKConfig</STRONG> (Thumb, 224 bytes, Stack size 32 bytes, stm32f1xx_hal_rcc_ex.o(i.HAL_RCCEx_PeriphCLKConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = HAL_RCCEx_PeriphCLKConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[a2]"></a>HAL_RCC_ClockConfig</STRONG> (Thumb, 280 bytes, Stack size 32 bytes, stm32f1xx_hal_rcc.o(i.HAL_RCC_ClockConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = HAL_RCC_ClockConfig &rArr; HAL_InitTick &rArr; HAL_NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetSysClockFreq
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[95]"></a>HAL_RCC_GetPCLK1Freq</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f1xx_hal_rcc.o(i.HAL_RCC_GetPCLK1Freq))
<BR><BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Init
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig(__UART_HandleTypeDef*)
</UL>

<P><STRONG><a name="[cd]"></a>HAL_RCC_GetPCLK2Freq</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f1xx_hal_rcc.o(i.HAL_RCC_GetPCLK2Freq))
<BR><BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig(__UART_HandleTypeDef*)
</UL>

<P><STRONG><a name="[a3]"></a>HAL_RCC_GetSysClockFreq</STRONG> (Thumb, 76 bytes, Stack size 20 bytes, stm32f1xx_hal_rcc.o(i.HAL_RCC_GetSysClockFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = HAL_RCC_GetSysClockFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delayMicroseconds
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay
</UL>

<P><STRONG><a name="[a4]"></a>HAL_RCC_OscConfig</STRONG> (Thumb, 778 bytes, Stack size 40 bytes, stm32f1xx_hal_rcc.o(i.HAL_RCC_OscConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = HAL_RCC_OscConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[a6]"></a>HAL_SYSTICK_Callback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, main.o(i.HAL_SYSTICK_Callback))
<BR><BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SYSTICK_IRQHandler
</UL>

<P><STRONG><a name="[9e]"></a>HAL_SYSTICK_Config</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, stm32f1xx_hal_cortex.o(i.HAL_SYSTICK_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_SYSTICK_Config
</UL>
<BR>[Calls]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_SetPriority(IRQn_Type, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
</UL>

<P><STRONG><a name="[a5]"></a>HAL_SYSTICK_IRQHandler</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, stm32f1xx_hal_cortex.o(i.HAL_SYSTICK_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_SYSTICK_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SYSTICK_Callback
</UL>
<BR>[Called By]<UL><LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[a7]"></a>HAL_UART_Init</STRONG> (Thumb, 98 bytes, Stack size 16 bytes, stm32f1xx_hal_uart.o(i.HAL_UART_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = HAL_UART_Init &rArr; UART_SetConfig(__UART_HandleTypeDef*)
</UL>
<BR>[Calls]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig(__UART_HandleTypeDef*)
</UL>
<BR>[Called By]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USARTClass::begin(unsigned)
</UL>

<P><STRONG><a name="[a8]"></a>HAL_UART_MspInit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f1xx_hal_uart.o(i.HAL_UART_MspInit))
<BR><BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
</UL>

<P><STRONG><a name="[6]"></a>HardFault_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f1xx_it.o(i.HardFault_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xg.o(RESET)
</UL>
<P><STRONG><a name="[2e]"></a>I2C1_ER_IRQHandler</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, twi.o(i.I2C1_ER_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = I2C1_ER_IRQHandler &rArr; HAL_I2C_ER_IRQHandler &rArr; I2C_ITError(__I2C_HandleTypeDef*) &rArr; HAL_DMA_Abort_IT
</UL>
<BR>[Calls]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_ER_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xg.o(RESET)
</UL>
<P><STRONG><a name="[2d]"></a>I2C1_EV_IRQHandler</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, twi.o(i.I2C1_EV_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = I2C1_EV_IRQHandler &rArr; HAL_I2C_EV_IRQHandler &rArr; I2C_Slave_STOPF(__I2C_HandleTypeDef*) &rArr; I2C_ITError(__I2C_HandleTypeDef*) &rArr; HAL_DMA_Abort_IT
</UL>
<BR>[Calls]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_EV_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xg.o(RESET)
</UL>
<P><STRONG><a name="[30]"></a>I2C2_ER_IRQHandler</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, twi.o(i.I2C2_ER_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = I2C2_ER_IRQHandler &rArr; HAL_I2C_ER_IRQHandler &rArr; I2C_ITError(__I2C_HandleTypeDef*) &rArr; HAL_DMA_Abort_IT
</UL>
<BR>[Calls]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_ER_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xg.o(RESET)
</UL>
<P><STRONG><a name="[2f]"></a>I2C2_EV_IRQHandler</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, twi.o(i.I2C2_EV_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = I2C2_EV_IRQHandler &rArr; HAL_I2C_EV_IRQHandler &rArr; I2C_Slave_STOPF(__I2C_HandleTypeDef*) &rArr; I2C_ITError(__I2C_HandleTypeDef*) &rArr; HAL_DMA_Abort_IT
</UL>
<BR>[Calls]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_EV_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xg.o(RESET)
</UL>
<P><STRONG><a name="[7]"></a>MemManage_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f1xx_it.o(i.MemManage_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xg.o(RESET)
</UL>
<P><STRONG><a name="[5]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f1xx_it.o(i.NMI_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xg.o(RESET)
</UL>
<P><STRONG><a name="[d]"></a>SysTick_Handler</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, stm32f1xx_it.o(i.SysTick_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SysTick_Handler &rArr; HAL_SYSTICK_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SYSTICK_IRQHandler
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_IncTick
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xg.o(RESET)
</UL>
<P><STRONG><a name="[ab]"></a>SystemClock_Config</STRONG> (Thumb, 138 bytes, Stack size 80 bytes, main.o(i.SystemClock_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = SystemClock_Config &rArr; HAL_RCC_ClockConfig &rArr; HAL_InitTick &rArr; HAL_NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_PeriphCLKConfig
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[4b]"></a>SystemInit</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, system_stm32f1xx.o(i.SystemInit))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xg.o(.text)
</UL>
<P><STRONG><a name="[42]"></a>UART4_IRQHandler</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, sys.o(i.UART4_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = UART4_IRQHandler &rArr; USARTClass::IrqHandler() &rArr; RingBuffer::store_char(unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USARTClass::IrqHandler()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xg.o(RESET)
</UL>
<P><STRONG><a name="[43]"></a>UART5_IRQHandler</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, sys.o(i.UART5_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = UART5_IRQHandler &rArr; USARTClass::IrqHandler() &rArr; RingBuffer::store_char(unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USARTClass::IrqHandler()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xg.o(RESET)
</UL>
<P><STRONG><a name="[33]"></a>USART1_IRQHandler</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, sys.o(i.USART1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = USART1_IRQHandler &rArr; USARTClass::IrqHandler() &rArr; RingBuffer::store_char(unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USARTClass::IrqHandler()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xg.o(RESET)
</UL>
<P><STRONG><a name="[34]"></a>USART2_IRQHandler</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, sys.o(i.USART2_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = USART2_IRQHandler &rArr; USARTClass::IrqHandler() &rArr; RingBuffer::store_char(unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USARTClass::IrqHandler()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xg.o(RESET)
</UL>
<P><STRONG><a name="[35]"></a>USART3_IRQHandler</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, sys.o(i.USART3_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = USART3_IRQHandler &rArr; USARTClass::IrqHandler() &rArr; RingBuffer::store_char(unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USARTClass::IrqHandler()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xg.o(RESET)
</UL>
<P><STRONG><a name="[9]"></a>UsageFault_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f1xx_it.o(i.UsageFault_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xg.o(RESET)
</UL>
<P><STRONG><a name="[af]"></a>Initialize()</STRONG> (Thumb, 248 bytes, Stack size 8 bytes, main.o(i._Z10Initializev))
<BR><BR>[Stack]<UL><LI>Max Depth = 592<LI>Call Chain = Initialize() &rArr; MPU6050::CalibrateGyro(unsigned char) &rArr; MPU6050::PID(unsigned char, float, float, unsigned char) &rArr; MPU6050::getDeviceID() &rArr; I2Cdev::readBits(unsigned char, unsigned char, unsigned char, unsigned char, unsigned char*, unsigned short) &rArr; I2Cdev::readByte(unsigned char, unsigned char, unsigned char*, unsigned short) &rArr; I2Cdev::readBytes(unsigned char, unsigned char, unsigned char, unsigned char*, unsigned short) &rArr; TwoWire::requestFrom(unsigned char, unsigned char) &rArr; TwoWire::requestFrom(unsigned char, unsigned char, unsigned char) &rArr; TwoWire::requestFrom(unsigned char, unsigned char, unsigned, unsigned char, unsigned char) &rArr; TwoWire::endTransmission(unsigned char) &rArr; i2c_master_write &rArr; i2c_IsDeviceReady &rArr; HAL_I2C_IsDeviceReady &rArr; I2C_WaitOnFlagUntilTimeout(__I2C_HandleTypeDef*, unsigned, FlagStatus, unsigned, unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print::println()
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print::println(const char*)
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6050::initialize()
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TwoWire::begin(bool)
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6050::PrintActiveOffsets()
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6050::testConnection()
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6050::CalibrateAccel(unsigned char)
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6050::CalibrateGyro(unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[b9]"></a>SetOffsets(int*)</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, main.o(i._Z10SetOffsetsPi))
<BR><BR>[Stack]<UL><LI>Max Depth = 400<LI>Call Chain = SetOffsets(int*) &rArr; MPU6050::setZAccelOffset(short) &rArr; MPU6050::getDeviceID() &rArr; I2Cdev::readBits(unsigned char, unsigned char, unsigned char, unsigned char, unsigned char*, unsigned short) &rArr; I2Cdev::readByte(unsigned char, unsigned char, unsigned char*, unsigned short) &rArr; I2Cdev::readBytes(unsigned char, unsigned char, unsigned char, unsigned char*, unsigned short) &rArr; TwoWire::requestFrom(unsigned char, unsigned char) &rArr; TwoWire::requestFrom(unsigned char, unsigned char, unsigned char) &rArr; TwoWire::requestFrom(unsigned char, unsigned char, unsigned, unsigned char, unsigned char) &rArr; TwoWire::endTransmission(unsigned char) &rArr; i2c_master_write &rArr; i2c_IsDeviceReady &rArr; HAL_I2C_IsDeviceReady &rArr; I2C_WaitOnFlagUntilTimeout(__I2C_HandleTypeDef*, unsigned, FlagStatus, unsigned, unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6050::setZAccelOffset(short)
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6050::setYAccelOffset(short)
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6050::setXAccelOffset(short)
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6050::setZGyroOffset(short)
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6050::setYGyroOffset(short)
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6050::setXGyroOffset(short)
</UL>
<BR>[Called By]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PullBracketsOut()
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PullBracketsIn()
</UL>

<P><STRONG><a name="[cc]"></a>ForceHeader()</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, main.o(i._Z11ForceHeaderv))
<BR><BR>[Called By]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PullBracketsOut()
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PullBracketsIn()
</UL>

<P><STRONG><a name="[c0]"></a>GetSmoothed()</STRONG> (Thumb, 168 bytes, Stack size 56 bytes, main.o(i._Z11GetSmoothedv))
<BR><BR>[Stack]<UL><LI>Max Depth = 392<LI>Call Chain = GetSmoothed() &rArr; MPU6050::getMotion6(short*, short*, short*, short*, short*, short*) &rArr; I2Cdev::readBytes(unsigned char, unsigned char, unsigned char, unsigned char*, unsigned short) &rArr; TwoWire::requestFrom(unsigned char, unsigned char) &rArr; TwoWire::requestFrom(unsigned char, unsigned char, unsigned char) &rArr; TwoWire::requestFrom(unsigned char, unsigned char, unsigned, unsigned char, unsigned char) &rArr; TwoWire::endTransmission(unsigned char) &rArr; i2c_master_write &rArr; i2c_IsDeviceReady &rArr; HAL_I2C_IsDeviceReady &rArr; I2C_WaitOnFlagUntilTimeout(__I2C_HandleTypeDef*, unsigned, FlagStatus, unsigned, unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delayMicroseconds
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print::print(char)
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6050::getMotion6(short*, short*, short*, short*, short*, short*)
</UL>
<BR>[Called By]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PullBracketsOut()
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PullBracketsIn()
</UL>

<P><STRONG><a name="[c6]"></a>SetAveraging(int)</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, main.o(i._Z12SetAveragingi))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = SetAveraging(int) &rArr; Print::print(int, int) &rArr; Print::print(long, int) &rArr; Print::printNumber(unsigned long, unsigned char) &rArr; Print::write(const char*)
</UL>
<BR>[Calls]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print::println(const char*)
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print::print(int, int)
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print::print(const char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PullBracketsIn()
</UL>

<P><STRONG><a name="[c9]"></a>ShowProgress()</STRONG> (Thumb, 164 bytes, Stack size 8 bytes, main.o(i._Z12ShowProgressv))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = ShowProgress() &rArr; Print::print(int, int) &rArr; Print::print(long, int) &rArr; Print::printNumber(unsigned long, unsigned char) &rArr; Print::write(const char*)
</UL>
<BR>[Calls]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print::println(char)
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print::println(const char*)
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print::print(int, int)
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print::print(char)
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print::print(const char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PullBracketsOut()
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PullBracketsIn()
</UL>

<P><STRONG><a name="[cb]"></a>PullBracketsIn()</STRONG> (Thumb, 236 bytes, Stack size 40 bytes, main.o(i._Z14PullBracketsInv))
<BR><BR>[Stack]<UL><LI>Max Depth = 440<LI>Call Chain = PullBracketsIn() &rArr; SetOffsets(int*) &rArr; MPU6050::setZAccelOffset(short) &rArr; MPU6050::getDeviceID() &rArr; I2Cdev::readBits(unsigned char, unsigned char, unsigned char, unsigned char, unsigned char*, unsigned short) &rArr; I2Cdev::readByte(unsigned char, unsigned char, unsigned char*, unsigned short) &rArr; I2Cdev::readBytes(unsigned char, unsigned char, unsigned char, unsigned char*, unsigned short) &rArr; TwoWire::requestFrom(unsigned char, unsigned char) &rArr; TwoWire::requestFrom(unsigned char, unsigned char, unsigned char) &rArr; TwoWire::requestFrom(unsigned char, unsigned char, unsigned, unsigned char, unsigned char) &rArr; TwoWire::endTransmission(unsigned char) &rArr; i2c_master_write &rArr; i2c_IsDeviceReady &rArr; HAL_I2C_IsDeviceReady &rArr; I2C_WaitOnFlagUntilTimeout(__I2C_HandleTypeDef*, unsigned, FlagStatus, unsigned, unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print::println(const char*)
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowProgress()
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetAveraging(int)
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetSmoothed()
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ForceHeader()
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetOffsets(int*)
</UL>
<BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[cf]"></a>PullBracketsOut()</STRONG> (Thumb, 222 bytes, Stack size 56 bytes, main.o(i._Z15PullBracketsOutv))
<BR><BR>[Stack]<UL><LI>Max Depth = 456<LI>Call Chain = PullBracketsOut() &rArr; SetOffsets(int*) &rArr; MPU6050::setZAccelOffset(short) &rArr; MPU6050::getDeviceID() &rArr; I2Cdev::readBits(unsigned char, unsigned char, unsigned char, unsigned char, unsigned char*, unsigned short) &rArr; I2Cdev::readByte(unsigned char, unsigned char, unsigned char*, unsigned short) &rArr; I2Cdev::readBytes(unsigned char, unsigned char, unsigned char, unsigned char*, unsigned short) &rArr; TwoWire::requestFrom(unsigned char, unsigned char) &rArr; TwoWire::requestFrom(unsigned char, unsigned char, unsigned char) &rArr; TwoWire::requestFrom(unsigned char, unsigned char, unsigned, unsigned char, unsigned char) &rArr; TwoWire::endTransmission(unsigned char) &rArr; i2c_master_write &rArr; i2c_IsDeviceReady &rArr; HAL_I2C_IsDeviceReady &rArr; I2C_WaitOnFlagUntilTimeout(__I2C_HandleTypeDef*, unsigned, FlagStatus, unsigned, unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print::println(const char*)
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowProgress()
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetSmoothed()
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ForceHeader()
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetOffsets(int*)
</UL>
<BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[d7]"></a>RingBuffer::store_char(unsigned char)</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, ringbuffer.o(i._ZN10RingBuffer10store_charEh))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = RingBuffer::store_char(unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USARTClass::IrqHandler()
</UL>

<P><STRONG><a name="[d6]"></a>RingBuffer::RingBuffer()</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, ringbuffer.o(i._ZN10RingBufferC1Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = RingBuffer::RingBuffer()
</UL>
<BR>[Calls]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___5_sys_c_pinMode
</UL>

<P><STRONG><a name="[141]"></a>RingBuffer::RingBuffer__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, ringbuffer.o(i._ZN10RingBufferC1Ev), UNUSED)

<P><STRONG><a name="[ae]"></a>USARTClass::IrqHandler()</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, usartclass.o(i._ZN10USARTClass10IrqHandlerEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = USARTClass::IrqHandler() &rArr; RingBuffer::store_char(unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RingBuffer::store_char(unsigned char)
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_INT_ClearAllFlags(USART_TypeDef*, IRQn_Type)
</UL>
<BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_IRQHandler
<LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_IRQHandler
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART5_IRQHandler
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART4_IRQHandler
</UL>

<P><STRONG><a name="[d8]"></a>USARTClass::begin(unsigned)</STRONG> (Thumb, 442 bytes, Stack size 88 bytes, usartclass.o(i._ZN10USARTClass5beginEj))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = USARTClass::begin(unsigned) &rArr; pinMode &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pinMode
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_ClearPendingIRQ
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_DisableIRQ
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[54]"></a>USARTClass::write(unsigned char)</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, usartclass.o(i._ZN10USARTClass5writeEh))
<BR><BR>[Called By]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6050::PID(unsigned char, float, float, unsigned char)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usartclass.o(.constdata__ZTV10USARTClass)
</UL>
<P><STRONG><a name="[11a]"></a>USARTClass::USARTClass(USART_TypeDef*, IRQn_Type, unsigned, RingBuffer*)</STRONG> (Thumb, 30 bytes, Stack size 12 bytes, usartclass.o(i._ZN10USARTClassC1EP13USART_TypeDef9IRQn_TypejP10RingBuffer))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = USARTClass::USARTClass(USART_TypeDef*, IRQn_Type, unsigned, RingBuffer*)
</UL>
<BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___5_sys_c_pinMode
</UL>

<P><STRONG><a name="[142]"></a>USARTClass::USARTClass__sub_object(USART_TypeDef*, IRQn_Type, unsigned, RingBuffer*)</STRONG> (Thumb, 0 bytes, Stack size 12 bytes, usartclass.o(i._ZN10USARTClassC1EP13USART_TypeDef9IRQn_TypejP10RingBuffer), UNUSED)

<P><STRONG><a name="[db]"></a>Print::printNumber(unsigned long, unsigned char)</STRONG> (Thumb, 58 bytes, Stack size 48 bytes, print.o(i._ZN5Print11printNumberEmh))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = Print::printNumber(unsigned long, unsigned char) &rArr; Print::write(const char*)
</UL>
<BR>[Calls]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print::write(const char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print::print(unsigned long, int)
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print::print(long, int)
</UL>

<P><STRONG><a name="[104]"></a>Print::setWriteError(int)</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, wire.o(i._ZN5Print13setWriteErrorEi))
<BR><BR>[Called By]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TwoWire::write(unsigned char)
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TwoWire::write(const unsigned char*, unsigned)
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TwoWire::requestFrom(unsigned char, unsigned char, unsigned, unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[dd]"></a>Print::print(const __FlashStringHelper*)</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, print.o(i._ZN5Print5printEPK19__FlashStringHelper))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Print::print(const __FlashStringHelper*) &rArr; Print::write(const char*)
</UL>
<BR>[Calls]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print::write(const char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6050::PrintActiveOffsets()
</UL>

<P><STRONG><a name="[c7]"></a>Print::print(const char*)</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, print.o(i._ZN5Print5printEPKc))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Print::print(const char*) &rArr; Print::write(const char*)
</UL>
<BR>[Calls]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print::write(const char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print::println(const char*)
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowProgress()
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetAveraging(int)
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6050::PrintActiveOffsets()
</UL>

<P><STRONG><a name="[c2]"></a>Print::print(char)</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, print.o(i._ZN5Print5printEc))
<BR><BR>[Called By]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print::println()
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print::println(char)
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowProgress()
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetSmoothed()
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print::print(long, int)
</UL>

<P><STRONG><a name="[c8]"></a>Print::print(int, int)</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, print.o(i._ZN5Print5printEii))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = Print::print(int, int) &rArr; Print::print(long, int) &rArr; Print::printNumber(unsigned long, unsigned char) &rArr; Print::write(const char*)
</UL>
<BR>[Calls]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print::print(long, int)
</UL>
<BR>[Called By]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowProgress()
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetAveraging(int)
</UL>

<P><STRONG><a name="[df]"></a>Print::print(unsigned, int)</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, print.o(i._ZN5Print5printEji))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = Print::print(unsigned, int) &rArr; Print::print(unsigned long, int) &rArr; Print::printNumber(unsigned long, unsigned char) &rArr; Print::write(const char*)
</UL>
<BR>[Calls]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print::print(unsigned long, int)
</UL>
<BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print::println(unsigned, int)
</UL>

<P><STRONG><a name="[de]"></a>Print::print(long, int)</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, print.o(i._ZN5Print5printEli))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = Print::print(long, int) &rArr; Print::printNumber(unsigned long, unsigned char) &rArr; Print::write(const char*)
</UL>
<BR>[Calls]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print::print(char)
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print::printNumber(unsigned long, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print::print(int, int)
</UL>

<P><STRONG><a name="[e0]"></a>Print::print(unsigned long, int)</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, print.o(i._ZN5Print5printEmi))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = Print::print(unsigned long, int) &rArr; Print::printNumber(unsigned long, unsigned char) &rArr; Print::write(const char*)
</UL>
<BR>[Calls]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print::printNumber(unsigned long, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print::print(unsigned, int)
</UL>

<P><STRONG><a name="[dc]"></a>Print::write(const char*)</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, print.o(i._ZN5Print5writeEPKc))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Print::write(const char*)
</UL>
<BR>[Calls]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print::print(const char*)
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print::print(const __FlashStringHelper*)
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print::printNumber(unsigned long, unsigned char)
</UL>

<P><STRONG><a name="[55]"></a>Print::write(const unsigned char*, unsigned)</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, print.o(i._ZN5Print5writeEPKhj))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Print::write(const unsigned char*, unsigned)
</UL>
<BR>[Address Reference Count : 3]<UL><LI> wire.o(.constdata__ZTV6Stream)
<LI> print.o(.constdata__ZTV5Print)
<LI> usartclass.o(.constdata__ZTV10USARTClass)
</UL>
<P><STRONG><a name="[b1]"></a>Print::println(const char*)</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, print.o(i._ZN5Print7printlnEPKc))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Print::println(const char*) &rArr; Print::println()
</UL>
<BR>[Calls]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print::println()
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print::print(const char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PullBracketsOut()
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PullBracketsIn()
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowProgress()
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetAveraging(int)
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Initialize()
</UL>

<P><STRONG><a name="[ca]"></a>Print::println(char)</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, print.o(i._ZN5Print7printlnEc))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Print::println(char) &rArr; Print::println()
</UL>
<BR>[Calls]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print::println()
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print::print(char)
</UL>
<BR>[Called By]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowProgress()
</UL>

<P><STRONG><a name="[e2]"></a>Print::println(unsigned, int)</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, print.o(i._ZN5Print7printlnEji))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = Print::println(unsigned, int) &rArr; Print::print(unsigned, int) &rArr; Print::print(unsigned long, int) &rArr; Print::printNumber(unsigned long, unsigned char) &rArr; Print::write(const char*)
</UL>
<BR>[Calls]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print::println()
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print::print(unsigned, int)
</UL>
<BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[b7]"></a>Print::println()</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, print.o(i._ZN5Print7printlnEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Print::println()
</UL>
<BR>[Calls]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print::print(char)
</UL>
<BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print::println(unsigned, int)
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print::println(char)
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print::println(const char*)
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Initialize()
</UL>

<P><STRONG><a name="[e3]"></a>I2Cdev::writeBytes(unsigned char, unsigned char, unsigned char, unsigned char*)</STRONG> (Thumb, 76 bytes, Stack size 32 bytes, i2cdev.o(i._ZN6I2Cdev10writeBytesEhhhPh))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = I2Cdev::writeBytes(unsigned char, unsigned char, unsigned char, unsigned char*) &rArr; TwoWire::endTransmission() &rArr; TwoWire::endTransmission(unsigned char) &rArr; i2c_master_write &rArr; i2c_IsDeviceReady &rArr; HAL_I2C_IsDeviceReady &rArr; I2C_WaitOnFlagUntilTimeout(__I2C_HandleTypeDef*, unsigned, FlagStatus, unsigned, unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TwoWire::write(unsigned char)
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TwoWire::beginTransmission(unsigned char)
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TwoWire::endTransmission()
</UL>
<BR>[Called By]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2Cdev::writeByte(unsigned char, unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[e6]"></a>I2Cdev::writeWords(unsigned char, unsigned char, unsigned char, unsigned short*)</STRONG> (Thumb, 90 bytes, Stack size 32 bytes, i2cdev.o(i._ZN6I2Cdev10writeWordsEhhhPt))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = I2Cdev::writeWords(unsigned char, unsigned char, unsigned char, unsigned short*) &rArr; TwoWire::endTransmission() &rArr; TwoWire::endTransmission(unsigned char) &rArr; i2c_master_write &rArr; i2c_IsDeviceReady &rArr; HAL_I2C_IsDeviceReady &rArr; I2C_WaitOnFlagUntilTimeout(__I2C_HandleTypeDef*, unsigned, FlagStatus, unsigned, unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TwoWire::write(unsigned char)
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TwoWire::beginTransmission(unsigned char)
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TwoWire::endTransmission()
</UL>
<BR>[Called By]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2Cdev::writeWord(unsigned char, unsigned char, unsigned short)
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6050::PID(unsigned char, float, float, unsigned char)
</UL>

<P><STRONG><a name="[e7]"></a>I2Cdev::readBits(unsigned char, unsigned char, unsigned char, unsigned char, unsigned char*, unsigned short)</STRONG> (Thumb, 88 bytes, Stack size 40 bytes, i2cdev.o(i._ZN6I2Cdev8readBitsEhhhhPht))
<BR><BR>[Stack]<UL><LI>Max Depth = 360<LI>Call Chain = I2Cdev::readBits(unsigned char, unsigned char, unsigned char, unsigned char, unsigned char*, unsigned short) &rArr; I2Cdev::readByte(unsigned char, unsigned char, unsigned char*, unsigned short) &rArr; I2Cdev::readBytes(unsigned char, unsigned char, unsigned char, unsigned char*, unsigned short) &rArr; TwoWire::requestFrom(unsigned char, unsigned char) &rArr; TwoWire::requestFrom(unsigned char, unsigned char, unsigned char) &rArr; TwoWire::requestFrom(unsigned char, unsigned char, unsigned, unsigned char, unsigned char) &rArr; TwoWire::endTransmission(unsigned char) &rArr; i2c_master_write &rArr; i2c_IsDeviceReady &rArr; HAL_I2C_IsDeviceReady &rArr; I2C_WaitOnFlagUntilTimeout(__I2C_HandleTypeDef*, unsigned, FlagStatus, unsigned, unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2Cdev::readByte(unsigned char, unsigned char, unsigned char*, unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6050::getDeviceID()
</UL>

<P><STRONG><a name="[e8]"></a>I2Cdev::readByte(unsigned char, unsigned char, unsigned char*, unsigned short)</STRONG> (Thumb, 26 bytes, Stack size 24 bytes, i2cdev.o(i._ZN6I2Cdev8readByteEhhPht))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = I2Cdev::readByte(unsigned char, unsigned char, unsigned char*, unsigned short) &rArr; I2Cdev::readBytes(unsigned char, unsigned char, unsigned char, unsigned char*, unsigned short) &rArr; TwoWire::requestFrom(unsigned char, unsigned char) &rArr; TwoWire::requestFrom(unsigned char, unsigned char, unsigned char) &rArr; TwoWire::requestFrom(unsigned char, unsigned char, unsigned, unsigned char, unsigned char) &rArr; TwoWire::endTransmission(unsigned char) &rArr; i2c_master_write &rArr; i2c_IsDeviceReady &rArr; HAL_I2C_IsDeviceReady &rArr; I2C_WaitOnFlagUntilTimeout(__I2C_HandleTypeDef*, unsigned, FlagStatus, unsigned, unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2Cdev::readBytes(unsigned char, unsigned char, unsigned char, unsigned char*, unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2Cdev::writeBits(unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2Cdev::writeBit(unsigned char, unsigned char, unsigned char, unsigned char)
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2Cdev::readBits(unsigned char, unsigned char, unsigned char, unsigned char, unsigned char*, unsigned short)
</UL>

<P><STRONG><a name="[ea]"></a>I2Cdev::writeBit(unsigned char, unsigned char, unsigned char, unsigned char)</STRONG> (Thumb, 68 bytes, Stack size 24 bytes, i2cdev.o(i._ZN6I2Cdev8writeBitEhhhh))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = I2Cdev::writeBit(unsigned char, unsigned char, unsigned char, unsigned char) &rArr; I2Cdev::readByte(unsigned char, unsigned char, unsigned char*, unsigned short) &rArr; I2Cdev::readBytes(unsigned char, unsigned char, unsigned char, unsigned char*, unsigned short) &rArr; TwoWire::requestFrom(unsigned char, unsigned char) &rArr; TwoWire::requestFrom(unsigned char, unsigned char, unsigned char) &rArr; TwoWire::requestFrom(unsigned char, unsigned char, unsigned, unsigned char, unsigned char) &rArr; TwoWire::endTransmission(unsigned char) &rArr; i2c_master_write &rArr; i2c_IsDeviceReady &rArr; HAL_I2C_IsDeviceReady &rArr; I2C_WaitOnFlagUntilTimeout(__I2C_HandleTypeDef*, unsigned, FlagStatus, unsigned, unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2Cdev::writeByte(unsigned char, unsigned char, unsigned char)
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2Cdev::readByte(unsigned char, unsigned char, unsigned char*, unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6050::resetFIFO()
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6050::resetDMP()
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6050::setSleepEnabled(bool)
</UL>

<P><STRONG><a name="[e9]"></a>I2Cdev::readBytes(unsigned char, unsigned char, unsigned char, unsigned char*, unsigned short)</STRONG> (Thumb, 166 bytes, Stack size 40 bytes, i2cdev.o(i._ZN6I2Cdev9readBytesEhhhPht))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = I2Cdev::readBytes(unsigned char, unsigned char, unsigned char, unsigned char*, unsigned short) &rArr; TwoWire::requestFrom(unsigned char, unsigned char) &rArr; TwoWire::requestFrom(unsigned char, unsigned char, unsigned char) &rArr; TwoWire::requestFrom(unsigned char, unsigned char, unsigned, unsigned char, unsigned char) &rArr; TwoWire::endTransmission(unsigned char) &rArr; i2c_master_write &rArr; i2c_IsDeviceReady &rArr; HAL_I2C_IsDeviceReady &rArr; I2C_WaitOnFlagUntilTimeout(__I2C_HandleTypeDef*, unsigned, FlagStatus, unsigned, unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;millis
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TwoWire::available()
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TwoWire::write(unsigned char)
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TwoWire::read()
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TwoWire::beginTransmission(unsigned char)
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TwoWire::endTransmission()
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TwoWire::requestFrom(unsigned char, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2Cdev::readByte(unsigned char, unsigned char, unsigned char*, unsigned short)
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6050::getMotion6(short*, short*, short*, short*, short*, short*)
</UL>

<P><STRONG><a name="[ee]"></a>I2Cdev::readWords(unsigned char, unsigned char, unsigned char, unsigned short*, unsigned short)</STRONG> (Thumb, 214 bytes, Stack size 56 bytes, i2cdev.o(i._ZN6I2Cdev9readWordsEhhhPtt))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = I2Cdev::readWords(unsigned char, unsigned char, unsigned char, unsigned short*, unsigned short) &rArr; TwoWire::requestFrom(unsigned char, unsigned char) &rArr; TwoWire::requestFrom(unsigned char, unsigned char, unsigned char) &rArr; TwoWire::requestFrom(unsigned char, unsigned char, unsigned, unsigned char, unsigned char) &rArr; TwoWire::endTransmission(unsigned char) &rArr; i2c_master_write &rArr; i2c_IsDeviceReady &rArr; HAL_I2C_IsDeviceReady &rArr; I2C_WaitOnFlagUntilTimeout(__I2C_HandleTypeDef*, unsigned, FlagStatus, unsigned, unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;millis
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TwoWire::available()
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TwoWire::write(unsigned char)
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TwoWire::read()
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TwoWire::beginTransmission(unsigned char)
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TwoWire::endTransmission()
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TwoWire::requestFrom(unsigned char, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6050::PID(unsigned char, float, float, unsigned char)
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6050::PrintActiveOffsets()
</UL>

<P><STRONG><a name="[ef]"></a>I2Cdev::writeBits(unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)</STRONG> (Thumb, 92 bytes, Stack size 32 bytes, i2cdev.o(i._ZN6I2Cdev9writeBitsEhhhhh))
<BR><BR>[Stack]<UL><LI>Max Depth = 352<LI>Call Chain = I2Cdev::writeBits(unsigned char, unsigned char, unsigned char, unsigned char, unsigned char) &rArr; I2Cdev::readByte(unsigned char, unsigned char, unsigned char*, unsigned short) &rArr; I2Cdev::readBytes(unsigned char, unsigned char, unsigned char, unsigned char*, unsigned short) &rArr; TwoWire::requestFrom(unsigned char, unsigned char) &rArr; TwoWire::requestFrom(unsigned char, unsigned char, unsigned char) &rArr; TwoWire::requestFrom(unsigned char, unsigned char, unsigned, unsigned char, unsigned char) &rArr; TwoWire::endTransmission(unsigned char) &rArr; i2c_master_write &rArr; i2c_IsDeviceReady &rArr; HAL_I2C_IsDeviceReady &rArr; I2C_WaitOnFlagUntilTimeout(__I2C_HandleTypeDef*, unsigned, FlagStatus, unsigned, unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2Cdev::writeByte(unsigned char, unsigned char, unsigned char)
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2Cdev::readByte(unsigned char, unsigned char, unsigned char*, unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6050::setFullScaleAccelRange(unsigned char)
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6050::setFullScaleGyroRange(unsigned char)
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6050::setClockSource(unsigned char)
</UL>

<P><STRONG><a name="[eb]"></a>I2Cdev::writeByte(unsigned char, unsigned char, unsigned char)</STRONG> (Thumb, 20 bytes, Stack size 24 bytes, i2cdev.o(i._ZN6I2Cdev9writeByteEhhh))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = I2Cdev::writeByte(unsigned char, unsigned char, unsigned char) &rArr; I2Cdev::writeBytes(unsigned char, unsigned char, unsigned char, unsigned char*) &rArr; TwoWire::endTransmission() &rArr; TwoWire::endTransmission(unsigned char) &rArr; i2c_master_write &rArr; i2c_IsDeviceReady &rArr; HAL_I2C_IsDeviceReady &rArr; I2C_WaitOnFlagUntilTimeout(__I2C_HandleTypeDef*, unsigned, FlagStatus, unsigned, unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2Cdev::writeBytes(unsigned char, unsigned char, unsigned char, unsigned char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2Cdev::writeBits(unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2Cdev::writeBit(unsigned char, unsigned char, unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[f0]"></a>I2Cdev::writeWord(unsigned char, unsigned char, unsigned short)</STRONG> (Thumb, 20 bytes, Stack size 24 bytes, i2cdev.o(i._ZN6I2Cdev9writeWordEhht))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = I2Cdev::writeWord(unsigned char, unsigned char, unsigned short) &rArr; I2Cdev::writeWords(unsigned char, unsigned char, unsigned char, unsigned short*) &rArr; TwoWire::endTransmission() &rArr; TwoWire::endTransmission(unsigned char) &rArr; i2c_master_write &rArr; i2c_IsDeviceReady &rArr; HAL_I2C_IsDeviceReady &rArr; I2C_WaitOnFlagUntilTimeout(__I2C_HandleTypeDef*, unsigned, FlagStatus, unsigned, unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2Cdev::writeWords(unsigned char, unsigned char, unsigned char, unsigned short*)
</UL>
<BR>[Called By]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6050::setZAccelOffset(short)
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6050::setYAccelOffset(short)
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6050::setXAccelOffset(short)
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6050::setZGyroOffset(short)
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6050::setYGyroOffset(short)
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6050::setXGyroOffset(short)
</UL>

<P><STRONG><a name="[114]"></a>Stream::Stream__sub_object()</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, wire.o(i._ZN6StreamC2Ev))
<BR><BR>[Called By]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TwoWire::TwoWire()
</UL>

<P><STRONG><a name="[c1]"></a>MPU6050::getMotion6(short*, short*, short*, short*, short*, short*)</STRONG> (Thumb, 120 bytes, Stack size 40 bytes, mpu6050.o(i._ZN7MPU605010getMotion6EPsS0_S0_S0_S0_S0_))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = MPU6050::getMotion6(short*, short*, short*, short*, short*, short*) &rArr; I2Cdev::readBytes(unsigned char, unsigned char, unsigned char, unsigned char*, unsigned short) &rArr; TwoWire::requestFrom(unsigned char, unsigned char) &rArr; TwoWire::requestFrom(unsigned char, unsigned char, unsigned char) &rArr; TwoWire::requestFrom(unsigned char, unsigned char, unsigned, unsigned char, unsigned char) &rArr; TwoWire::endTransmission(unsigned char) &rArr; i2c_master_write &rArr; i2c_IsDeviceReady &rArr; HAL_I2C_IsDeviceReady &rArr; I2C_WaitOnFlagUntilTimeout(__I2C_HandleTypeDef*, unsigned, FlagStatus, unsigned, unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2Cdev::readBytes(unsigned char, unsigned char, unsigned char, unsigned char*, unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetSmoothed()
</UL>

<P><STRONG><a name="[b2]"></a>MPU6050::initialize()</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, mpu6050.o(i._ZN7MPU605010initializeEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 376<LI>Call Chain = MPU6050::initialize() &rArr; MPU6050::setFullScaleAccelRange(unsigned char) &rArr; I2Cdev::writeBits(unsigned char, unsigned char, unsigned char, unsigned char, unsigned char) &rArr; I2Cdev::readByte(unsigned char, unsigned char, unsigned char*, unsigned short) &rArr; I2Cdev::readBytes(unsigned char, unsigned char, unsigned char, unsigned char*, unsigned short) &rArr; TwoWire::requestFrom(unsigned char, unsigned char) &rArr; TwoWire::requestFrom(unsigned char, unsigned char, unsigned char) &rArr; TwoWire::requestFrom(unsigned char, unsigned char, unsigned, unsigned char, unsigned char) &rArr; TwoWire::endTransmission(unsigned char) &rArr; i2c_master_write &rArr; i2c_IsDeviceReady &rArr; HAL_I2C_IsDeviceReady &rArr; I2C_WaitOnFlagUntilTimeout(__I2C_HandleTypeDef*, unsigned, FlagStatus, unsigned, unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6050::setFullScaleAccelRange(unsigned char)
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6050::setFullScaleGyroRange(unsigned char)
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6050::setSleepEnabled(bool)
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6050::setClockSource(unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Initialize()
</UL>

<P><STRONG><a name="[f5]"></a>MPU6050::getDeviceID()</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, mpu6050.o(i._ZN7MPU605011getDeviceIDEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 376<LI>Call Chain = MPU6050::getDeviceID() &rArr; I2Cdev::readBits(unsigned char, unsigned char, unsigned char, unsigned char, unsigned char*, unsigned short) &rArr; I2Cdev::readByte(unsigned char, unsigned char, unsigned char*, unsigned short) &rArr; I2Cdev::readBytes(unsigned char, unsigned char, unsigned char, unsigned char*, unsigned short) &rArr; TwoWire::requestFrom(unsigned char, unsigned char) &rArr; TwoWire::requestFrom(unsigned char, unsigned char, unsigned char) &rArr; TwoWire::requestFrom(unsigned char, unsigned char, unsigned, unsigned char, unsigned char) &rArr; TwoWire::endTransmission(unsigned char) &rArr; i2c_master_write &rArr; i2c_IsDeviceReady &rArr; HAL_I2C_IsDeviceReady &rArr; I2C_WaitOnFlagUntilTimeout(__I2C_HandleTypeDef*, unsigned, FlagStatus, unsigned, unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2Cdev::readBits(unsigned char, unsigned char, unsigned char, unsigned char, unsigned char*, unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6050::PID(unsigned char, float, float, unsigned char)
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6050::PrintActiveOffsets()
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6050::setZAccelOffset(short)
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6050::setYAccelOffset(short)
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6050::setXAccelOffset(short)
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6050::testConnection()
</UL>

<P><STRONG><a name="[b5]"></a>MPU6050::CalibrateGyro(unsigned char)</STRONG> (Thumb, 146 bytes, Stack size 64 bytes, mpu6050.o(i._ZN7MPU605013CalibrateGyroEh))
<BR><BR>[Stack]<UL><LI>Max Depth = 584<LI>Call Chain = MPU6050::CalibrateGyro(unsigned char) &rArr; MPU6050::PID(unsigned char, float, float, unsigned char) &rArr; MPU6050::getDeviceID() &rArr; I2Cdev::readBits(unsigned char, unsigned char, unsigned char, unsigned char, unsigned char*, unsigned short) &rArr; I2Cdev::readByte(unsigned char, unsigned char, unsigned char*, unsigned short) &rArr; I2Cdev::readBytes(unsigned char, unsigned char, unsigned char, unsigned char*, unsigned short) &rArr; TwoWire::requestFrom(unsigned char, unsigned char) &rArr; TwoWire::requestFrom(unsigned char, unsigned char, unsigned char) &rArr; TwoWire::requestFrom(unsigned char, unsigned char, unsigned, unsigned char, unsigned char) &rArr; TwoWire::endTransmission(unsigned char) &rArr; i2c_master_write &rArr; i2c_IsDeviceReady &rArr; HAL_I2C_IsDeviceReady &rArr; I2C_WaitOnFlagUntilTimeout(__I2C_HandleTypeDef*, unsigned, FlagStatus, unsigned, unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;map
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6050::PID(unsigned char, float, float, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Initialize()
</UL>

<P><STRONG><a name="[b4]"></a>MPU6050::CalibrateAccel(unsigned char)</STRONG> (Thumb, 100 bytes, Stack size 56 bytes, mpu6050.o(i._ZN7MPU605014CalibrateAccelEh))
<BR><BR>[Stack]<UL><LI>Max Depth = 576<LI>Call Chain = MPU6050::CalibrateAccel(unsigned char) &rArr; MPU6050::PID(unsigned char, float, float, unsigned char) &rArr; MPU6050::getDeviceID() &rArr; I2Cdev::readBits(unsigned char, unsigned char, unsigned char, unsigned char, unsigned char*, unsigned short) &rArr; I2Cdev::readByte(unsigned char, unsigned char, unsigned char*, unsigned short) &rArr; I2Cdev::readBytes(unsigned char, unsigned char, unsigned char, unsigned char*, unsigned short) &rArr; TwoWire::requestFrom(unsigned char, unsigned char) &rArr; TwoWire::requestFrom(unsigned char, unsigned char, unsigned char) &rArr; TwoWire::requestFrom(unsigned char, unsigned char, unsigned, unsigned char, unsigned char) &rArr; TwoWire::endTransmission(unsigned char) &rArr; i2c_master_write &rArr; i2c_IsDeviceReady &rArr; HAL_I2C_IsDeviceReady &rArr; I2C_WaitOnFlagUntilTimeout(__I2C_HandleTypeDef*, unsigned, FlagStatus, unsigned, unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;map
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6050::PID(unsigned char, float, float, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Initialize()
</UL>

<P><STRONG><a name="[f1]"></a>MPU6050::setClockSource(unsigned char)</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, mpu6050.o(i._ZN7MPU605014setClockSourceEh))
<BR><BR>[Stack]<UL><LI>Max Depth = 368<LI>Call Chain = MPU6050::setClockSource(unsigned char) &rArr; I2Cdev::writeBits(unsigned char, unsigned char, unsigned char, unsigned char, unsigned char) &rArr; I2Cdev::readByte(unsigned char, unsigned char, unsigned char*, unsigned short) &rArr; I2Cdev::readBytes(unsigned char, unsigned char, unsigned char, unsigned char*, unsigned short) &rArr; TwoWire::requestFrom(unsigned char, unsigned char) &rArr; TwoWire::requestFrom(unsigned char, unsigned char, unsigned char) &rArr; TwoWire::requestFrom(unsigned char, unsigned char, unsigned, unsigned char, unsigned char) &rArr; TwoWire::endTransmission(unsigned char) &rArr; i2c_master_write &rArr; i2c_IsDeviceReady &rArr; HAL_I2C_IsDeviceReady &rArr; I2C_WaitOnFlagUntilTimeout(__I2C_HandleTypeDef*, unsigned, FlagStatus, unsigned, unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2Cdev::writeBits(unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6050::initialize()
</UL>

<P><STRONG><a name="[bd]"></a>MPU6050::setXGyroOffset(short)</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, mpu6050.o(i._ZN7MPU605014setXGyroOffsetEs))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = MPU6050::setXGyroOffset(short) &rArr; I2Cdev::writeWord(unsigned char, unsigned char, unsigned short) &rArr; I2Cdev::writeWords(unsigned char, unsigned char, unsigned char, unsigned short*) &rArr; TwoWire::endTransmission() &rArr; TwoWire::endTransmission(unsigned char) &rArr; i2c_master_write &rArr; i2c_IsDeviceReady &rArr; HAL_I2C_IsDeviceReady &rArr; I2C_WaitOnFlagUntilTimeout(__I2C_HandleTypeDef*, unsigned, FlagStatus, unsigned, unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2Cdev::writeWord(unsigned char, unsigned char, unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetOffsets(int*)
</UL>

<P><STRONG><a name="[be]"></a>MPU6050::setYGyroOffset(short)</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, mpu6050.o(i._ZN7MPU605014setYGyroOffsetEs))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = MPU6050::setYGyroOffset(short) &rArr; I2Cdev::writeWord(unsigned char, unsigned char, unsigned short) &rArr; I2Cdev::writeWords(unsigned char, unsigned char, unsigned char, unsigned short*) &rArr; TwoWire::endTransmission() &rArr; TwoWire::endTransmission(unsigned char) &rArr; i2c_master_write &rArr; i2c_IsDeviceReady &rArr; HAL_I2C_IsDeviceReady &rArr; I2C_WaitOnFlagUntilTimeout(__I2C_HandleTypeDef*, unsigned, FlagStatus, unsigned, unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2Cdev::writeWord(unsigned char, unsigned char, unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetOffsets(int*)
</UL>

<P><STRONG><a name="[bf]"></a>MPU6050::setZGyroOffset(short)</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, mpu6050.o(i._ZN7MPU605014setZGyroOffsetEs))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = MPU6050::setZGyroOffset(short) &rArr; I2Cdev::writeWord(unsigned char, unsigned char, unsigned short) &rArr; I2Cdev::writeWords(unsigned char, unsigned char, unsigned char, unsigned short*) &rArr; TwoWire::endTransmission() &rArr; TwoWire::endTransmission(unsigned char) &rArr; i2c_master_write &rArr; i2c_IsDeviceReady &rArr; HAL_I2C_IsDeviceReady &rArr; I2C_WaitOnFlagUntilTimeout(__I2C_HandleTypeDef*, unsigned, FlagStatus, unsigned, unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2Cdev::writeWord(unsigned char, unsigned char, unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetOffsets(int*)
</UL>

<P><STRONG><a name="[b3]"></a>MPU6050::testConnection()</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, mpu6050.o(i._ZN7MPU605014testConnectionEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 384<LI>Call Chain = MPU6050::testConnection() &rArr; MPU6050::getDeviceID() &rArr; I2Cdev::readBits(unsigned char, unsigned char, unsigned char, unsigned char, unsigned char*, unsigned short) &rArr; I2Cdev::readByte(unsigned char, unsigned char, unsigned char*, unsigned short) &rArr; I2Cdev::readBytes(unsigned char, unsigned char, unsigned char, unsigned char*, unsigned short) &rArr; TwoWire::requestFrom(unsigned char, unsigned char) &rArr; TwoWire::requestFrom(unsigned char, unsigned char, unsigned char) &rArr; TwoWire::requestFrom(unsigned char, unsigned char, unsigned, unsigned char, unsigned char) &rArr; TwoWire::endTransmission(unsigned char) &rArr; i2c_master_write &rArr; i2c_IsDeviceReady &rArr; HAL_I2C_IsDeviceReady &rArr; I2C_WaitOnFlagUntilTimeout(__I2C_HandleTypeDef*, unsigned, FlagStatus, unsigned, unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6050::getDeviceID()
</UL>
<BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Initialize()
</UL>

<P><STRONG><a name="[f4]"></a>MPU6050::setSleepEnabled(bool)</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, mpu6050.o(i._ZN7MPU605015setSleepEnabledEb))
<BR><BR>[Stack]<UL><LI>Max Depth = 360<LI>Call Chain = MPU6050::setSleepEnabled(bool) &rArr; I2Cdev::writeBit(unsigned char, unsigned char, unsigned char, unsigned char) &rArr; I2Cdev::readByte(unsigned char, unsigned char, unsigned char*, unsigned short) &rArr; I2Cdev::readBytes(unsigned char, unsigned char, unsigned char, unsigned char*, unsigned short) &rArr; TwoWire::requestFrom(unsigned char, unsigned char) &rArr; TwoWire::requestFrom(unsigned char, unsigned char, unsigned char) &rArr; TwoWire::requestFrom(unsigned char, unsigned char, unsigned, unsigned char, unsigned char) &rArr; TwoWire::endTransmission(unsigned char) &rArr; i2c_master_write &rArr; i2c_IsDeviceReady &rArr; HAL_I2C_IsDeviceReady &rArr; I2C_WaitOnFlagUntilTimeout(__I2C_HandleTypeDef*, unsigned, FlagStatus, unsigned, unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2Cdev::writeBit(unsigned char, unsigned char, unsigned char, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6050::initialize()
</UL>

<P><STRONG><a name="[ba]"></a>MPU6050::setXAccelOffset(short)</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, mpu6050.o(i._ZN7MPU605015setXAccelOffsetEs))
<BR><BR>[Stack]<UL><LI>Max Depth = 392<LI>Call Chain = MPU6050::setXAccelOffset(short) &rArr; MPU6050::getDeviceID() &rArr; I2Cdev::readBits(unsigned char, unsigned char, unsigned char, unsigned char, unsigned char*, unsigned short) &rArr; I2Cdev::readByte(unsigned char, unsigned char, unsigned char*, unsigned short) &rArr; I2Cdev::readBytes(unsigned char, unsigned char, unsigned char, unsigned char*, unsigned short) &rArr; TwoWire::requestFrom(unsigned char, unsigned char) &rArr; TwoWire::requestFrom(unsigned char, unsigned char, unsigned char) &rArr; TwoWire::requestFrom(unsigned char, unsigned char, unsigned, unsigned char, unsigned char) &rArr; TwoWire::endTransmission(unsigned char) &rArr; i2c_master_write &rArr; i2c_IsDeviceReady &rArr; HAL_I2C_IsDeviceReady &rArr; I2C_WaitOnFlagUntilTimeout(__I2C_HandleTypeDef*, unsigned, FlagStatus, unsigned, unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2Cdev::writeWord(unsigned char, unsigned char, unsigned short)
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6050::getDeviceID()
</UL>
<BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetOffsets(int*)
</UL>

<P><STRONG><a name="[bb]"></a>MPU6050::setYAccelOffset(short)</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, mpu6050.o(i._ZN7MPU605015setYAccelOffsetEs))
<BR><BR>[Stack]<UL><LI>Max Depth = 392<LI>Call Chain = MPU6050::setYAccelOffset(short) &rArr; MPU6050::getDeviceID() &rArr; I2Cdev::readBits(unsigned char, unsigned char, unsigned char, unsigned char, unsigned char*, unsigned short) &rArr; I2Cdev::readByte(unsigned char, unsigned char, unsigned char*, unsigned short) &rArr; I2Cdev::readBytes(unsigned char, unsigned char, unsigned char, unsigned char*, unsigned short) &rArr; TwoWire::requestFrom(unsigned char, unsigned char) &rArr; TwoWire::requestFrom(unsigned char, unsigned char, unsigned char) &rArr; TwoWire::requestFrom(unsigned char, unsigned char, unsigned, unsigned char, unsigned char) &rArr; TwoWire::endTransmission(unsigned char) &rArr; i2c_master_write &rArr; i2c_IsDeviceReady &rArr; HAL_I2C_IsDeviceReady &rArr; I2C_WaitOnFlagUntilTimeout(__I2C_HandleTypeDef*, unsigned, FlagStatus, unsigned, unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2Cdev::writeWord(unsigned char, unsigned char, unsigned short)
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6050::getDeviceID()
</UL>
<BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetOffsets(int*)
</UL>

<P><STRONG><a name="[bc]"></a>MPU6050::setZAccelOffset(short)</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, mpu6050.o(i._ZN7MPU605015setZAccelOffsetEs))
<BR><BR>[Stack]<UL><LI>Max Depth = 392<LI>Call Chain = MPU6050::setZAccelOffset(short) &rArr; MPU6050::getDeviceID() &rArr; I2Cdev::readBits(unsigned char, unsigned char, unsigned char, unsigned char, unsigned char*, unsigned short) &rArr; I2Cdev::readByte(unsigned char, unsigned char, unsigned char*, unsigned short) &rArr; I2Cdev::readBytes(unsigned char, unsigned char, unsigned char, unsigned char*, unsigned short) &rArr; TwoWire::requestFrom(unsigned char, unsigned char) &rArr; TwoWire::requestFrom(unsigned char, unsigned char, unsigned char) &rArr; TwoWire::requestFrom(unsigned char, unsigned char, unsigned, unsigned char, unsigned char) &rArr; TwoWire::endTransmission(unsigned char) &rArr; i2c_master_write &rArr; i2c_IsDeviceReady &rArr; HAL_I2C_IsDeviceReady &rArr; I2C_WaitOnFlagUntilTimeout(__I2C_HandleTypeDef*, unsigned, FlagStatus, unsigned, unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2Cdev::writeWord(unsigned char, unsigned char, unsigned short)
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6050::getDeviceID()
</UL>
<BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetOffsets(int*)
</UL>

<P><STRONG><a name="[b6]"></a>MPU6050::PrintActiveOffsets()</STRONG> (Thumb, 526 bytes, Stack size 48 bytes, mpu6050.o(i._ZN7MPU605018PrintActiveOffsetsEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 424<LI>Call Chain = MPU6050::PrintActiveOffsets() &rArr; MPU6050::getDeviceID() &rArr; I2Cdev::readBits(unsigned char, unsigned char, unsigned char, unsigned char, unsigned char*, unsigned short) &rArr; I2Cdev::readByte(unsigned char, unsigned char, unsigned char*, unsigned short) &rArr; I2Cdev::readBytes(unsigned char, unsigned char, unsigned char, unsigned char*, unsigned short) &rArr; TwoWire::requestFrom(unsigned char, unsigned char) &rArr; TwoWire::requestFrom(unsigned char, unsigned char, unsigned char) &rArr; TwoWire::requestFrom(unsigned char, unsigned char, unsigned, unsigned char, unsigned char) &rArr; TwoWire::endTransmission(unsigned char) &rArr; i2c_master_write &rArr; i2c_IsDeviceReady &rArr; HAL_I2C_IsDeviceReady &rArr; I2C_WaitOnFlagUntilTimeout(__I2C_HandleTypeDef*, unsigned, FlagStatus, unsigned, unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2Cdev::readWords(unsigned char, unsigned char, unsigned char, unsigned short*, unsigned short)
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6050::getDeviceID()
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dtostrf
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print::print(const char*)
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print::print(const __FlashStringHelper*)
</UL>
<BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Initialize()
</UL>

<P><STRONG><a name="[f2]"></a>MPU6050::setFullScaleGyroRange(unsigned char)</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, mpu6050.o(i._ZN7MPU605021setFullScaleGyroRangeEh))
<BR><BR>[Stack]<UL><LI>Max Depth = 368<LI>Call Chain = MPU6050::setFullScaleGyroRange(unsigned char) &rArr; I2Cdev::writeBits(unsigned char, unsigned char, unsigned char, unsigned char, unsigned char) &rArr; I2Cdev::readByte(unsigned char, unsigned char, unsigned char*, unsigned short) &rArr; I2Cdev::readBytes(unsigned char, unsigned char, unsigned char, unsigned char*, unsigned short) &rArr; TwoWire::requestFrom(unsigned char, unsigned char) &rArr; TwoWire::requestFrom(unsigned char, unsigned char, unsigned char) &rArr; TwoWire::requestFrom(unsigned char, unsigned char, unsigned, unsigned char, unsigned char) &rArr; TwoWire::endTransmission(unsigned char) &rArr; i2c_master_write &rArr; i2c_IsDeviceReady &rArr; HAL_I2C_IsDeviceReady &rArr; I2C_WaitOnFlagUntilTimeout(__I2C_HandleTypeDef*, unsigned, FlagStatus, unsigned, unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2Cdev::writeBits(unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6050::initialize()
</UL>

<P><STRONG><a name="[f3]"></a>MPU6050::setFullScaleAccelRange(unsigned char)</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, mpu6050.o(i._ZN7MPU605022setFullScaleAccelRangeEh))
<BR><BR>[Stack]<UL><LI>Max Depth = 368<LI>Call Chain = MPU6050::setFullScaleAccelRange(unsigned char) &rArr; I2Cdev::writeBits(unsigned char, unsigned char, unsigned char, unsigned char, unsigned char) &rArr; I2Cdev::readByte(unsigned char, unsigned char, unsigned char*, unsigned short) &rArr; I2Cdev::readBytes(unsigned char, unsigned char, unsigned char, unsigned char*, unsigned short) &rArr; TwoWire::requestFrom(unsigned char, unsigned char) &rArr; TwoWire::requestFrom(unsigned char, unsigned char, unsigned char) &rArr; TwoWire::requestFrom(unsigned char, unsigned char, unsigned, unsigned char, unsigned char) &rArr; TwoWire::endTransmission(unsigned char) &rArr; i2c_master_write &rArr; i2c_IsDeviceReady &rArr; HAL_I2C_IsDeviceReady &rArr; I2C_WaitOnFlagUntilTimeout(__I2C_HandleTypeDef*, unsigned, FlagStatus, unsigned, unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2Cdev::writeBits(unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6050::initialize()
</UL>

<P><STRONG><a name="[f8]"></a>MPU6050::PID(unsigned char, float, float, unsigned char)</STRONG> (Thumb, 1210 bytes, Stack size 144 bytes, mpu6050.o(i._ZN7MPU60503PIDEhffh))
<BR><BR>[Stack]<UL><LI>Max Depth = 520<LI>Call Chain = MPU6050::PID(unsigned char, float, float, unsigned char) &rArr; MPU6050::getDeviceID() &rArr; I2Cdev::readBits(unsigned char, unsigned char, unsigned char, unsigned char, unsigned char*, unsigned short) &rArr; I2Cdev::readByte(unsigned char, unsigned char, unsigned char*, unsigned short) &rArr; I2Cdev::readBytes(unsigned char, unsigned char, unsigned char, unsigned char*, unsigned short) &rArr; TwoWire::requestFrom(unsigned char, unsigned char) &rArr; TwoWire::requestFrom(unsigned char, unsigned char, unsigned char) &rArr; TwoWire::requestFrom(unsigned char, unsigned char, unsigned, unsigned char, unsigned char) &rArr; TwoWire::endTransmission(unsigned char) &rArr; i2c_master_write &rArr; i2c_IsDeviceReady &rArr; HAL_I2C_IsDeviceReady &rArr; I2C_WaitOnFlagUntilTimeout(__I2C_HandleTypeDef*, unsigned, FlagStatus, unsigned, unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2Cdev::readWords(unsigned char, unsigned char, unsigned char, unsigned short*, unsigned short)
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2Cdev::writeWords(unsigned char, unsigned char, unsigned char, unsigned short*)
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6050::getDeviceID()
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fsub
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2uiz
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfrcmple
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmple
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USARTClass::write(unsigned char)
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6050::resetFIFO()
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6050::resetDMP()
</UL>
<BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6050::CalibrateAccel(unsigned char)
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6050::CalibrateGyro(unsigned char)
</UL>

<P><STRONG><a name="[100]"></a>MPU6050::resetDMP()</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, mpu6050.o(i._ZN7MPU60508resetDMPEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 352<LI>Call Chain = MPU6050::resetDMP() &rArr; I2Cdev::writeBit(unsigned char, unsigned char, unsigned char, unsigned char) &rArr; I2Cdev::readByte(unsigned char, unsigned char, unsigned char*, unsigned short) &rArr; I2Cdev::readBytes(unsigned char, unsigned char, unsigned char, unsigned char*, unsigned short) &rArr; TwoWire::requestFrom(unsigned char, unsigned char) &rArr; TwoWire::requestFrom(unsigned char, unsigned char, unsigned char) &rArr; TwoWire::requestFrom(unsigned char, unsigned char, unsigned, unsigned char, unsigned char) &rArr; TwoWire::endTransmission(unsigned char) &rArr; i2c_master_write &rArr; i2c_IsDeviceReady &rArr; HAL_I2C_IsDeviceReady &rArr; I2C_WaitOnFlagUntilTimeout(__I2C_HandleTypeDef*, unsigned, FlagStatus, unsigned, unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2Cdev::writeBit(unsigned char, unsigned char, unsigned char, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6050::PID(unsigned char, float, float, unsigned char)
</UL>

<P><STRONG><a name="[ff]"></a>MPU6050::resetFIFO()</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, mpu6050.o(i._ZN7MPU60509resetFIFOEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 352<LI>Call Chain = MPU6050::resetFIFO() &rArr; I2Cdev::writeBit(unsigned char, unsigned char, unsigned char, unsigned char) &rArr; I2Cdev::readByte(unsigned char, unsigned char, unsigned char*, unsigned short) &rArr; I2Cdev::readBytes(unsigned char, unsigned char, unsigned char, unsigned char*, unsigned short) &rArr; TwoWire::requestFrom(unsigned char, unsigned char) &rArr; TwoWire::requestFrom(unsigned char, unsigned char, unsigned char) &rArr; TwoWire::requestFrom(unsigned char, unsigned char, unsigned, unsigned char, unsigned char) &rArr; TwoWire::endTransmission(unsigned char) &rArr; i2c_master_write &rArr; i2c_IsDeviceReady &rArr; HAL_I2C_IsDeviceReady &rArr; I2C_WaitOnFlagUntilTimeout(__I2C_HandleTypeDef*, unsigned, FlagStatus, unsigned, unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2Cdev::writeBit(unsigned char, unsigned char, unsigned char, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6050::PID(unsigned char, float, float, unsigned char)
</UL>

<P><STRONG><a name="[11c]"></a>MPU6050::MPU6050(unsigned char)</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, mpu6050.o(i._ZN7MPU6050C1Eh))
<BR><BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___6_main_c_70058f14
</UL>

<P><STRONG><a name="[143]"></a>MPU6050::MPU6050__sub_object(unsigned char)</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, mpu6050.o(i._ZN7MPU6050C1Eh), UNUSED)

<P><STRONG><a name="[ed]"></a>TwoWire::requestFrom(unsigned char, unsigned char)</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, wire.o(i._ZN7TwoWire11requestFromEhh))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = TwoWire::requestFrom(unsigned char, unsigned char) &rArr; TwoWire::requestFrom(unsigned char, unsigned char, unsigned char) &rArr; TwoWire::requestFrom(unsigned char, unsigned char, unsigned, unsigned char, unsigned char) &rArr; TwoWire::endTransmission(unsigned char) &rArr; i2c_master_write &rArr; i2c_IsDeviceReady &rArr; HAL_I2C_IsDeviceReady &rArr; I2C_WaitOnFlagUntilTimeout(__I2C_HandleTypeDef*, unsigned, FlagStatus, unsigned, unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2Cdev::readWords(unsigned char, unsigned char, unsigned char, unsigned short*, unsigned short)
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2Cdev::readBytes(unsigned char, unsigned char, unsigned char, unsigned char*, unsigned short)
</UL>

<P><STRONG><a name="[101]"></a>TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)</STRONG> (Thumb, 34 bytes, Stack size 32 bytes, wire.o(i._ZN7TwoWire11requestFromEhhh))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = TwoWire::requestFrom(unsigned char, unsigned char, unsigned char) &rArr; TwoWire::requestFrom(unsigned char, unsigned char, unsigned, unsigned char, unsigned char) &rArr; TwoWire::endTransmission(unsigned char) &rArr; i2c_master_write &rArr; i2c_IsDeviceReady &rArr; HAL_I2C_IsDeviceReady &rArr; I2C_WaitOnFlagUntilTimeout(__I2C_HandleTypeDef*, unsigned, FlagStatus, unsigned, unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TwoWire::requestFrom(unsigned char, unsigned char, unsigned, unsigned char, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TwoWire::requestFrom(unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[102]"></a>TwoWire::requestFrom(unsigned char, unsigned char, unsigned, unsigned char, unsigned char)</STRONG> (Thumb, 158 bytes, Stack size 32 bytes, wire.o(i._ZN7TwoWire11requestFromEhhjhh))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = TwoWire::requestFrom(unsigned char, unsigned char, unsigned, unsigned char, unsigned char) &rArr; TwoWire::endTransmission(unsigned char) &rArr; i2c_master_write &rArr; i2c_IsDeviceReady &rArr; HAL_I2C_IsDeviceReady &rArr; I2C_WaitOnFlagUntilTimeout(__I2C_HandleTypeDef*, unsigned, FlagStatus, unsigned, unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TwoWire::beginTransmission(unsigned char)
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_master_read
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TwoWire::allocateRxBuffer(unsigned)
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TwoWire::endTransmission(unsigned char)
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print::setWriteError(int)
</UL>
<BR>[Called By]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[107]"></a>TwoWire::resetRxBuffer()</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, wire.o(i._ZN7TwoWire13resetRxBufferEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TwoWire::resetRxBuffer()
</UL>
<BR>[Calls]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TwoWire::begin(unsigned char, bool)
</UL>

<P><STRONG><a name="[108]"></a>TwoWire::resetTxBuffer()</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, wire.o(i._ZN7TwoWire13resetTxBufferEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TwoWire::resetTxBuffer()
</UL>
<BR>[Calls]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TwoWire::begin(unsigned char, bool)
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TwoWire::endTransmission(unsigned char)
</UL>

<P><STRONG><a name="[105]"></a>TwoWire::endTransmission(unsigned char)</STRONG> (Thumb, 108 bytes, Stack size 16 bytes, wire.o(i._ZN7TwoWire15endTransmissionEh))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = TwoWire::endTransmission(unsigned char) &rArr; i2c_master_write &rArr; i2c_IsDeviceReady &rArr; HAL_I2C_IsDeviceReady &rArr; I2C_WaitOnFlagUntilTimeout(__I2C_HandleTypeDef*, unsigned, FlagStatus, unsigned, unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_master_write
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TwoWire::resetTxBuffer()
</UL>
<BR>[Called By]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TwoWire::endTransmission()
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TwoWire::requestFrom(unsigned char, unsigned char, unsigned, unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[e5]"></a>TwoWire::endTransmission()</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, wire.o(i._ZN7TwoWire15endTransmissionEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = TwoWire::endTransmission() &rArr; TwoWire::endTransmission(unsigned char) &rArr; i2c_master_write &rArr; i2c_IsDeviceReady &rArr; HAL_I2C_IsDeviceReady &rArr; I2C_WaitOnFlagUntilTimeout(__I2C_HandleTypeDef*, unsigned, FlagStatus, unsigned, unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TwoWire::endTransmission(unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2Cdev::readWords(unsigned char, unsigned char, unsigned char, unsigned short*, unsigned short)
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2Cdev::readBytes(unsigned char, unsigned char, unsigned char, unsigned char*, unsigned short)
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2Cdev::writeWords(unsigned char, unsigned char, unsigned char, unsigned short*)
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2Cdev::writeBytes(unsigned char, unsigned char, unsigned char, unsigned char*)
</UL>

<P><STRONG><a name="[103]"></a>TwoWire::allocateRxBuffer(unsigned)</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, wire.o(i._ZN7TwoWire16allocateRxBufferEj))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = TwoWire::allocateRxBuffer(unsigned) &rArr; realloc &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;realloc
</UL>
<BR>[Called By]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TwoWire::onReceiveService(i2c_s*)
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TwoWire::requestFrom(unsigned char, unsigned char, unsigned, unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[10b]"></a>TwoWire::allocateTxBuffer(unsigned)</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, wire.o(i._ZN7TwoWire16allocateTxBufferEj))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = TwoWire::allocateTxBuffer(unsigned) &rArr; realloc &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;realloc
</UL>
<BR>[Called By]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TwoWire::write(unsigned char)
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TwoWire::write(const unsigned char*, unsigned)
</UL>

<P><STRONG><a name="[4f]"></a>TwoWire::onReceiveService(i2c_s*)</STRONG> (Thumb, 72 bytes, Stack size 24 bytes, wire.o(i._ZN7TwoWire16onReceiveServiceEP5i2c_s))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = TwoWire::onReceiveService(i2c_s*) &rArr; TwoWire::allocateRxBuffer(unsigned) &rArr; realloc &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TwoWire::allocateRxBuffer(unsigned)
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wire.o(i._ZN7TwoWire5beginEhb)
</UL>
<P><STRONG><a name="[4e]"></a>TwoWire::onRequestService(i2c_s*)</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, wire.o(i._ZN7TwoWire16onRequestServiceEP5i2c_s))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TwoWire::onRequestService(i2c_s*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wire.o(i._ZN7TwoWire5beginEhb)
</UL>
<P><STRONG><a name="[e4]"></a>TwoWire::beginTransmission(unsigned char)</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, wire.o(i._ZN7TwoWire17beginTransmissionEh))
<BR><BR>[Called By]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2Cdev::readWords(unsigned char, unsigned char, unsigned char, unsigned short*, unsigned short)
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2Cdev::readBytes(unsigned char, unsigned char, unsigned char, unsigned char*, unsigned short)
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2Cdev::writeWords(unsigned char, unsigned char, unsigned char, unsigned short*)
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2Cdev::writeBytes(unsigned char, unsigned char, unsigned char, unsigned char*)
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TwoWire::requestFrom(unsigned char, unsigned char, unsigned, unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[5a]"></a>TwoWire::read()</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, wire.o(i._ZN7TwoWire4readEv))
<BR><BR>[Called By]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2Cdev::readWords(unsigned char, unsigned char, unsigned char, unsigned short*, unsigned short)
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2Cdev::readBytes(unsigned char, unsigned char, unsigned char, unsigned char*, unsigned short)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wire.o(.constdata__ZTV7TwoWire)
</UL>
<P><STRONG><a name="[b0]"></a>TwoWire::begin(bool)</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, wire.o(i._ZN7TwoWire5beginEb))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = TwoWire::begin(bool) &rArr; TwoWire::begin(int, bool) &rArr; TwoWire::begin(unsigned char, bool) &rArr; i2c_custom_init &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TwoWire::begin(int, bool)
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay
</UL>
<BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Initialize()
</UL>

<P><STRONG><a name="[10e]"></a>TwoWire::begin(unsigned char, bool)</STRONG> (Thumb, 124 bytes, Stack size 16 bytes, wire.o(i._ZN7TwoWire5beginEhb))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = TwoWire::begin(unsigned char, bool) &rArr; i2c_custom_init &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_custom_init
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_attachSlaveTxEvent
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_attachSlaveRxEvent
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TwoWire::resetTxBuffer()
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TwoWire::resetRxBuffer()
</UL>
<BR>[Called By]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TwoWire::begin(int, bool)
</UL>

<P><STRONG><a name="[10d]"></a>TwoWire::begin(int, bool)</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, wire.o(i._ZN7TwoWire5beginEib))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = TwoWire::begin(int, bool) &rArr; TwoWire::begin(unsigned char, bool) &rArr; i2c_custom_init &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TwoWire::begin(unsigned char, bool)
</UL>
<BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TwoWire::begin(bool)
</UL>

<P><STRONG><a name="[58]"></a>TwoWire::write(const unsigned char*, unsigned)</STRONG> (Thumb, 90 bytes, Stack size 24 bytes, wire.o(i._ZN7TwoWire5writeEPKhj))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = TwoWire::write(const unsigned char*, unsigned) &rArr; TwoWire::allocateTxBuffer(unsigned) &rArr; realloc &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_slave_write_IT
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TwoWire::allocateTxBuffer(unsigned)
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print::setWriteError(int)
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wire.o(.constdata__ZTV7TwoWire)
</UL>
<P><STRONG><a name="[57]"></a>TwoWire::write(unsigned char)</STRONG> (Thumb, 78 bytes, Stack size 24 bytes, wire.o(i._ZN7TwoWire5writeEh))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = TwoWire::write(unsigned char) &rArr; TwoWire::allocateTxBuffer(unsigned) &rArr; realloc &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_slave_write_IT
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TwoWire::allocateTxBuffer(unsigned)
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print::setWriteError(int)
</UL>
<BR>[Called By]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2Cdev::readWords(unsigned char, unsigned char, unsigned char, unsigned short*, unsigned short)
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2Cdev::readBytes(unsigned char, unsigned char, unsigned char, unsigned char*, unsigned short)
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2Cdev::writeWords(unsigned char, unsigned char, unsigned char, unsigned short*)
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2Cdev::writeBytes(unsigned char, unsigned char, unsigned char, unsigned char*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wire.o(.constdata__ZTV7TwoWire)
</UL>
<P><STRONG><a name="[59]"></a>TwoWire::available()</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, wire.o(i._ZN7TwoWire9availableEv))
<BR><BR>[Called By]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2Cdev::readWords(unsigned char, unsigned char, unsigned char, unsigned short*, unsigned short)
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2Cdev::readBytes(unsigned char, unsigned char, unsigned char, unsigned char*, unsigned short)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wire.o(.constdata__ZTV7TwoWire)
</UL>
<P><STRONG><a name="[113]"></a>TwoWire::TwoWire()</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, wire.o(i._ZN7TwoWireC1Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TwoWire::TwoWire()
</UL>
<BR>[Calls]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Stream::Stream__sub_object()
</UL>
<BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___8_Wire_cpp_4e99b9cf
</UL>

<P><STRONG><a name="[144]"></a>TwoWire::TwoWire__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, wire.o(i._ZN7TwoWireC1Ev), UNUSED)

<P><STRONG><a name="[11b]"></a>SPIClass::SPIClass(SPI_TypeDef*, void(*)())</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, sys.o(i._ZN8SPIClassC1EP11SPI_TypeDefPFYvvE))
<BR><BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___5_sys_c_pinMode
</UL>

<P><STRONG><a name="[145]"></a>SPIClass::SPIClass__sub_object(SPI_TypeDef*, void(*)())</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, sys.o(i._ZN8SPIClassC1EP11SPI_TypeDefPFYvvE), UNUSED)

<P><STRONG><a name="[5e]"></a>String::StringIfHelper() const</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, i2cdev.o(i._ZNK6String14StringIfHelperEv))
<BR>[Address Reference Count : 3]<UL><LI> i2cdev.o(.data)
<LI> twi.o(.data)
<LI> main.o(.data)
</UL>
<P><STRONG><a name="[115]"></a>__0sprintf</STRONG> (Thumb, 34 bytes, Stack size 24 bytes, printfa.o(i.__0sprintf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sputc
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[146]"></a>__1sprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0sprintf), UNUSED)

<P><STRONG><a name="[122]"></a>__2sprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0sprintf))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dtostrf
</UL>

<P><STRONG><a name="[147]"></a>__c89sprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0sprintf), UNUSED)

<P><STRONG><a name="[148]"></a>sprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0sprintf), UNUSED)

<P><STRONG><a name="[56]"></a>__cxa_pure_virtual</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, pure_virt.o(i.__cxa_pure_virtual))
<BR><BR>[Calls]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGPVFN
</UL>
<BR>[Address Reference Count : 2]<UL><LI> wire.o(.constdata__ZTV6Stream)
<LI> print.o(.constdata__ZTV5Print)
</UL>
<P><STRONG><a name="[12b]"></a>free</STRONG> (Thumb, 88 bytes, Stack size 12 bytes, mallocr.o(i.__free$realloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = free
</UL>
<BR>[Called By]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;realloc
</UL>

<P><STRONG><a name="[118]"></a>malloc</STRONG> (Thumb, 64 bytes, Stack size 32 bytes, mallocr.o(i.__malloc$realloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;internal_alloc
</UL>
<BR>[Called By]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;realloc
</UL>

<P><STRONG><a name="[149]"></a>__scatterload_copy</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_copy), UNUSED)

<P><STRONG><a name="[14a]"></a>__scatterload_null</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_null), UNUSED)

<P><STRONG><a name="[14b]"></a>__scatterload_zeroinit</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_zeroinit), UNUSED)

<P><STRONG><a name="[fe]"></a>delay</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, sys.o(i.delay))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = delay &rArr; HAL_RCC_GetSysClockFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetSysClockFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TwoWire::begin(bool)
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6050::PID(unsigned char, float, float, unsigned char)
</UL>

<P><STRONG><a name="[c3]"></a>delayMicroseconds</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, sys.o(i.delayMicroseconds))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = delayMicroseconds &rArr; HAL_RCC_GetSysClockFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetSysClockFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetSmoothed()
</UL>

<P><STRONG><a name="[12a]"></a>digitalWrite</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, sys.o(i.digitalWrite))
<BR><BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[fa]"></a>dtostrf</STRONG> (Thumb, 36 bytes, Stack size 40 bytes, sys.o(i.dtostrf))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = dtostrf &rArr; __2sprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6050::PrintActiveOffsets()
</UL>

<P><STRONG><a name="[81]"></a>get_i2c_obj</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, twi.o(i.get_i2c_obj))
<BR><BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_SlaveTxCpltCallback
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_SlaveRxCpltCallback
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_ListenCpltCallback
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_ErrorCallback
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_AddrCallback
</UL>

<P><STRONG><a name="[123]"></a>i2c_IsDeviceReady</STRONG> (Thumb, 102 bytes, Stack size 24 bytes, twi.o(i.i2c_IsDeviceReady))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = i2c_IsDeviceReady &rArr; HAL_I2C_IsDeviceReady &rArr; I2C_WaitOnFlagUntilTimeout(__I2C_HandleTypeDef*, unsigned, FlagStatus, unsigned, unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_IsDeviceReady
</UL>
<BR>[Called By]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_master_write
</UL>

<P><STRONG><a name="[111]"></a>i2c_attachSlaveRxEvent</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, twi.o(i.i2c_attachSlaveRxEvent))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = i2c_attachSlaveRxEvent
</UL>
<BR>[Calls]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_EnableListen_IT
</UL>
<BR>[Called By]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TwoWire::begin(unsigned char, bool)
</UL>

<P><STRONG><a name="[110]"></a>i2c_attachSlaveTxEvent</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, twi.o(i.i2c_attachSlaveTxEvent))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = i2c_attachSlaveTxEvent
</UL>
<BR>[Calls]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_EnableListen_IT
</UL>
<BR>[Called By]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TwoWire::begin(unsigned char, bool)
</UL>

<P><STRONG><a name="[10f]"></a>i2c_custom_init</STRONG> (Thumb, 512 bytes, Stack size 48 bytes, twi.o(i.i2c_custom_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = i2c_custom_init &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Init
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_getTiming(i2c_s*, unsigned)
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TwoWire::begin(unsigned char, bool)
</UL>

<P><STRONG><a name="[106]"></a>i2c_master_read</STRONG> (Thumb, 136 bytes, Stack size 48 bytes, twi.o(i.i2c_master_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = i2c_master_read &rArr; HAL_I2C_Master_Seq_Receive_IT
</UL>
<BR>[Calls]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Master_Seq_Receive_IT
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_GetState
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_GetError
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TwoWire::requestFrom(unsigned char, unsigned char, unsigned, unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[109]"></a>i2c_master_write</STRONG> (Thumb, 154 bytes, Stack size 48 bytes, twi.o(i.i2c_master_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = i2c_master_write &rArr; i2c_IsDeviceReady &rArr; HAL_I2C_IsDeviceReady &rArr; I2C_WaitOnFlagUntilTimeout(__I2C_HandleTypeDef*, unsigned, FlagStatus, unsigned, unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Master_Seq_Transmit_IT
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_GetState
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_GetError
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_IsDeviceReady
</UL>
<BR>[Called By]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TwoWire::endTransmission(unsigned char)
</UL>

<P><STRONG><a name="[112]"></a>i2c_slave_write_IT</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, twi.o(i.i2c_slave_write_IT))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = i2c_slave_write_IT
</UL>
<BR>[Called By]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TwoWire::write(unsigned char)
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TwoWire::write(const unsigned char*, unsigned)
</UL>

<P><STRONG><a name="[4a]"></a>main</STRONG> (Thumb, 138 bytes, Stack size 0 bytes, main.o(i.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 592<LI>Call Chain = main &rArr; Initialize() &rArr; MPU6050::CalibrateGyro(unsigned char) &rArr; MPU6050::PID(unsigned char, float, float, unsigned char) &rArr; MPU6050::getDeviceID() &rArr; I2Cdev::readBits(unsigned char, unsigned char, unsigned char, unsigned char, unsigned char*, unsigned short) &rArr; I2Cdev::readByte(unsigned char, unsigned char, unsigned char*, unsigned short) &rArr; I2Cdev::readBytes(unsigned char, unsigned char, unsigned char, unsigned char*, unsigned short) &rArr; TwoWire::requestFrom(unsigned char, unsigned char) &rArr; TwoWire::requestFrom(unsigned char, unsigned char, unsigned char) &rArr; TwoWire::requestFrom(unsigned char, unsigned char, unsigned, unsigned char, unsigned char) &rArr; TwoWire::endTransmission(unsigned char) &rArr; i2c_master_write &rArr; i2c_IsDeviceReady &rArr; HAL_I2C_IsDeviceReady &rArr; I2C_WaitOnFlagUntilTimeout(__I2C_HandleTypeDef*, unsigned, FlagStatus, unsigned, unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pinMode
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;digitalWrite
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print::println(unsigned, int)
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print::println(const char*)
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USARTClass::begin(unsigned)
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PullBracketsOut()
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PullBracketsIn()
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetAveraging(int)
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Initialize()
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay
</UL>
<BR>[Address Reference Count : 1]<UL><LI> entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P><STRONG><a name="[f6]"></a>map</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, sys.o(i.map))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = map
</UL>
<BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6050::CalibrateAccel(unsigned char)
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6050::CalibrateGyro(unsigned char)
</UL>

<P><STRONG><a name="[ec]"></a>millis</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, sys.o(i.millis))
<BR><BR>[Calls]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2Cdev::readWords(unsigned char, unsigned char, unsigned char, unsigned short*, unsigned short)
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2Cdev::readBytes(unsigned char, unsigned char, unsigned char, unsigned char*, unsigned short)
</UL>

<P><STRONG><a name="[b8]"></a>pinMode</STRONG> (Thumb, 308 bytes, Stack size 32 bytes, sys.o(i.pinMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = pinMode &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USARTClass::begin(unsigned)
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_3_Init()
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_2_Init()
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_1_Init()
</UL>

<P><STRONG><a name="[10a]"></a>realloc</STRONG> (Thumb, 102 bytes, Stack size 32 bytes, mallocr.o(i.realloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = realloc &rArr; malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;internal_alloc
</UL>
<BR>[Called By]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TwoWire::allocateTxBuffer(unsigned)
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TwoWire::allocateRxBuffer(unsigned)
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[5b]"></a>__sti___8_Wire_cpp_4e99b9cf</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, wire.o(i.__sti___8_Wire_cpp_4e99b9cf))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __sti___8_Wire_cpp_4e99b9cf &rArr; TwoWire::TwoWire()
</UL>
<BR>[Calls]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TwoWire::TwoWire()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wire.o(.init_array)
</UL>
<P><STRONG><a name="[125]"></a>i2c_getTiming(i2c_s*, unsigned)</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, twi.o(i._Z13i2c_getTimingP5i2c_sj))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = i2c_getTiming(i2c_s*, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_custom_init
</UL>

<P><STRONG><a name="[5c]"></a>__sti___6_main_c_70058f14</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, main.o(i.__sti___6_main_c_70058f14))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __sti___6_main_c_70058f14
</UL>
<BR>[Calls]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6050::MPU6050(unsigned char)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.init_array)
</UL>
<P><STRONG><a name="[a0]"></a>NVIC_SetPriority(IRQn_Type, unsigned)</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, stm32f1xx_hal_cortex.o(i._Z16NVIC_SetPriority9IRQn_Typej))
<BR><BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SYSTICK_Config
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
</UL>

<P><STRONG><a name="[86]"></a>I2C_ITError(__I2C_HandleTypeDef*)</STRONG> (Thumb, 312 bytes, Stack size 16 bytes, stm32f1xx_hal_i2c.o(i._Z11I2C_ITErrorP19__I2C_HandleTypeDef))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = I2C_ITError(__I2C_HandleTypeDef*) &rArr; HAL_DMA_Abort_IT
</UL>
<BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_AbortCpltCallback
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Abort_IT
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_ListenCpltCallback
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_ErrorCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Slave_STOPF(__I2C_HandleTypeDef*)
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_ER_IRQHandler
</UL>

<P><STRONG><a name="[4d]"></a>I2C_DMAAbort(__DMA_HandleTypeDef*)</STRONG> (Thumb, 126 bytes, Stack size 8 bytes, stm32f1xx_hal_i2c.o(i._Z12I2C_DMAAbortP19__DMA_HandleTypeDef))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = I2C_DMAAbort(__DMA_HandleTypeDef*) &rArr; HAL_I2C_ErrorCallback
</UL>
<BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_AbortCpltCallback
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_ErrorCallback
</UL>
<BR>[Address Reference Count : 2]<UL><LI> stm32f1xx_hal_i2c.o(i._Z11I2C_ITErrorP19__I2C_HandleTypeDef)
<LI> stm32f1xx_hal_i2c.o(i._Z15I2C_Slave_STOPFP19__I2C_HandleTypeDef)
</UL>
<P><STRONG><a name="[85]"></a>I2C_Slave_AF(__I2C_HandleTypeDef*)</STRONG> (Thumb, 126 bytes, Stack size 24 bytes, stm32f1xx_hal_i2c.o(i._Z12I2C_Slave_AFP19__I2C_HandleTypeDef))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = I2C_Slave_AF(__I2C_HandleTypeDef*) &rArr; HAL_I2C_ListenCpltCallback
</UL>
<BR>[Calls]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_SlaveTxCpltCallback
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_ListenCpltCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_ER_IRQHandler
</UL>

<P><STRONG><a name="[88]"></a>I2C_Master_SB(__I2C_HandleTypeDef*)</STRONG> (Thumb, 142 bytes, Stack size 0 bytes, stm32f1xx_hal_i2c.o(i._Z13I2C_Master_SBP19__I2C_HandleTypeDef))
<BR><BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_EV_IRQHandler
</UL>

<P><STRONG><a name="[89]"></a>I2C_Master_ADDR(__I2C_HandleTypeDef*)</STRONG> (Thumb, 340 bytes, Stack size 20 bytes, stm32f1xx_hal_i2c.o(i._Z15I2C_Master_ADDRP19__I2C_HandleTypeDef))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = I2C_Master_ADDR(__I2C_HandleTypeDef*)
</UL>
<BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_EV_IRQHandler
</UL>

<P><STRONG><a name="[8e]"></a>I2C_Slave_STOPF(__I2C_HandleTypeDef*)</STRONG> (Thumb, 338 bytes, Stack size 24 bytes, stm32f1xx_hal_i2c.o(i._Z15I2C_Slave_STOPFP19__I2C_HandleTypeDef))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = I2C_Slave_STOPF(__I2C_HandleTypeDef*) &rArr; I2C_ITError(__I2C_HandleTypeDef*) &rArr; HAL_DMA_Abort_IT
</UL>
<BR>[Calls]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_GetState
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Abort_IT
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_ITError(__I2C_HandleTypeDef*)
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_SlaveRxCpltCallback
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_ListenCpltCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_EV_IRQHandler
</UL>

<P><STRONG><a name="[8d]"></a>I2C_MasterReceive_BTF(__I2C_HandleTypeDef*)</STRONG> (Thumb, 210 bytes, Stack size 8 bytes, stm32f1xx_hal_i2c.o(i._Z21I2C_MasterReceive_BTFP19__I2C_HandleTypeDef))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = I2C_MasterReceive_BTF(__I2C_HandleTypeDef*)
</UL>
<BR>[Calls]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_MemRxCpltCallback
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_MasterRxCpltCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_EV_IRQHandler
</UL>

<P><STRONG><a name="[8c]"></a>I2C_MasterReceive_RXNE(__I2C_HandleTypeDef*)</STRONG> (Thumb, 146 bytes, Stack size 8 bytes, stm32f1xx_hal_i2c.o(i._Z22I2C_MasterReceive_RXNEP19__I2C_HandleTypeDef))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = I2C_MasterReceive_RXNE(__I2C_HandleTypeDef*)
</UL>
<BR>[Calls]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_MemRxCpltCallback
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_MasterRxCpltCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_EV_IRQHandler
</UL>

<P><STRONG><a name="[8b]"></a>I2C_MasterTransmit_BTF(__I2C_HandleTypeDef*)</STRONG> (Thumb, 130 bytes, Stack size 8 bytes, stm32f1xx_hal_i2c.o(i._Z22I2C_MasterTransmit_BTFP19__I2C_HandleTypeDef))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = I2C_MasterTransmit_BTF(__I2C_HandleTypeDef*)
</UL>
<BR>[Calls]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_MemTxCpltCallback
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_MasterTxCpltCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_EV_IRQHandler
</UL>

<P><STRONG><a name="[8a]"></a>I2C_MasterTransmit_TXE(__I2C_HandleTypeDef*)</STRONG> (Thumb, 260 bytes, Stack size 8 bytes, stm32f1xx_hal_i2c.o(i._Z22I2C_MasterTransmit_TXEP19__I2C_HandleTypeDef))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = I2C_MasterTransmit_TXE(__I2C_HandleTypeDef*)
</UL>
<BR>[Calls]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_MemTxCpltCallback
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_MasterTxCpltCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_EV_IRQHandler
</UL>

<P><STRONG><a name="[98]"></a>I2C_WaitOnFlagUntilTimeout(__I2C_HandleTypeDef*, unsigned, FlagStatus, unsigned, unsigned)</STRONG> (Thumb, 104 bytes, Stack size 32 bytes, stm32f1xx_hal_i2c.o(i._Z26I2C_WaitOnFlagUntilTimeoutP19__I2C_HandleTypeDefj10FlagStatusjj))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = I2C_WaitOnFlagUntilTimeout(__I2C_HandleTypeDef*, unsigned, FlagStatus, unsigned, unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_IsDeviceReady
</UL>

<P><STRONG><a name="[51]"></a>SPI_1_Init()</STRONG> (Thumb, 80 bytes, Stack size 8 bytes, sys.o(i._Z10SPI_1_Initv))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = SPI_1_Init() &rArr; pinMode &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pinMode
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sys.o(i.__sti___5_sys_c_pinMode)
</UL>
<P><STRONG><a name="[52]"></a>SPI_2_Init()</STRONG> (Thumb, 80 bytes, Stack size 8 bytes, sys.o(i._Z10SPI_2_Initv))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = SPI_2_Init() &rArr; pinMode &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pinMode
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sys.o(i.__sti___5_sys_c_pinMode)
</UL>
<P><STRONG><a name="[53]"></a>SPI_3_Init()</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, sys.o(i._Z10SPI_3_Initv))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = SPI_3_Init() &rArr; pinMode &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pinMode
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sys.o(i.__sti___5_sys_c_pinMode)
</UL>
<P><STRONG><a name="[5d]"></a>__sti___5_sys_c_pinMode</STRONG> (Thumb, 200 bytes, Stack size 16 bytes, sys.o(i.__sti___5_sys_c_pinMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = __sti___5_sys_c_pinMode &rArr; USARTClass::USARTClass(USART_TypeDef*, IRQn_Type, unsigned, RingBuffer*)
</UL>
<BR>[Calls]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USARTClass::USARTClass(USART_TypeDef*, IRQn_Type, unsigned, RingBuffer*)
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RingBuffer::RingBuffer()
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIClass::SPIClass(SPI_TypeDef*, void(*)())
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sys.o(.init_array)
</UL>
<P><STRONG><a name="[d4]"></a>USART_INT_ClearAllFlags(USART_TypeDef*, IRQn_Type)</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, usartclass.o(i._Z23USART_INT_ClearAllFlagsP13USART_TypeDef9IRQn_Type))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USART_INT_ClearAllFlags(USART_TypeDef*, IRQn_Type)
</UL>
<BR>[Calls]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_ClearPendingIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USARTClass::IrqHandler()
</UL>

<P><STRONG><a name="[a9]"></a>UART_SetConfig(__UART_HandleTypeDef*)</STRONG> (Thumb, 178 bytes, Stack size 24 bytes, stm32f1xx_hal_uart.o(i._Z14UART_SetConfigP20__UART_HandleTypeDef))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = UART_SetConfig(__UART_HandleTypeDef*)
</UL>
<BR>[Calls]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK2Freq
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK1Freq
</UL>
<BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
</UL>

<P><STRONG><a name="[11d]"></a>_fp_digits</STRONG> (Thumb, 334 bytes, Stack size 56 bytes, printfa.o(i._fp_digits), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
</UL>
<BR>[Called By]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[116]"></a>_printf_core</STRONG> (Thumb, 1744 bytes, Stack size 136 bytes, printfa.o(i._printf_core), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>
<BR>[Called By]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sprintf
</UL>

<P><STRONG><a name="[120]"></a>_printf_post_padding</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, printfa.o(i._printf_post_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[11f]"></a>_printf_pre_padding</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, printfa.o(i._printf_pre_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[50]"></a>_sputc</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, printfa.o(i._sputc))
<BR><BR>[Called By]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> printfa.o(i.__0sprintf)
</UL>
<P><STRONG><a name="[119]"></a>internal_alloc</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, mallocr.o(i.internal_alloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;realloc
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>
<P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
