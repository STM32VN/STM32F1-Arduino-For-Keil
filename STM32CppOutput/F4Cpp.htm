<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [..\..\STM32CppOutput\F4Cpp.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image ..\..\STM32CppOutput\F4Cpp.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5050106: Last Updated: Sun Aug 14 18:11:16 2022
<BR><P>
<H3>Maximum Stack Usage =        160 bytes + Unknown(Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
main &rArr; USARTClass::begin(unsigned) &rArr; pinMode &rArr; HAL_GPIO_Init
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[b]">SVC_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[b]">SVC_Handler</a><BR>
 <LI><a href="#[d]">PendSV_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[d]">PendSV_Handler</a><BR>
 <LI><a href="#[21]">ADC1_2_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[21]">ADC1_2_IRQHandler</a><BR>
 <LI><a href="#[ac]">wtoa(unsigned short, char*)</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[ac]">wtoa(unsigned short, char*)</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[21]">ADC1_2_IRQHandler</a> from startup_stm32f101xg.o(.text) referenced from startup_stm32f101xg.o(RESET)
 <LI><a href="#[9]">BusFault_Handler</a> from stm32f1xx_it.o(i.BusFault_Handler) referenced from startup_stm32f101xg.o(RESET)
 <LI><a href="#[1a]">DMA1_Channel1_IRQHandler</a> from sys.o(i.DMA1_Channel1_IRQHandler) referenced from startup_stm32f101xg.o(RESET)
 <LI><a href="#[1b]">DMA1_Channel2_IRQHandler</a> from sys.o(i.DMA1_Channel2_IRQHandler) referenced from startup_stm32f101xg.o(RESET)
 <LI><a href="#[1c]">DMA1_Channel3_IRQHandler</a> from sys.o(i.DMA1_Channel3_IRQHandler) referenced from startup_stm32f101xg.o(RESET)
 <LI><a href="#[1d]">DMA1_Channel4_IRQHandler</a> from sys.o(i.DMA1_Channel4_IRQHandler) referenced from startup_stm32f101xg.o(RESET)
 <LI><a href="#[1e]">DMA1_Channel5_IRQHandler</a> from sys.o(i.DMA1_Channel5_IRQHandler) referenced from startup_stm32f101xg.o(RESET)
 <LI><a href="#[1f]">DMA1_Channel6_IRQHandler</a> from sys.o(i.DMA1_Channel6_IRQHandler) referenced from startup_stm32f101xg.o(RESET)
 <LI><a href="#[20]">DMA1_Channel7_IRQHandler</a> from sys.o(i.DMA1_Channel7_IRQHandler) referenced from startup_stm32f101xg.o(RESET)
 <LI><a href="#[3e]">DMA2_Channel1_IRQHandler</a> from sys.o(i.DMA2_Channel1_IRQHandler) referenced from startup_stm32f101xg.o(RESET)
 <LI><a href="#[3f]">DMA2_Channel2_IRQHandler</a> from sys.o(i.DMA2_Channel2_IRQHandler) referenced from startup_stm32f101xg.o(RESET)
 <LI><a href="#[40]">DMA2_Channel3_IRQHandler</a> from sys.o(i.DMA2_Channel3_IRQHandler) referenced from startup_stm32f101xg.o(RESET)
 <LI><a href="#[41]">DMA2_Channel4_5_IRQHandler</a> from sys.o(i.DMA2_Channel4_5_IRQHandler) referenced from startup_stm32f101xg.o(RESET)
 <LI><a href="#[c]">DebugMon_Handler</a> from stm32f1xx_it.o(i.DebugMon_Handler) referenced from startup_stm32f101xg.o(RESET)
 <LI><a href="#[15]">EXTI0_IRQHandler</a> from sys.o(i.EXTI0_IRQHandler) referenced from startup_stm32f101xg.o(RESET)
 <LI><a href="#[32]">EXTI15_10_IRQHandler</a> from sys.o(i.EXTI15_10_IRQHandler) referenced from startup_stm32f101xg.o(RESET)
 <LI><a href="#[16]">EXTI1_IRQHandler</a> from sys.o(i.EXTI1_IRQHandler) referenced from startup_stm32f101xg.o(RESET)
 <LI><a href="#[17]">EXTI2_IRQHandler</a> from sys.o(i.EXTI2_IRQHandler) referenced from startup_stm32f101xg.o(RESET)
 <LI><a href="#[18]">EXTI3_IRQHandler</a> from sys.o(i.EXTI3_IRQHandler) referenced from startup_stm32f101xg.o(RESET)
 <LI><a href="#[19]">EXTI4_IRQHandler</a> from sys.o(i.EXTI4_IRQHandler) referenced from startup_stm32f101xg.o(RESET)
 <LI><a href="#[22]">EXTI9_5_IRQHandler</a> from sys.o(i.EXTI9_5_IRQHandler) referenced from startup_stm32f101xg.o(RESET)
 <LI><a href="#[13]">FLASH_IRQHandler</a> from startup_stm32f101xg.o(.text) referenced from startup_stm32f101xg.o(RESET)
 <LI><a href="#[37]">FSMC_IRQHandler</a> from startup_stm32f101xg.o(.text) referenced from startup_stm32f101xg.o(RESET)
 <LI><a href="#[7]">HardFault_Handler</a> from stm32f1xx_it.o(i.HardFault_Handler) referenced from startup_stm32f101xg.o(RESET)
 <LI><a href="#[2a]">I2C1_ER_IRQHandler</a> from startup_stm32f101xg.o(.text) referenced from startup_stm32f101xg.o(RESET)
 <LI><a href="#[29]">I2C1_EV_IRQHandler</a> from startup_stm32f101xg.o(.text) referenced from startup_stm32f101xg.o(RESET)
 <LI><a href="#[2c]">I2C2_ER_IRQHandler</a> from startup_stm32f101xg.o(.text) referenced from startup_stm32f101xg.o(RESET)
 <LI><a href="#[2b]">I2C2_EV_IRQHandler</a> from startup_stm32f101xg.o(.text) referenced from startup_stm32f101xg.o(RESET)
 <LI><a href="#[8]">MemManage_Handler</a> from stm32f1xx_it.o(i.MemManage_Handler) referenced from startup_stm32f101xg.o(RESET)
 <LI><a href="#[6]">NMI_Handler</a> from stm32f1xx_it.o(i.NMI_Handler) referenced from startup_stm32f101xg.o(RESET)
 <LI><a href="#[10]">PVD_IRQHandler</a> from startup_stm32f101xg.o(.text) referenced from startup_stm32f101xg.o(RESET)
 <LI><a href="#[d]">PendSV_Handler</a> from startup_stm32f101xg.o(.text) referenced from startup_stm32f101xg.o(RESET)
 <LI><a href="#[14]">RCC_IRQHandler</a> from startup_stm32f101xg.o(.text) referenced from startup_stm32f101xg.o(RESET)
 <LI><a href="#[33]">RTC_Alarm_IRQHandler</a> from startup_stm32f101xg.o(.text) referenced from startup_stm32f101xg.o(RESET)
 <LI><a href="#[12]">RTC_IRQHandler</a> from startup_stm32f101xg.o(.text) referenced from startup_stm32f101xg.o(RESET)
 <LI><a href="#[5]">Reset_Handler</a> from startup_stm32f101xg.o(.text) referenced from startup_stm32f101xg.o(RESET)
 <LI><a href="#[2d]">SPI1_IRQHandler</a> from startup_stm32f101xg.o(.text) referenced from startup_stm32f101xg.o(RESET)
 <LI><a href="#[2e]">SPI2_IRQHandler</a> from startup_stm32f101xg.o(.text) referenced from startup_stm32f101xg.o(RESET)
 <LI><a href="#[39]">SPI3_IRQHandler</a> from startup_stm32f101xg.o(.text) referenced from startup_stm32f101xg.o(RESET)
 <LI><a href="#[b]">SVC_Handler</a> from startup_stm32f101xg.o(.text) referenced from startup_stm32f101xg.o(RESET)
 <LI><a href="#[e]">SysTick_Handler</a> from stm32f1xx_it.o(i.SysTick_Handler) referenced from startup_stm32f101xg.o(RESET)
 <LI><a href="#[43]">SystemInit</a> from system_stm32f1xx.o(i.SystemInit) referenced from startup_stm32f101xg.o(.text)
 <LI><a href="#[11]">TAMPER_IRQHandler</a> from startup_stm32f101xg.o(.text) referenced from startup_stm32f101xg.o(RESET)
 <LI><a href="#[24]">TIM10_IRQHandler</a> from startup_stm32f101xg.o(.text) referenced from startup_stm32f101xg.o(RESET)
 <LI><a href="#[25]">TIM11_IRQHandler</a> from startup_stm32f101xg.o(.text) referenced from startup_stm32f101xg.o(RESET)
 <LI><a href="#[34]">TIM12_IRQHandler</a> from startup_stm32f101xg.o(.text) referenced from startup_stm32f101xg.o(RESET)
 <LI><a href="#[35]">TIM13_IRQHandler</a> from startup_stm32f101xg.o(.text) referenced from startup_stm32f101xg.o(RESET)
 <LI><a href="#[36]">TIM14_IRQHandler</a> from startup_stm32f101xg.o(.text) referenced from startup_stm32f101xg.o(RESET)
 <LI><a href="#[26]">TIM2_IRQHandler</a> from startup_stm32f101xg.o(.text) referenced from startup_stm32f101xg.o(RESET)
 <LI><a href="#[27]">TIM3_IRQHandler</a> from startup_stm32f101xg.o(.text) referenced from startup_stm32f101xg.o(RESET)
 <LI><a href="#[28]">TIM4_IRQHandler</a> from startup_stm32f101xg.o(.text) referenced from startup_stm32f101xg.o(RESET)
 <LI><a href="#[38]">TIM5_IRQHandler</a> from startup_stm32f101xg.o(.text) referenced from startup_stm32f101xg.o(RESET)
 <LI><a href="#[3c]">TIM6_IRQHandler</a> from startup_stm32f101xg.o(.text) referenced from startup_stm32f101xg.o(RESET)
 <LI><a href="#[3d]">TIM7_IRQHandler</a> from startup_stm32f101xg.o(.text) referenced from startup_stm32f101xg.o(RESET)
 <LI><a href="#[23]">TIM9_IRQHandler</a> from startup_stm32f101xg.o(.text) referenced from startup_stm32f101xg.o(RESET)
 <LI><a href="#[3a]">UART4_IRQHandler</a> from sys.o(i.UART4_IRQHandler) referenced from startup_stm32f101xg.o(RESET)
 <LI><a href="#[3b]">UART5_IRQHandler</a> from sys.o(i.UART5_IRQHandler) referenced from startup_stm32f101xg.o(RESET)
 <LI><a href="#[2f]">USART1_IRQHandler</a> from sys.o(i.USART1_IRQHandler) referenced from startup_stm32f101xg.o(RESET)
 <LI><a href="#[30]">USART2_IRQHandler</a> from sys.o(i.USART2_IRQHandler) referenced from startup_stm32f101xg.o(RESET)
 <LI><a href="#[31]">USART3_IRQHandler</a> from sys.o(i.USART3_IRQHandler) referenced from startup_stm32f101xg.o(RESET)
 <LI><a href="#[a]">UsageFault_Handler</a> from stm32f1xx_it.o(i.UsageFault_Handler) referenced from startup_stm32f101xg.o(RESET)
 <LI><a href="#[f]">WWDG_IRQHandler</a> from startup_stm32f101xg.o(.text) referenced from startup_stm32f101xg.o(RESET)
 <LI><a href="#[46]">SPI_1_Init()</a> from sys.o(i._Z10SPI_1_Initv) referenced from sys.o(i.__sti___5_sys_c_pinMode)
 <LI><a href="#[47]">SPI_2_Init()</a> from sys.o(i._Z10SPI_2_Initv) referenced from sys.o(i.__sti___5_sys_c_pinMode)
 <LI><a href="#[48]">SPI_3_Init()</a> from sys.o(i._Z10SPI_3_Initv) referenced from sys.o(i.__sti___5_sys_c_pinMode)
 <LI><a href="#[49]">USARTClass::write(unsigned char)</a> from usartclass.o(i._ZN10USARTClass5writeEh) referenced from usartclass.o(.constdata__ZTV10USARTClass)
 <LI><a href="#[4b]">BufferFiller::write(unsigned char)</a> from tcpip.o(i._ZN12BufferFiller5writeEh) referenced from tcpip.o(.constdata__ZTV12BufferFiller)
 <LI><a href="#[4a]">Print::write(const unsigned char*, unsigned)</a> from print.o(i._ZN5Print5writeEPKhj) referenced from usartclass.o(.constdata__ZTV10USARTClass)
 <LI><a href="#[4a]">Print::write(const unsigned char*, unsigned)</a> from print.o(i._ZN5Print5writeEPKhj) referenced from tcpip.o(.constdata__ZTV12BufferFiller)
 <LI><a href="#[4a]">Print::write(const unsigned char*, unsigned)</a> from print.o(i._ZN5Print5writeEPKhj) referenced from print.o(.constdata__ZTV5Print)
 <LI><a href="#[4]">String::StringIfHelper() const</a> from tm1637display.o(i._ZNK6String14StringIfHelperEv) referenced 12 times from dhcp.o(.data)
 <LI><a href="#[4c]">__cxa_pure_virtual</a> from pure_virt.o(i.__cxa_pure_virtual) referenced from print.o(.constdata__ZTV5Print)
 <LI><a href="#[44]">__main</a> from entry.o(.ARM.Collect$$$$00000000) referenced from startup_stm32f101xg.o(.text)
 <LI><a href="#[4e]">__sti___5_sys_c_pinMode</a> from sys.o(i.__sti___5_sys_c_pinMode) referenced from sys.o(.init_array)
 <LI><a href="#[4d]">__sti___6_main_c_bfill</a> from main.o(i.__sti___6_main_c_bfill) referenced from main.o(.init_array)
 <LI><a href="#[45]">fputc</a> from main.o(i.fputc) referenced from printfa.o(i.__0printf)
 <LI><a href="#[42]">main</a> from main.o(i.main) referenced from entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[44]"></a>__main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry.o(.ARM.Collect$$$$00000000))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f101xg.o(.text)
</UL>
<P><STRONG><a name="[ec]"></a>_main_stk</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry2.o(.ARM.Collect$$$$00000001))

<P><STRONG><a name="[50]"></a>_main_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[62]"></a>__main_after_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[ed]"></a>_main_clock</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry7b.o(.ARM.Collect$$$$00000008))

<P><STRONG><a name="[52]"></a>_main_cpp_init$empty</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry8a.o(.ARM.Collect$$$$00000009))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = _main_cpp_init$empty &rArr; __cpp_initialize__aeabi_
</UL>
<BR>[Calls]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cpp_initialize__aeabi_
</UL>

<P><STRONG><a name="[ee]"></a>_main_cpp_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry8b.o(.ARM.Collect$$$$0000000A))

<P><STRONG><a name="[ef]"></a>_main_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry9a.o(.ARM.Collect$$$$0000000B))

<P><STRONG><a name="[f0]"></a>__rt_final_cpp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry10a.o(.ARM.Collect$$$$0000000D))

<P><STRONG><a name="[f1]"></a>__rt_final_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry11a.o(.ARM.Collect$$$$0000000F))

<P><STRONG><a name="[5]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_stm32f101xg.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f101xg.o(RESET)
</UL>
<P><STRONG><a name="[b]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f101xg.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f101xg.o(RESET)
</UL>
<P><STRONG><a name="[d]"></a>PendSV_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f101xg.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f101xg.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>ADC1_2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f101xg.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_2_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_2_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f101xg.o(RESET)
</UL>
<P><STRONG><a name="[13]"></a>FLASH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f101xg.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f101xg.o(RESET)
</UL>
<P><STRONG><a name="[37]"></a>FSMC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f101xg.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f101xg.o(RESET)
</UL>
<P><STRONG><a name="[2a]"></a>I2C1_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f101xg.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f101xg.o(RESET)
</UL>
<P><STRONG><a name="[29]"></a>I2C1_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f101xg.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f101xg.o(RESET)
</UL>
<P><STRONG><a name="[2c]"></a>I2C2_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f101xg.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f101xg.o(RESET)
</UL>
<P><STRONG><a name="[2b]"></a>I2C2_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f101xg.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f101xg.o(RESET)
</UL>
<P><STRONG><a name="[10]"></a>PVD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f101xg.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f101xg.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>RCC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f101xg.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f101xg.o(RESET)
</UL>
<P><STRONG><a name="[33]"></a>RTC_Alarm_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f101xg.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f101xg.o(RESET)
</UL>
<P><STRONG><a name="[12]"></a>RTC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f101xg.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f101xg.o(RESET)
</UL>
<P><STRONG><a name="[2d]"></a>SPI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f101xg.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f101xg.o(RESET)
</UL>
<P><STRONG><a name="[2e]"></a>SPI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f101xg.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f101xg.o(RESET)
</UL>
<P><STRONG><a name="[39]"></a>SPI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f101xg.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f101xg.o(RESET)
</UL>
<P><STRONG><a name="[11]"></a>TAMPER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f101xg.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f101xg.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>TIM10_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f101xg.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f101xg.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>TIM11_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f101xg.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f101xg.o(RESET)
</UL>
<P><STRONG><a name="[34]"></a>TIM12_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f101xg.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f101xg.o(RESET)
</UL>
<P><STRONG><a name="[35]"></a>TIM13_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f101xg.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f101xg.o(RESET)
</UL>
<P><STRONG><a name="[36]"></a>TIM14_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f101xg.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f101xg.o(RESET)
</UL>
<P><STRONG><a name="[26]"></a>TIM2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f101xg.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f101xg.o(RESET)
</UL>
<P><STRONG><a name="[27]"></a>TIM3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f101xg.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f101xg.o(RESET)
</UL>
<P><STRONG><a name="[28]"></a>TIM4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f101xg.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f101xg.o(RESET)
</UL>
<P><STRONG><a name="[38]"></a>TIM5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f101xg.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f101xg.o(RESET)
</UL>
<P><STRONG><a name="[3c]"></a>TIM6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f101xg.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f101xg.o(RESET)
</UL>
<P><STRONG><a name="[3d]"></a>TIM7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f101xg.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f101xg.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>TIM9_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f101xg.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f101xg.o(RESET)
</UL>
<P><STRONG><a name="[f]"></a>WWDG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f101xg.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f101xg.o(RESET)
</UL>
<P><STRONG><a name="[54]"></a>__aeabi_memset</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset$wrapper
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>

<P><STRONG><a name="[f2]"></a>__aeabi_memset4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[f3]"></a>__aeabi_memset8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[53]"></a>__aeabi_memclr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_dhcp_message()
</UL>

<P><STRONG><a name="[79]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RingBuffer::RingBuffer()
</UL>

<P><STRONG><a name="[f4]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[55]"></a>_memset$wrapper</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[bc]"></a>strlen</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, strlen.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BufferFiller::emit_p(const char*, ...)
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print::write(const char*)
</UL>

<P><STRONG><a name="[99]"></a>memcmp</STRONG> (Thumb, 26 bytes, Stack size 12 bytes, memcmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_type_is_arp_and_my_ip(unsigned short)
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_type_is_ip_and_my_ip(unsigned short)
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_ip_message_is_from(const unsigned char*)
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;client_store_mac(unsigned char*, unsigned char*)
</UL>

<P><STRONG><a name="[bb]"></a>strcpy</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, strcpy.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BufferFiller::emit_p(const char*, ...)
</UL>

<P><STRONG><a name="[4f]"></a>__cpp_initialize__aeabi_</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, cpp_init.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __cpp_initialize__aeabi_
</UL>
<BR>[Called By]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_cpp_init$empty
</UL>

<P><STRONG><a name="[56]"></a>__aeabi_dadd</STRONG> (Thumb, 322 bytes, Stack size 48 bytes, dadd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_lasr
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
</UL>

<P><STRONG><a name="[5b]"></a>__aeabi_dsub</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dadd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[5c]"></a>__aeabi_drsub</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dadd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[5d]"></a>__aeabi_dmul</STRONG> (Thumb, 228 bytes, Stack size 48 bytes, dmul.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[5e]"></a>__aeabi_ddiv</STRONG> (Thumb, 222 bytes, Stack size 32 bytes, ddiv.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[e3]"></a>__aeabi_cdrcmple</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, cdrcmple.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[f5]"></a>__aeabi_uidiv</STRONG> (Thumb, 0 bytes, Stack size 12 bytes, uidiv.o(.text), UNUSED)

<P><STRONG><a name="[e6]"></a>__aeabi_uidivmod</STRONG> (Thumb, 44 bytes, Stack size 12 bytes, uidiv.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[5f]"></a>__aeabi_uldivmod</STRONG> (Thumb, 98 bytes, Stack size 40 bytes, uldiv.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[57]"></a>__aeabi_llsl</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, llshl.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>

<P><STRONG><a name="[f6]"></a>_ll_shift_l</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llshl.o(.text), UNUSED)

<P><STRONG><a name="[60]"></a>__aeabi_llsr</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, llushr.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>

<P><STRONG><a name="[f7]"></a>_ll_ushift_r</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llushr.o(.text), UNUSED)

<P><STRONG><a name="[58]"></a>__aeabi_lasr</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, llsshr.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[f8]"></a>_ll_sshift_r</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llsshr.o(.text), UNUSED)

<P><STRONG><a name="[f9]"></a>__I$use$fp</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, iusefp.o(.text), UNUSED)

<P><STRONG><a name="[df]"></a>__rt_SIGPVFN</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, cpp_signal.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_pure_virtual
</UL>

<P><STRONG><a name="[5a]"></a>_double_round</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, depilogue.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[59]"></a>_double_epilogue</STRONG> (Thumb, 156 bytes, Stack size 32 bytes, depilogue.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[61]"></a>__aeabi_d2ulz</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, dfixul.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[51]"></a>__scatterload</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, init.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main_after_scatterload
</UL>
<BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_scatterload
</UL>

<P><STRONG><a name="[fa]"></a>__scatterload_rt2</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, init.o(.text), UNUSED)

<P><STRONG><a name="[fb]"></a>__decompress</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __dczerorl2.o(.text), UNUSED)

<P><STRONG><a name="[fc]"></a>__decompress1</STRONG> (Thumb, 86 bytes, Stack size unknown bytes, __dczerorl2.o(.text), UNUSED)

<P><STRONG><a name="[9]"></a>BusFault_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f1xx_it.o(i.BusFault_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f101xg.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>DMA1_Channel1_IRQHandler</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, sys.o(i.DMA1_Channel1_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f101xg.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>DMA1_Channel2_IRQHandler</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, sys.o(i.DMA1_Channel2_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f101xg.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>DMA1_Channel3_IRQHandler</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, sys.o(i.DMA1_Channel3_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f101xg.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>DMA1_Channel4_IRQHandler</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, sys.o(i.DMA1_Channel4_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f101xg.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>DMA1_Channel5_IRQHandler</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, sys.o(i.DMA1_Channel5_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f101xg.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>DMA1_Channel6_IRQHandler</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, sys.o(i.DMA1_Channel6_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f101xg.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>DMA1_Channel7_IRQHandler</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, sys.o(i.DMA1_Channel7_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f101xg.o(RESET)
</UL>
<P><STRONG><a name="[3e]"></a>DMA2_Channel1_IRQHandler</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, sys.o(i.DMA2_Channel1_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f101xg.o(RESET)
</UL>
<P><STRONG><a name="[3f]"></a>DMA2_Channel2_IRQHandler</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, sys.o(i.DMA2_Channel2_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f101xg.o(RESET)
</UL>
<P><STRONG><a name="[40]"></a>DMA2_Channel3_IRQHandler</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, sys.o(i.DMA2_Channel3_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f101xg.o(RESET)
</UL>
<P><STRONG><a name="[41]"></a>DMA2_Channel4_5_IRQHandler</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, sys.o(i.DMA2_Channel4_5_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f101xg.o(RESET)
</UL>
<P><STRONG><a name="[c]"></a>DebugMon_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f1xx_it.o(i.DebugMon_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f101xg.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>EXTI0_IRQHandler</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, sys.o(i.EXTI0_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = EXTI0_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_EXTI_Callback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f101xg.o(RESET)
</UL>
<P><STRONG><a name="[32]"></a>EXTI15_10_IRQHandler</STRONG> (Thumb, 150 bytes, Stack size 16 bytes, sys.o(i.EXTI15_10_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = EXTI15_10_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_EXTI_Callback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f101xg.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>EXTI1_IRQHandler</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, sys.o(i.EXTI1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = EXTI1_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_EXTI_Callback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f101xg.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>EXTI2_IRQHandler</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, sys.o(i.EXTI2_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = EXTI2_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_EXTI_Callback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f101xg.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>EXTI3_IRQHandler</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, sys.o(i.EXTI3_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = EXTI3_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_EXTI_Callback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f101xg.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>EXTI4_IRQHandler</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, sys.o(i.EXTI4_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = EXTI4_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_EXTI_Callback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f101xg.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>EXTI9_5_IRQHandler</STRONG> (Thumb, 122 bytes, Stack size 16 bytes, sys.o(i.EXTI9_5_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = EXTI9_5_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_EXTI_Callback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f101xg.o(RESET)
</UL>
<P><STRONG><a name="[7a]"></a>Error_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, main.o(i.Error_Handler))
<BR><BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIClass::setBitOrder(unsigned short)
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIClass::init()
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIClass::setClockDivider(unsigned char)
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIClass::setdataSize(unsigned short)
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIClass::setDataMode(unsigned char)
</UL>

<P><STRONG><a name="[63]"></a>HAL_GPIO_EXTI_Callback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f1xx_hal_gpio.o(i.HAL_GPIO_EXTI_Callback))
<BR><BR>[Called By]<UL><LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI9_5_IRQHandler
<LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI4_IRQHandler
<LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI3_IRQHandler
<LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI2_IRQHandler
<LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI1_IRQHandler
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI15_10_IRQHandler
<LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI0_IRQHandler
</UL>

<P><STRONG><a name="[eb]"></a>HAL_GPIO_Init</STRONG> (Thumb, 462 bytes, Stack size 40 bytes, stm32f1xx_hal_gpio.o(i.HAL_GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pinMode
</UL>

<P><STRONG><a name="[6c]"></a>HAL_GetTick</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f1xx_hal.o(i.HAL_GetTick))
<BR><BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;millis
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;micros
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_PeriphCLKConfig
</UL>

<P><STRONG><a name="[77]"></a>HAL_IncTick</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f1xx_hal.o(i.HAL_IncTick))
<BR><BR>[Called By]<UL><LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[64]"></a>HAL_Init</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, stm32f1xx_hal.o(i.HAL_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = HAL_Init &rArr; HAL_InitTick &rArr; HAL_NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriorityGrouping
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[66]"></a>HAL_InitTick</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, stm32f1xx_hal.o(i.HAL_InitTick))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = HAL_InitTick &rArr; HAL_NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SYSTICK_Config
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
</UL>

<P><STRONG><a name="[67]"></a>HAL_MspInit</STRONG> (Thumb, 92 bytes, Stack size 8 bytes, stm32f1xx_hal_msp.o(i.HAL_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_MspInit &rArr; HAL_NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriorityGrouping
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
</UL>

<P><STRONG><a name="[a4]"></a>HAL_NVIC_ClearPendingIRQ</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f1xx_hal_cortex.o(i.HAL_NVIC_ClearPendingIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USARTClass::begin(unsigned)
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_INT_ClearAllFlags(USART_TypeDef*, IRQn_Type)
</UL>

<P><STRONG><a name="[b9]"></a>HAL_NVIC_DisableIRQ</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f1xx_hal_cortex.o(i.HAL_NVIC_DisableIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USARTClass::begin(unsigned)
</UL>

<P><STRONG><a name="[ba]"></a>HAL_NVIC_EnableIRQ</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f1xx_hal_cortex.o(i.HAL_NVIC_EnableIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USARTClass::begin(unsigned)
</UL>

<P><STRONG><a name="[69]"></a>HAL_NVIC_SetPriority</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, stm32f1xx_hal_cortex.o(i.HAL_NVIC_SetPriority))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_SetPriority(IRQn_Type, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USARTClass::begin(unsigned)
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MspInit
</UL>

<P><STRONG><a name="[65]"></a>HAL_NVIC_SetPriorityGrouping</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f1xx_hal_cortex.o(i.HAL_NVIC_SetPriorityGrouping))
<BR><BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MspInit
</UL>

<P><STRONG><a name="[6b]"></a>HAL_RCCEx_PeriphCLKConfig</STRONG> (Thumb, 224 bytes, Stack size 32 bytes, stm32f1xx_hal_rcc_ex.o(i.HAL_RCCEx_PeriphCLKConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = HAL_RCCEx_PeriphCLKConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[6d]"></a>HAL_RCC_ClockConfig</STRONG> (Thumb, 280 bytes, Stack size 32 bytes, stm32f1xx_hal_rcc.o(i.HAL_RCC_ClockConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = HAL_RCC_ClockConfig &rArr; HAL_InitTick &rArr; HAL_NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetSysClockFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[97]"></a>HAL_RCC_GetPCLK1Freq</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f1xx_hal_rcc.o(i.HAL_RCC_GetPCLK1Freq))
<BR><BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig(__UART_HandleTypeDef*)
</UL>

<P><STRONG><a name="[96]"></a>HAL_RCC_GetPCLK2Freq</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f1xx_hal_rcc.o(i.HAL_RCC_GetPCLK2Freq))
<BR><BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig(__UART_HandleTypeDef*)
</UL>

<P><STRONG><a name="[6e]"></a>HAL_RCC_GetSysClockFreq</STRONG> (Thumb, 76 bytes, Stack size 20 bytes, stm32f1xx_hal_rcc.o(i.HAL_RCC_GetSysClockFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = HAL_RCC_GetSysClockFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
</UL>

<P><STRONG><a name="[6f]"></a>HAL_RCC_OscConfig</STRONG> (Thumb, 778 bytes, Stack size 40 bytes, stm32f1xx_hal_rcc.o(i.HAL_RCC_OscConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = HAL_RCC_OscConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[70]"></a>HAL_SPI_Init</STRONG> (Thumb, 124 bytes, Stack size 16 bytes, stm32f1xx_hal_spi.o(i.HAL_SPI_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_SPI_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIClass::setBitOrder(unsigned short)
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIClass::init()
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIClass::setClockDivider(unsigned char)
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIClass::setdataSize(unsigned short)
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIClass::setDataMode(unsigned char)
</UL>

<P><STRONG><a name="[71]"></a>HAL_SPI_MspInit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f1xx_hal_spi.o(i.HAL_SPI_MspInit))
<BR><BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_Init
</UL>

<P><STRONG><a name="[73]"></a>HAL_SYSTICK_Callback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, main.o(i.HAL_SYSTICK_Callback))
<BR><BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SYSTICK_IRQHandler
</UL>

<P><STRONG><a name="[68]"></a>HAL_SYSTICK_Config</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, stm32f1xx_hal_cortex.o(i.HAL_SYSTICK_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_SYSTICK_Config
</UL>
<BR>[Calls]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_SetPriority(IRQn_Type, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
</UL>

<P><STRONG><a name="[72]"></a>HAL_SYSTICK_IRQHandler</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, stm32f1xx_hal_cortex.o(i.HAL_SYSTICK_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_SYSTICK_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SYSTICK_Callback
</UL>
<BR>[Called By]<UL><LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[74]"></a>HAL_UART_Init</STRONG> (Thumb, 98 bytes, Stack size 16 bytes, stm32f1xx_hal_uart.o(i.HAL_UART_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = HAL_UART_Init &rArr; UART_SetConfig(__UART_HandleTypeDef*)
</UL>
<BR>[Calls]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig(__UART_HandleTypeDef*)
</UL>
<BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USARTClass::begin(unsigned)
</UL>

<P><STRONG><a name="[75]"></a>HAL_UART_MspInit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f1xx_hal_uart.o(i.HAL_UART_MspInit))
<BR><BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
</UL>

<P><STRONG><a name="[7]"></a>HardFault_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f1xx_it.o(i.HardFault_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f101xg.o(RESET)
</UL>
<P><STRONG><a name="[8]"></a>MemManage_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f1xx_it.o(i.MemManage_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f101xg.o(RESET)
</UL>
<P><STRONG><a name="[6]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f1xx_it.o(i.NMI_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f101xg.o(RESET)
</UL>
<P><STRONG><a name="[e]"></a>SysTick_Handler</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, stm32f1xx_it.o(i.SysTick_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SysTick_Handler &rArr; HAL_SYSTICK_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SYSTICK_IRQHandler
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_IncTick
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f101xg.o(RESET)
</UL>
<P><STRONG><a name="[78]"></a>SystemClock_Config</STRONG> (Thumb, 138 bytes, Stack size 80 bytes, main.o(i.SystemClock_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = SystemClock_Config &rArr; HAL_RCC_ClockConfig &rArr; HAL_InitTick &rArr; HAL_NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_PeriphCLKConfig
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[43]"></a>SystemInit</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, system_stm32f1xx.o(i.SystemInit))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f101xg.o(.text)
</UL>
<P><STRONG><a name="[3a]"></a>UART4_IRQHandler</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, sys.o(i.UART4_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = UART4_IRQHandler &rArr; USARTClass::IrqHandler() &rArr; RingBuffer::store_char(unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serialEvent4()
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USARTClass::IrqHandler()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f101xg.o(RESET)
</UL>
<P><STRONG><a name="[3b]"></a>UART5_IRQHandler</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, sys.o(i.UART5_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = UART5_IRQHandler &rArr; USARTClass::IrqHandler() &rArr; RingBuffer::store_char(unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serialEvent5()
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USARTClass::IrqHandler()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f101xg.o(RESET)
</UL>
<P><STRONG><a name="[2f]"></a>USART1_IRQHandler</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, sys.o(i.USART1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = USART1_IRQHandler &rArr; USARTClass::IrqHandler() &rArr; RingBuffer::store_char(unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serialEvent1()
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USARTClass::IrqHandler()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f101xg.o(RESET)
</UL>
<P><STRONG><a name="[30]"></a>USART2_IRQHandler</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, sys.o(i.USART2_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = USART2_IRQHandler &rArr; USARTClass::IrqHandler() &rArr; RingBuffer::store_char(unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serialEvent2()
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USARTClass::IrqHandler()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f101xg.o(RESET)
</UL>
<P><STRONG><a name="[31]"></a>USART3_IRQHandler</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, sys.o(i.USART3_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = USART3_IRQHandler &rArr; USARTClass::IrqHandler() &rArr; RingBuffer::store_char(unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serialEvent3()
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USARTClass::IrqHandler()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f101xg.o(RESET)
</UL>
<P><STRONG><a name="[a]"></a>UsageFault_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f1xx_it.o(i.UsageFault_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f101xg.o(RESET)
</UL>
<P><STRONG><a name="[7e]"></a>serialEvent1()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, sys.o(i._Z12serialEvent1v))
<BR><BR>[Called By]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
</UL>

<P><STRONG><a name="[7f]"></a>serialEvent2()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, sys.o(i._Z12serialEvent2v))
<BR><BR>[Called By]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_IRQHandler
</UL>

<P><STRONG><a name="[80]"></a>serialEvent3()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, sys.o(i._Z12serialEvent3v))
<BR><BR>[Called By]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_IRQHandler
</UL>

<P><STRONG><a name="[7c]"></a>serialEvent4()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, sys.o(i._Z12serialEvent4v))
<BR><BR>[Called By]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART4_IRQHandler
</UL>

<P><STRONG><a name="[7d]"></a>serialEvent5()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, sys.o(i._Z12serialEvent5v))
<BR><BR>[Called By]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART5_IRQHandler
</UL>

<P><STRONG><a name="[b7]"></a>RingBuffer::store_char(unsigned char)</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, ringbuffer.o(i._ZN10RingBuffer10store_charEh))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = RingBuffer::store_char(unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USARTClass::IrqHandler()
</UL>

<P><STRONG><a name="[b6]"></a>RingBuffer::RingBuffer()</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, ringbuffer.o(i._ZN10RingBufferC1Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = RingBuffer::RingBuffer()
</UL>
<BR>[Calls]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___5_sys_c_pinMode
</UL>

<P><STRONG><a name="[fd]"></a>RingBuffer::RingBuffer__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, ringbuffer.o(i._ZN10RingBufferC1Ev), UNUSED)

<P><STRONG><a name="[7b]"></a>USARTClass::IrqHandler()</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, usartclass.o(i._ZN10USARTClass10IrqHandlerEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = USARTClass::IrqHandler() &rArr; RingBuffer::store_char(unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RingBuffer::store_char(unsigned char)
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_INT_ClearAllFlags(USART_TypeDef*, IRQn_Type)
</UL>
<BR>[Called By]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_IRQHandler
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_IRQHandler
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART5_IRQHandler
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART4_IRQHandler
</UL>

<P><STRONG><a name="[b8]"></a>USARTClass::begin(unsigned)</STRONG> (Thumb, 596 bytes, Stack size 88 bytes, usartclass.o(i._ZN10USARTClass5beginEj))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = USARTClass::begin(unsigned) &rArr; pinMode &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pinMode
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_DisableIRQ
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_ClearPendingIRQ
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[49]"></a>USARTClass::write(unsigned char)</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, usartclass.o(i._ZN10USARTClass5writeEh))
<BR><BR>[Called By]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fputc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usartclass.o(.constdata__ZTV10USARTClass)
</UL>
<P><STRONG><a name="[e0]"></a>USARTClass::USARTClass(USART_TypeDef*, IRQn_Type, unsigned, RingBuffer*)</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, usartclass.o(i._ZN10USARTClassC1EP13USART_TypeDef9IRQn_TypejP10RingBuffer))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = USARTClass::USARTClass(USART_TypeDef*, IRQn_Type, unsigned, RingBuffer*)
</UL>
<BR>[Called By]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___5_sys_c_pinMode
</UL>

<P><STRONG><a name="[fe]"></a>USARTClass::USARTClass__sub_object(USART_TypeDef*, IRQn_Type, unsigned, RingBuffer*)</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, usartclass.o(i._ZN10USARTClassC1EP13USART_TypeDef9IRQn_TypejP10RingBuffer), UNUSED)

<P><STRONG><a name="[4b]"></a>BufferFiller::write(unsigned char)</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, tcpip.o(i._ZN12BufferFiller5writeEh))
<BR>[Address Reference Count : 1]<UL><LI> tcpip.o(.constdata__ZTV12BufferFiller)
</UL>
<P><STRONG><a name="[b2]"></a>BufferFiller::emit_p(const char*, ...)</STRONG> (Thumb, 244 bytes, Stack size 32 bytes, ethercard.o(i._ZN12BufferFiller6emit_pEPKcz))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = BufferFiller::emit_p(const char*, ...) &rArr; wtoa(unsigned short, char*) &rArr;  wtoa(unsigned short, char*) (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wtoa(unsigned short, char*)
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;homePage()
</UL>

<P><STRONG><a name="[bd]"></a>Print::print(const char*)</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, print.o(i._ZN5Print5printEPKc))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Print::print(const char*) &rArr; Print::write(const char*)
</UL>
<BR>[Calls]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print::write(const char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print::println(const char*)
</UL>

<P><STRONG><a name="[c1]"></a>Print::print(char)</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, print.o(i._ZN5Print5printEc))
<BR><BR>[Called By]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print::println()
</UL>

<P><STRONG><a name="[be]"></a>Print::write(const char*)</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, print.o(i._ZN5Print5writeEPKc))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Print::write(const char*)
</UL>
<BR>[Calls]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print::print(const char*)
</UL>

<P><STRONG><a name="[4a]"></a>Print::write(const unsigned char*, unsigned)</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, print.o(i._ZN5Print5writeEPKhj))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Print::write(const unsigned char*, unsigned)
</UL>
<BR>[Address Reference Count : 3]<UL><LI> tcpip.o(.constdata__ZTV12BufferFiller)
<LI> usartclass.o(.constdata__ZTV10USARTClass)
<LI> print.o(.constdata__ZTV5Print)
</UL>
<P><STRONG><a name="[bf]"></a>Print::println(const char*)</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, print.o(i._ZN5Print7printlnEPKc))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Print::println(const char*) &rArr; Print::println()
</UL>
<BR>[Calls]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print::println()
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print::print(const char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[c0]"></a>Print::println()</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, print.o(i._ZN5Print7printlnEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Print::println()
</UL>
<BR>[Calls]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print::print(char)
</UL>
<BR>[Called By]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print::println(const char*)
</UL>

<P><STRONG><a name="[b1]"></a>Print::Print__sub_object()</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, ethercard.o(i._ZN5PrintC2Ev))
<BR><BR>[Called By]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___6_main_c_bfill
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;homePage()
</UL>

<P><STRONG><a name="[c2]"></a>Stash::initMap(unsigned char)</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, ethercard.o(i._ZN5Stash7initMapEh))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Stash::initMap(unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Stash::freeBlock(unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EtherCard::begin(unsigned short, const unsigned char*, unsigned char)
</UL>

<P><STRONG><a name="[c3]"></a>Stash::freeBlock(unsigned char)</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, ethercard.o(i._ZN5Stash9freeBlockEh))
<BR><BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Stash::initMap(unsigned char)
</UL>

<P><STRONG><a name="[c4]"></a>ENC28J60::initialize(unsigned short, const unsigned char*, unsigned char)</STRONG> (Thumb, 312 bytes, Stack size 24 bytes, enc28j60.o(i._ZN8ENC28J6010initializeEtPKhh))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = ENC28J60::initialize(unsigned short, const unsigned char*, unsigned char) &rArr; writePhy(unsigned char, unsigned short) &rArr; writeReg(unsigned char, unsigned short) &rArr; writeRegByte(unsigned char, unsigned char) &rArr; SetBank(unsigned char) &rArr; writeOp(unsigned char, unsigned char, unsigned char) &rArr; disableChip()
</UL>
<BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENC28J60::enableBroadcast(bool)
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pinMode
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENC28J60::initSPI()
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeReg(unsigned char, unsigned short)
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writePhy(unsigned char, unsigned short)
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeOp(unsigned char, unsigned char, unsigned char)
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetBank(unsigned char)
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readOp(unsigned char, unsigned char)
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeRegByte(unsigned char, unsigned char)
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readRegByte(unsigned char)
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disableChip()
</UL>
<BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EtherCard::begin(unsigned short, const unsigned char*, unsigned char)
</UL>

<P><STRONG><a name="[87]"></a>ENC28J60::packetSend(unsigned short)</STRONG> (Thumb, 106 bytes, Stack size 8 bytes, enc28j60.o(i._ZN8ENC28J6010packetSendEt))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = ENC28J60::packetSend(unsigned short) &rArr; writeReg(unsigned char, unsigned short) &rArr; writeRegByte(unsigned char, unsigned char) &rArr; SetBank(unsigned char) &rArr; writeOp(unsigned char, unsigned char, unsigned char) &rArr; disableChip()
</UL>
<BR>[Calls]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeReg(unsigned char, unsigned short)
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeBuf(unsigned short, const unsigned char*)
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeOp(unsigned char, unsigned char, unsigned char)
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readOp(unsigned char, unsigned char)
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readRegByte(unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EtherCard::udpTransmit(unsigned short)
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;make_tcp_ack_with_data_noflags(unsigned short)
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;make_echo_reply_from_request(unsigned short)
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;make_arp_answer_from_request()
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;make_tcp_synack_from_syn()
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;make_tcp_ack_from_any(short, unsigned char)
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;client_arp_whohas(unsigned char*)
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;client_syn(unsigned char, unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[c8]"></a>ENC28J60::packetReceive()</STRONG> (Thumb, 150 bytes, Stack size 16 bytes, enc28j60.o(i._ZN8ENC28J6013packetReceiveEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = ENC28J60::packetReceive() &rArr; writeReg(unsigned char, unsigned short) &rArr; writeRegByte(unsigned char, unsigned char) &rArr; SetBank(unsigned char) &rArr; writeOp(unsigned char, unsigned char, unsigned char) &rArr; disableChip()
</UL>
<BR>[Calls]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeReg(unsigned char, unsigned short)
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeOp(unsigned char, unsigned char, unsigned char)
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readBuf(unsigned short, unsigned char*)
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readRegByte(unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[c7]"></a>ENC28J60::enableBroadcast(bool)</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, enc28j60.o(i._ZN8ENC28J6015enableBroadcastEb))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = ENC28J60::enableBroadcast(bool) &rArr; writeRegByte(unsigned char, unsigned char) &rArr; SetBank(unsigned char) &rArr; writeOp(unsigned char, unsigned char, unsigned char) &rArr; disableChip()
</UL>
<BR>[Calls]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeRegByte(unsigned char, unsigned char)
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readRegByte(unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EtherCard::DhcpStateMachine(unsigned short)
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENC28J60::initialize(unsigned short, const unsigned char*, unsigned char)
</UL>

<P><STRONG><a name="[c9]"></a>ENC28J60::disableBroadcast(bool)</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, enc28j60.o(i._ZN8ENC28J6016disableBroadcastEb))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = ENC28J60::disableBroadcast(bool) &rArr; writeRegByte(unsigned char, unsigned char) &rArr; SetBank(unsigned char) &rArr; writeOp(unsigned char, unsigned char, unsigned char) &rArr; disableChip()
</UL>
<BR>[Calls]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeRegByte(unsigned char, unsigned char)
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readRegByte(unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EtherCard::DhcpStateMachine(unsigned short)
</UL>

<P><STRONG><a name="[c5]"></a>ENC28J60::initSPI()</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, enc28j60.o(i._ZN8ENC28J607initSPIEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = ENC28J60::initSPI() &rArr; SPIClass::begin() &rArr; SPIClass::init() &rArr; HAL_SPI_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIClass::begin()
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIClass::setBitOrder(unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENC28J60::initialize(unsigned short, const unsigned char*, unsigned char)
</UL>

<P><STRONG><a name="[cc]"></a>ENC28J60::isLinkUp()</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, enc28j60.o(i._ZN8ENC28J608isLinkUpEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = ENC28J60::isLinkUp() &rArr; readPhyByte(unsigned char) &rArr; writeRegByte(unsigned char, unsigned char) &rArr; SetBank(unsigned char) &rArr; writeOp(unsigned char, unsigned char, unsigned char) &rArr; disableChip()
</UL>
<BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readPhyByte(unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EtherCard::packetLoop(unsigned short)
</UL>

<P><STRONG><a name="[cb]"></a>SPIClass::setBitOrder(unsigned short)</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, sys.o(i._ZN8SPIClass11setBitOrderEt))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = SPIClass::setBitOrder(unsigned short) &rArr; HAL_SPI_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIClass::begin()
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENC28J60::initSPI()
</UL>

<P><STRONG><a name="[cd]"></a>SPIClass::setDataMode(unsigned char)</STRONG> (Thumb, 84 bytes, Stack size 8 bytes, sys.o(i._ZN8SPIClass11setDataModeEh))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = SPIClass::setDataMode(unsigned char) &rArr; HAL_SPI_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIClass::begin()
</UL>

<P><STRONG><a name="[ce]"></a>SPIClass::setdataSize(unsigned short)</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, sys.o(i._ZN8SPIClass11setdataSizeEt))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = SPIClass::setdataSize(unsigned short) &rArr; HAL_SPI_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIClass::begin()
</UL>

<P><STRONG><a name="[cf]"></a>SPIClass::setClockDivider(unsigned char)</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, sys.o(i._ZN8SPIClass15setClockDividerEh))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = SPIClass::setClockDivider(unsigned char) &rArr; HAL_SPI_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIClass::begin()
</UL>

<P><STRONG><a name="[d0]"></a>SPIClass::init()</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, sys.o(i._ZN8SPIClass4initEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = SPIClass::init() &rArr; HAL_SPI_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIClass::begin()
</UL>

<P><STRONG><a name="[ca]"></a>SPIClass::begin()</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, sys.o(i._ZN8SPIClass5beginEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = SPIClass::begin() &rArr; SPIClass::init() &rArr; HAL_SPI_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIClass::setBitOrder(unsigned short)
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIClass::init()
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIClass::setClockDivider(unsigned char)
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIClass::setdataSize(unsigned short)
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIClass::setDataMode(unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENC28J60::initSPI()
</UL>

<P><STRONG><a name="[ad]"></a>SPIClass::transfer(unsigned char)</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, sys.o(i._ZN8SPIClass8transferEh))
<BR><BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeBuf(unsigned short, const unsigned char*)
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeOp(unsigned char, unsigned char, unsigned char)
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readBuf(unsigned short, unsigned char*)
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readOp(unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[e1]"></a>SPIClass::SPIClass(SPI_TypeDef*, void(*)())</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, sys.o(i._ZN8SPIClassC1EP11SPI_TypeDefPFYvvE))
<BR><BR>[Called By]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___5_sys_c_pinMode
</UL>

<P><STRONG><a name="[ff]"></a>SPIClass::SPIClass__sub_object(SPI_TypeDef*, void(*)())</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, sys.o(i._ZN8SPIClassC1EP11SPI_TypeDefPFYvvE), UNUSED)

<P><STRONG><a name="[d1]"></a>EtherCard::packetLoop(unsigned short)</STRONG> (Thumb, 840 bytes, Stack size 24 bytes, tcpip.o(i._ZN9EtherCard10packetLoopEt))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = EtherCard::packetLoop(unsigned short) &rArr; EtherCard::DhcpStateMachine(unsigned short) &rArr; send_dhcp_message() &rArr; EtherCard::udpTransmit(unsigned short) &rArr; ENC28J60::packetSend(unsigned short) &rArr; writeReg(unsigned char, unsigned short) &rArr; writeRegByte(unsigned char, unsigned char) &rArr; SetBank(unsigned char) &rArr; writeOp(unsigned char, unsigned char, unsigned char) &rArr; disableChip()
</UL>
<BR>[Calls]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENC28J60::isLinkUp()
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EtherCard::DhcpStateMachine(unsigned short)
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EtherCard::udpServerHasProcessedPacket(unsigned short)
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EtherCard::udpServerListening()
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EtherCard::accept(unsigned short, unsigned short)
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_lan(const unsigned char*, const unsigned char*)
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;make_tcp_ack_with_data_noflags(unsigned short)
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;make_echo_reply_from_request(unsigned short)
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;make_arp_answer_from_request()
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_type_is_arp_and_my_ip(unsigned short)
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_type_is_ip_and_my_ip(unsigned short)
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_ip_message_is_from(const unsigned char*)
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;make_tcp_ack_from_any(short, unsigned char)
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;client_arp_whohas(unsigned char*)
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_tcp_data_len()
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;client_store_mac(unsigned char*, unsigned char*)
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;client_syn(unsigned char, unsigned char, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[9d]"></a>EtherCard::udpPrepare(unsigned short, const unsigned char*, unsigned short)</STRONG> (Thumb, 134 bytes, Stack size 16 bytes, tcpip.o(i._ZN9EtherCard10udpPrepareEtPKht))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = EtherCard::udpPrepare(unsigned short, const unsigned char*, unsigned short) &rArr; setMACandIPs(const unsigned char*, const unsigned char*) &rArr; setMACs(const unsigned char*)
</UL>
<BR>[Calls]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EtherCard::copyMac(unsigned char*, const unsigned char*)
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_lan(const unsigned char*, const unsigned char*)
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setMACandIPs(const unsigned char*, const unsigned char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_dhcp_message()
</UL>

<P><STRONG><a name="[d7]"></a>EtherCard::staticSetup(const unsigned char*, const unsigned char*, const unsigned char*, const unsigned char*)</STRONG> (Thumb, 72 bytes, Stack size 24 bytes, ethercard.o(i._ZN9EtherCard11staticSetupEPKhS1_S1_S1_))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = EtherCard::staticSetup(const unsigned char*, const unsigned char*, const unsigned char*, const unsigned char*) &rArr; EtherCard::setGwIp(const unsigned char*)
</UL>
<BR>[Calls]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EtherCard::setGwIp(const unsigned char*)
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EtherCard::copyIp(unsigned char*, const unsigned char*)
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EtherCard::updateBroadcastAddress()
</UL>
<BR>[Called By]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[a0]"></a>EtherCard::udpTransmit(unsigned short)</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, tcpip.o(i._ZN9EtherCard11udpTransmitEt))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = EtherCard::udpTransmit(unsigned short) &rArr; ENC28J60::packetSend(unsigned short) &rArr; writeReg(unsigned char, unsigned short) &rArr; writeRegByte(unsigned char, unsigned char) &rArr; SetBank(unsigned char) &rArr; writeOp(unsigned char, unsigned char, unsigned char) &rArr; disableChip()
</UL>
<BR>[Calls]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fill_ip_hdr_checksum()
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fill_checksum(unsigned char, unsigned char, unsigned short, unsigned char)
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENC28J60::packetSend(unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_dhcp_message()
</UL>

<P><STRONG><a name="[da]"></a>EtherCard::httpServerReply(unsigned short)</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, tcpip.o(i._ZN9EtherCard15httpServerReplyEt))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = EtherCard::httpServerReply(unsigned short) &rArr; make_tcp_ack_with_data_noflags(unsigned short) &rArr; ENC28J60::packetSend(unsigned short) &rArr; writeReg(unsigned char, unsigned short) &rArr; writeRegByte(unsigned char, unsigned char) &rArr; SetBank(unsigned char) &rArr; writeOp(unsigned char, unsigned char, unsigned char) &rArr; disableChip()
</UL>
<BR>[Calls]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;make_tcp_ack_with_data_noflags(unsigned short)
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;make_tcp_ack_from_any(short, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[d2]"></a>EtherCard::DhcpStateMachine(unsigned short)</STRONG> (Thumb, 238 bytes, Stack size 8 bytes, dhcp.o(i._ZN9EtherCard16DhcpStateMachineEt))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = EtherCard::DhcpStateMachine(unsigned short) &rArr; send_dhcp_message() &rArr; EtherCard::udpTransmit(unsigned short) &rArr; ENC28J60::packetSend(unsigned short) &rArr; writeReg(unsigned char, unsigned short) &rArr; writeRegByte(unsigned char, unsigned char) &rArr; SetBank(unsigned char) &rArr; writeOp(unsigned char, unsigned char, unsigned char) &rArr; disableChip()
</UL>
<BR>[Calls]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;millis
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EtherCard::setGwIp(const unsigned char*)
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENC28J60::disableBroadcast(bool)
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENC28J60::enableBroadcast(bool)
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_received_message_type(unsigned short, unsigned char)
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_dhcp_offer(unsigned short)
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_dhcp_message()
</UL>
<BR>[Called By]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EtherCard::packetLoop(unsigned short)
</UL>

<P><STRONG><a name="[d3]"></a>EtherCard::udpServerListening()</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, udpserver.o(i._ZN9EtherCard18udpServerListeningEv))
<BR><BR>[Called By]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EtherCard::packetLoop(unsigned short)
</UL>

<P><STRONG><a name="[d9]"></a>EtherCard::updateBroadcastAddress()</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, tcpip.o(i._ZN9EtherCard22updateBroadcastAddressEv))
<BR><BR>[Called By]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EtherCard::staticSetup(const unsigned char*, const unsigned char*, const unsigned char*, const unsigned char*)
</UL>

<P><STRONG><a name="[d4]"></a>EtherCard::udpServerHasProcessedPacket(unsigned short)</STRONG> (Thumb, 142 bytes, Stack size 32 bytes, udpserver.o(i._ZN9EtherCard27udpServerHasProcessedPacketEt))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = EtherCard::udpServerHasProcessedPacket(unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EtherCard::packetLoop(unsigned short)
</UL>

<P><STRONG><a name="[dc]"></a>EtherCard::begin(unsigned short, const unsigned char*, unsigned char)</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, ethercard.o(i._ZN9EtherCard5beginEtPKhh))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = EtherCard::begin(unsigned short, const unsigned char*, unsigned char) &rArr; ENC28J60::initialize(unsigned short, const unsigned char*, unsigned char) &rArr; writePhy(unsigned char, unsigned short) &rArr; writeReg(unsigned char, unsigned short) &rArr; writeRegByte(unsigned char, unsigned char) &rArr; SetBank(unsigned char) &rArr; writeOp(unsigned char, unsigned char, unsigned char) &rArr; disableChip()
</UL>
<BR>[Calls]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EtherCard::copyMac(unsigned char*, const unsigned char*)
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Stash::initMap(unsigned char)
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENC28J60::initialize(unsigned short, const unsigned char*, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[d6]"></a>EtherCard::accept(unsigned short, unsigned short)</STRONG> (Thumb, 126 bytes, Stack size 16 bytes, tcpip.o(i._ZN9EtherCard6acceptEtt))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = EtherCard::accept(unsigned short, unsigned short) &rArr; make_tcp_ack_from_any(short, unsigned char) &rArr; ENC28J60::packetSend(unsigned short) &rArr; writeReg(unsigned char, unsigned short) &rArr; writeRegByte(unsigned char, unsigned char) &rArr; SetBank(unsigned char) &rArr; writeOp(unsigned char, unsigned char, unsigned char) &rArr; disableChip()
</UL>
<BR>[Calls]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;make_tcp_synack_from_syn()
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;make_tcp_ack_from_any(short, unsigned char)
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_tcp_data_len()
</UL>
<BR>[Called By]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EtherCard::packetLoop(unsigned short)
</UL>

<P><STRONG><a name="[8d]"></a>EtherCard::copyIp(unsigned char*, const unsigned char*)</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, webutil.o(i._ZN9EtherCard6copyIpEPhPKh))
<BR><BR>[Called By]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EtherCard::setGwIp(const unsigned char*)
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_dhcp_offer(unsigned short)
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_dhcp_message()
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;make_arp_answer_from_request()
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;client_arp_whohas(unsigned char*)
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setMACandIPs(const unsigned char*, const unsigned char*)
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;make_eth_ip()
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EtherCard::staticSetup(const unsigned char*, const unsigned char*, const unsigned char*, const unsigned char*)
</UL>

<P><STRONG><a name="[9a]"></a>EtherCard::copyMac(unsigned char*, const unsigned char*)</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, webutil.o(i._ZN9EtherCard7copyMacEPhPKh))
<BR><BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EtherCard::udpPrepare(unsigned short, const unsigned char*, unsigned short)
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_dhcp_message()
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setMACs(const unsigned char*)
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;make_arp_answer_from_request()
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;client_arp_whohas(unsigned char*)
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;client_store_mac(unsigned char*, unsigned char*)
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EtherCard::begin(unsigned short, const unsigned char*, unsigned char)
</UL>

<P><STRONG><a name="[d8]"></a>EtherCard::setGwIp(const unsigned char*)</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, tcpip.o(i._ZN9EtherCard7setGwIpEPKh))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = EtherCard::setGwIp(const unsigned char*)
</UL>
<BR>[Calls]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EtherCard::copyIp(unsigned char*, const unsigned char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EtherCard::DhcpStateMachine(unsigned short)
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EtherCard::staticSetup(const unsigned char*, const unsigned char*, const unsigned char*, const unsigned char*)
</UL>

<P><STRONG><a name="[4]"></a>String::StringIfHelper() const</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, tm1637display.o(i._ZNK6String14StringIfHelperEv))
<BR>[Address Reference Count : 6]<UL><LI> dhcp.o(.data)
<LI> udpserver.o(.data)
<LI> enc28j60.o(.data)
<LI> ethercard.o(.data)
<LI> tcpip.o(.data)
<LI> main.o(.data)
</UL>
<P><STRONG><a name="[dd]"></a>__0printf</STRONG> (Thumb, 22 bytes, Stack size 24 bytes, printfa.o(i.__0printf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[100]"></a>__1printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0printf), UNUSED)

<P><STRONG><a name="[e9]"></a>__2printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0printf))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[101]"></a>__c89printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0printf), UNUSED)

<P><STRONG><a name="[102]"></a>printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0printf), UNUSED)

<P><STRONG><a name="[4c]"></a>__cxa_pure_virtual</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, pure_virt.o(i.__cxa_pure_virtual))
<BR><BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGPVFN
</UL>
<BR>[Address Reference Count : 1]<UL><LI> print.o(.constdata__ZTV5Print)
</UL>
<P><STRONG><a name="[103]"></a>__scatterload_copy</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_copy), UNUSED)

<P><STRONG><a name="[104]"></a>__scatterload_null</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_null), UNUSED)

<P><STRONG><a name="[105]"></a>__scatterload_zeroinit</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_zeroinit), UNUSED)

<P><STRONG><a name="[c6]"></a>delay</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, sys.o(i.delay))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = delay &rArr; HAL_RCC_GetSysClockFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetSysClockFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENC28J60::initialize(unsigned short, const unsigned char*, unsigned char)
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[e7]"></a>delay_ms</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, sys.o(i.delay_ms))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = delay_ms &rArr; delay &rArr; HAL_RCC_GetSysClockFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay
</UL>
<BR>[Called By]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[89]"></a>digitalWrite</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, sys.o(i.digitalWrite))
<BR><BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disableChip()
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enableChip()
</UL>

<P><STRONG><a name="[45]"></a>fputc</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, main.o(i.fputc))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = fputc
</UL>
<BR>[Calls]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USARTClass::write(unsigned char)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> printfa.o(i.__0printf)
</UL>
<P><STRONG><a name="[42]"></a>main</STRONG> (Thumb, 136 bytes, Stack size 0 bytes, main.o(i.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = main &rArr; USARTClass::begin(unsigned) &rArr; pinMode &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EtherCard::packetLoop(unsigned short)
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENC28J60::packetReceive()
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pinMode
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;micros
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EtherCard::httpServerReply(unsigned short)
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EtherCard::begin(unsigned short, const unsigned char*, unsigned char)
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EtherCard::staticSetup(const unsigned char*, const unsigned char*, const unsigned char*, const unsigned char*)
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;togglePin
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print::println(const char*)
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USARTClass::begin(unsigned)
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;homePage()
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P><STRONG><a name="[e8]"></a>micros</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, sys.o(i.micros))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = micros
</UL>
<BR>[Calls]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[b0]"></a>millis</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, sys.o(i.millis))
<BR><BR>[Calls]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EtherCard::DhcpStateMachine(unsigned short)
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;homePage()
</UL>

<P><STRONG><a name="[81]"></a>pinMode</STRONG> (Thumb, 308 bytes, Stack size 32 bytes, sys.o(i.pinMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = pinMode &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENC28J60::initialize(unsigned short, const unsigned char*, unsigned char)
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USARTClass::begin(unsigned)
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_3_Init()
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_2_Init()
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_1_Init()
</UL>

<P><STRONG><a name="[ea]"></a>togglePin</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, sys.o(i.togglePin))
<BR><BR>[Called By]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[9c]"></a>send_dhcp_message()</STRONG> (Thumb, 314 bytes, Stack size 24 bytes, dhcp.o(i._Z17send_dhcp_messagev))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = send_dhcp_message() &rArr; EtherCard::udpTransmit(unsigned short) &rArr; ENC28J60::packetSend(unsigned short) &rArr; writeReg(unsigned char, unsigned short) &rArr; writeRegByte(unsigned char, unsigned char) &rArr; SetBank(unsigned char) &rArr; writeOp(unsigned char, unsigned char, unsigned char) &rArr; disableChip()
</UL>
<BR>[Calls]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EtherCard::copyMac(unsigned char*, const unsigned char*)
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EtherCard::copyIp(unsigned char*, const unsigned char*)
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EtherCard::udpTransmit(unsigned short)
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EtherCard::udpPrepare(unsigned short, const unsigned char*, unsigned short)
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addToBuf(unsigned char)
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addBytes(unsigned char, const unsigned char*)
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EtherCard::DhcpStateMachine(unsigned short)
</UL>

<P><STRONG><a name="[a1]"></a>process_dhcp_offer(unsigned short)</STRONG> (Thumb, 218 bytes, Stack size 32 bytes, dhcp.o(i._Z18process_dhcp_offert))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = process_dhcp_offer(unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EtherCard::copyIp(unsigned char*, const unsigned char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EtherCard::DhcpStateMachine(unsigned short)
</UL>

<P><STRONG><a name="[db]"></a>dhcp_received_message_type(unsigned short, unsigned char)</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, dhcp.o(i._Z26dhcp_received_message_typeth))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = dhcp_received_message_type(unsigned short, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EtherCard::DhcpStateMachine(unsigned short)
</UL>

<P><STRONG><a name="[9e]"></a>addBytes(unsigned char, const unsigned char*)</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, dhcp.o(i._Z8addByteshPKh))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = addBytes(unsigned char, const unsigned char*)
</UL>
<BR>[Calls]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addToBuf(unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_dhcp_message()
</UL>

<P><STRONG><a name="[9f]"></a>addToBuf(unsigned char)</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, dhcp.o(i._Z8addToBufh))
<BR><BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addBytes(unsigned char, const unsigned char*)
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_dhcp_message()
</UL>

<P><STRONG><a name="[88]"></a>enableChip()</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, enc28j60.o(i._Z10enableChipv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = enableChip()
</UL>
<BR>[Calls]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;digitalWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeBuf(unsigned short, const unsigned char*)
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeOp(unsigned char, unsigned char, unsigned char)
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readBuf(unsigned short, unsigned char*)
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readOp(unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[8a]"></a>disableChip()</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, enc28j60.o(i._Z11disableChipv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = disableChip()
</UL>
<BR>[Calls]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;digitalWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENC28J60::initialize(unsigned short, const unsigned char*, unsigned char)
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeBuf(unsigned short, const unsigned char*)
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeOp(unsigned char, unsigned char, unsigned char)
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readBuf(unsigned short, unsigned char*)
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readOp(unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[8e]"></a>readPhyByte(unsigned char)</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, enc28j60.o(i._Z11readPhyByteh))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = readPhyByte(unsigned char) &rArr; writeRegByte(unsigned char, unsigned char) &rArr; SetBank(unsigned char) &rArr; writeOp(unsigned char, unsigned char, unsigned char) &rArr; disableChip()
</UL>
<BR>[Calls]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeRegByte(unsigned char, unsigned char)
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readRegByte(unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENC28J60::isLinkUp()
</UL>

<P><STRONG><a name="[90]"></a>readRegByte(unsigned char)</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, enc28j60.o(i._Z11readRegByteh))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = readRegByte(unsigned char) &rArr; SetBank(unsigned char) &rArr; writeOp(unsigned char, unsigned char, unsigned char) &rArr; disableChip()
</UL>
<BR>[Calls]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetBank(unsigned char)
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readOp(unsigned char, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENC28J60::disableBroadcast(bool)
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENC28J60::enableBroadcast(bool)
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENC28J60::packetReceive()
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENC28J60::packetSend(unsigned short)
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENC28J60::initialize(unsigned short, const unsigned char*, unsigned char)
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writePhy(unsigned char, unsigned short)
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readPhyByte(unsigned char)
</UL>

<P><STRONG><a name="[8f]"></a>writeRegByte(unsigned char, unsigned char)</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, enc28j60.o(i._Z12writeRegBytehh))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = writeRegByte(unsigned char, unsigned char) &rArr; SetBank(unsigned char) &rArr; writeOp(unsigned char, unsigned char, unsigned char) &rArr; disableChip()
</UL>
<BR>[Calls]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeOp(unsigned char, unsigned char, unsigned char)
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetBank(unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENC28J60::disableBroadcast(bool)
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENC28J60::enableBroadcast(bool)
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENC28J60::initialize(unsigned short, const unsigned char*, unsigned char)
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeReg(unsigned char, unsigned short)
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writePhy(unsigned char, unsigned short)
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readPhyByte(unsigned char)
</UL>

<P><STRONG><a name="[92]"></a>readOp(unsigned char, unsigned char)</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, enc28j60.o(i._Z6readOphh))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = readOp(unsigned char, unsigned char) &rArr; disableChip()
</UL>
<BR>[Calls]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIClass::transfer(unsigned char)
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disableChip()
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enableChip()
</UL>
<BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENC28J60::packetSend(unsigned short)
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENC28J60::initialize(unsigned short, const unsigned char*, unsigned char)
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readRegByte(unsigned char)
</UL>

<P><STRONG><a name="[91]"></a>SetBank(unsigned char)</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, enc28j60.o(i._Z7SetBankh))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = SetBank(unsigned char) &rArr; writeOp(unsigned char, unsigned char, unsigned char) &rArr; disableChip()
</UL>
<BR>[Calls]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeOp(unsigned char, unsigned char, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENC28J60::initialize(unsigned short, const unsigned char*, unsigned char)
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeRegByte(unsigned char, unsigned char)
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readRegByte(unsigned char)
</UL>

<P><STRONG><a name="[ae]"></a>readBuf(unsigned short, unsigned char*)</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, enc28j60.o(i._Z7readBuftPh))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = readBuf(unsigned short, unsigned char*) &rArr; disableChip()
</UL>
<BR>[Calls]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIClass::transfer(unsigned char)
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disableChip()
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enableChip()
</UL>
<BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENC28J60::packetReceive()
</UL>

<P><STRONG><a name="[95]"></a>writeOp(unsigned char, unsigned char, unsigned char)</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, enc28j60.o(i._Z7writeOphhh))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = writeOp(unsigned char, unsigned char, unsigned char) &rArr; disableChip()
</UL>
<BR>[Calls]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIClass::transfer(unsigned char)
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disableChip()
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enableChip()
</UL>
<BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENC28J60::packetReceive()
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENC28J60::packetSend(unsigned short)
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENC28J60::initialize(unsigned short, const unsigned char*, unsigned char)
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetBank(unsigned char)
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeRegByte(unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[b3]"></a>writeBuf(unsigned short, const unsigned char*)</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, enc28j60.o(i._Z8writeBuftPKh))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = writeBuf(unsigned short, const unsigned char*) &rArr; disableChip()
</UL>
<BR>[Calls]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIClass::transfer(unsigned char)
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disableChip()
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enableChip()
</UL>
<BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENC28J60::packetSend(unsigned short)
</UL>

<P><STRONG><a name="[b4]"></a>writePhy(unsigned char, unsigned short)</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, enc28j60.o(i._Z8writePhyht))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = writePhy(unsigned char, unsigned short) &rArr; writeReg(unsigned char, unsigned short) &rArr; writeRegByte(unsigned char, unsigned char) &rArr; SetBank(unsigned char) &rArr; writeOp(unsigned char, unsigned char, unsigned char) &rArr; disableChip()
</UL>
<BR>[Calls]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeReg(unsigned char, unsigned short)
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeRegByte(unsigned char, unsigned char)
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readRegByte(unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENC28J60::initialize(unsigned short, const unsigned char*, unsigned char)
</UL>

<P><STRONG><a name="[b5]"></a>writeReg(unsigned char, unsigned short)</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, enc28j60.o(i._Z8writeReght))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = writeReg(unsigned char, unsigned short) &rArr; writeRegByte(unsigned char, unsigned char) &rArr; SetBank(unsigned char) &rArr; writeOp(unsigned char, unsigned char, unsigned char) &rArr; disableChip()
</UL>
<BR>[Calls]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeRegByte(unsigned char, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENC28J60::packetReceive()
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENC28J60::packetSend(unsigned short)
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENC28J60::initialize(unsigned short, const unsigned char*, unsigned char)
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writePhy(unsigned char, unsigned short)
</UL>

<P><STRONG><a name="[ac]"></a>wtoa(unsigned short, char*)</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, ethercard.o(i._Z4wtoatPc))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + In Cycle
<LI>Call Chain = wtoa(unsigned short, char*) &rArr;  wtoa(unsigned short, char*) (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wtoa(unsigned short, char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BufferFiller::emit_p(const char*, ...)
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wtoa(unsigned short, char*)
</UL>

<P><STRONG><a name="[82]"></a>client_syn(unsigned char, unsigned char, unsigned char)</STRONG> (Thumb, 216 bytes, Stack size 16 bytes, tcpip.o(i._Z10client_synhhh))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = client_syn(unsigned char, unsigned char, unsigned char) &rArr; ENC28J60::packetSend(unsigned short) &rArr; writeReg(unsigned char, unsigned short) &rArr; writeRegByte(unsigned char, unsigned char) &rArr; SetBank(unsigned char) &rArr; writeOp(unsigned char, unsigned char, unsigned char) &rArr; disableChip()
</UL>
<BR>[Calls]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_lan(const unsigned char*, const unsigned char*)
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fill_ip_hdr_checksum()
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fill_checksum(unsigned char, unsigned char, unsigned short, unsigned char)
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setMACandIPs(const unsigned char*, const unsigned char*)
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENC28J60::packetSend(unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EtherCard::packetLoop(unsigned short)
</UL>

<P><STRONG><a name="[8b]"></a>make_eth_ip()</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, tcpip.o(i._Z11make_eth_ipv))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = make_eth_ip() &rArr; fill_ip_hdr_checksum() &rArr; fill_checksum(unsigned char, unsigned char, unsigned short, unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EtherCard::copyIp(unsigned char*, const unsigned char*)
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setMACs(const unsigned char*)
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fill_ip_hdr_checksum()
</UL>
<BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;make_echo_reply_from_request(unsigned short)
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;make_tcp_synack_from_syn()
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;make_tcp_ack_from_any(short, unsigned char)
</UL>

<P><STRONG><a name="[93]"></a>make_tcphead(unsigned short, unsigned char)</STRONG> (Thumb, 78 bytes, Stack size 24 bytes, tcpip.o(i._Z12make_tcpheadth))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = make_tcphead(unsigned short, unsigned char) &rArr; step_seq(unsigned short, unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;step_seq(unsigned short, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;make_tcp_synack_from_syn()
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;make_tcp_ack_from_any(short, unsigned char)
</UL>

<P><STRONG><a name="[84]"></a>setMACandIPs(const unsigned char*, const unsigned char*)</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, tcpip.o(i._Z12setMACandIPsPKhS0_))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = setMACandIPs(const unsigned char*, const unsigned char*) &rArr; setMACs(const unsigned char*)
</UL>
<BR>[Calls]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EtherCard::copyIp(unsigned char*, const unsigned char*)
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setMACs(const unsigned char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EtherCard::udpPrepare(unsigned short, const unsigned char*, unsigned short)
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;client_syn(unsigned char, unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[86]"></a>fill_checksum(unsigned char, unsigned char, unsigned short, unsigned char)</STRONG> (Thumb, 106 bytes, Stack size 24 bytes, tcpip.o(i._Z13fill_checksumhhth))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = fill_checksum(unsigned char, unsigned char, unsigned short, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EtherCard::udpTransmit(unsigned short)
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;make_tcp_ack_with_data_noflags(unsigned short)
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;make_tcp_synack_from_syn()
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;make_tcp_ack_from_any(short, unsigned char)
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fill_ip_hdr_checksum()
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;client_syn(unsigned char, unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[98]"></a>client_store_mac(unsigned char*, unsigned char*)</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, tcpip.o(i._Z16client_store_macPhS_))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = client_store_mac(unsigned char*, unsigned char*) &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EtherCard::copyMac(unsigned char*, const unsigned char*)
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EtherCard::packetLoop(unsigned short)
</UL>

<P><STRONG><a name="[d5]"></a>get_tcp_data_len()</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, tcpip.o(i._Z16get_tcp_data_lenv))
<BR><BR>[Called By]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EtherCard::packetLoop(unsigned short)
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EtherCard::accept(unsigned short, unsigned short)
</UL>

<P><STRONG><a name="[9b]"></a>client_arp_whohas(unsigned char*)</STRONG> (Thumb, 78 bytes, Stack size 8 bytes, tcpip.o(i._Z17client_arp_whohasPh))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = client_arp_whohas(unsigned char*) &rArr; ENC28J60::packetSend(unsigned short) &rArr; writeReg(unsigned char, unsigned short) &rArr; writeRegByte(unsigned char, unsigned char) &rArr; SetBank(unsigned char) &rArr; writeOp(unsigned char, unsigned char, unsigned char) &rArr; disableChip()
</UL>
<BR>[Calls]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EtherCard::copyMac(unsigned char*, const unsigned char*)
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EtherCard::copyIp(unsigned char*, const unsigned char*)
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setMACs(const unsigned char*)
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENC28J60::packetSend(unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EtherCard::packetLoop(unsigned short)
</UL>

<P><STRONG><a name="[85]"></a>fill_ip_hdr_checksum()</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, tcpip.o(i._Z20fill_ip_hdr_checksumv))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = fill_ip_hdr_checksum() &rArr; fill_checksum(unsigned char, unsigned char, unsigned short, unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fill_checksum(unsigned char, unsigned char, unsigned short, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EtherCard::udpTransmit(unsigned short)
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;make_tcp_ack_with_data_noflags(unsigned short)
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;make_eth_ip()
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;client_syn(unsigned char, unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[a2]"></a>make_tcp_ack_from_any(short, unsigned char)</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, tcpip.o(i._Z21make_tcp_ack_from_anysh))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = make_tcp_ack_from_any(short, unsigned char) &rArr; ENC28J60::packetSend(unsigned short) &rArr; writeReg(unsigned char, unsigned short) &rArr; writeRegByte(unsigned char, unsigned char) &rArr; SetBank(unsigned char) &rArr; writeOp(unsigned char, unsigned char, unsigned char) &rArr; disableChip()
</UL>
<BR>[Calls]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fill_checksum(unsigned char, unsigned char, unsigned short, unsigned char)
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;make_tcphead(unsigned short, unsigned char)
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;make_eth_ip()
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENC28J60::packetSend(unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EtherCard::packetLoop(unsigned short)
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EtherCard::accept(unsigned short, unsigned short)
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EtherCard::httpServerReply(unsigned short)
</UL>

<P><STRONG><a name="[a5]"></a>check_ip_message_is_from(const unsigned char*)</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, tcpip.o(i._Z24check_ip_message_is_fromPKh))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = check_ip_message_is_from(const unsigned char*) &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EtherCard::packetLoop(unsigned short)
</UL>

<P><STRONG><a name="[a6]"></a>eth_type_is_ip_and_my_ip(unsigned short)</STRONG> (Thumb, 80 bytes, Stack size 8 bytes, tcpip.o(i._Z24eth_type_is_ip_and_my_ipt))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = eth_type_is_ip_and_my_ip(unsigned short) &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EtherCard::packetLoop(unsigned short)
</UL>

<P><STRONG><a name="[a7]"></a>make_tcp_synack_from_syn()</STRONG> (Thumb, 132 bytes, Stack size 8 bytes, tcpip.o(i._Z24make_tcp_synack_from_synv))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = make_tcp_synack_from_syn() &rArr; ENC28J60::packetSend(unsigned short) &rArr; writeReg(unsigned char, unsigned short) &rArr; writeRegByte(unsigned char, unsigned char) &rArr; SetBank(unsigned char) &rArr; writeOp(unsigned char, unsigned char, unsigned char) &rArr; disableChip()
</UL>
<BR>[Calls]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fill_checksum(unsigned char, unsigned char, unsigned short, unsigned char)
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;make_tcphead(unsigned short, unsigned char)
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;make_eth_ip()
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENC28J60::packetSend(unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EtherCard::accept(unsigned short, unsigned short)
</UL>

<P><STRONG><a name="[a8]"></a>eth_type_is_arp_and_my_ip(unsigned short)</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, tcpip.o(i._Z25eth_type_is_arp_and_my_ipt))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = eth_type_is_arp_and_my_ip(unsigned short) &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EtherCard::packetLoop(unsigned short)
</UL>

<P><STRONG><a name="[a9]"></a>make_arp_answer_from_request()</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, tcpip.o(i._Z28make_arp_answer_from_requestv))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = make_arp_answer_from_request() &rArr; ENC28J60::packetSend(unsigned short) &rArr; writeReg(unsigned char, unsigned short) &rArr; writeRegByte(unsigned char, unsigned char) &rArr; SetBank(unsigned char) &rArr; writeOp(unsigned char, unsigned char, unsigned char) &rArr; disableChip()
</UL>
<BR>[Calls]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EtherCard::copyMac(unsigned char*, const unsigned char*)
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EtherCard::copyIp(unsigned char*, const unsigned char*)
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setMACs(const unsigned char*)
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENC28J60::packetSend(unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EtherCard::packetLoop(unsigned short)
</UL>

<P><STRONG><a name="[aa]"></a>make_echo_reply_from_request(unsigned short)</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, tcpip.o(i._Z28make_echo_reply_from_requestt))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = make_echo_reply_from_request(unsigned short) &rArr; ENC28J60::packetSend(unsigned short) &rArr; writeReg(unsigned char, unsigned short) &rArr; writeRegByte(unsigned char, unsigned char) &rArr; SetBank(unsigned char) &rArr; writeOp(unsigned char, unsigned char, unsigned char) &rArr; disableChip()
</UL>
<BR>[Calls]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;make_eth_ip()
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENC28J60::packetSend(unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EtherCard::packetLoop(unsigned short)
</UL>

<P><STRONG><a name="[ab]"></a>make_tcp_ack_with_data_noflags(unsigned short)</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, tcpip.o(i._Z30make_tcp_ack_with_data_noflagst))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = make_tcp_ack_with_data_noflags(unsigned short) &rArr; ENC28J60::packetSend(unsigned short) &rArr; writeReg(unsigned char, unsigned short) &rArr; writeRegByte(unsigned char, unsigned char) &rArr; SetBank(unsigned char) &rArr; writeOp(unsigned char, unsigned char, unsigned char) &rArr; disableChip()
</UL>
<BR>[Calls]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fill_ip_hdr_checksum()
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fill_checksum(unsigned char, unsigned char, unsigned short, unsigned char)
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENC28J60::packetSend(unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EtherCard::packetLoop(unsigned short)
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EtherCard::httpServerReply(unsigned short)
</UL>

<P><STRONG><a name="[83]"></a>is_lan(const unsigned char*, const unsigned char*)</STRONG> (Thumb, 56 bytes, Stack size 12 bytes, tcpip.o(i._Z6is_lanPKhS0_))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = is_lan(const unsigned char*, const unsigned char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EtherCard::packetLoop(unsigned short)
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EtherCard::udpPrepare(unsigned short, const unsigned char*, unsigned short)
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;client_syn(unsigned char, unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[8c]"></a>setMACs(const unsigned char*)</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, tcpip.o(i._Z7setMACsPKh))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = setMACs(const unsigned char*)
</UL>
<BR>[Calls]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EtherCard::copyMac(unsigned char*, const unsigned char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;make_arp_answer_from_request()
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;client_arp_whohas(unsigned char*)
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setMACandIPs(const unsigned char*, const unsigned char*)
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;make_eth_ip()
</UL>

<P><STRONG><a name="[94]"></a>step_seq(unsigned short, unsigned char)</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, tcpip.o(i._Z8step_seqth))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = step_seq(unsigned short, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;make_tcphead(unsigned short, unsigned char)
</UL>

<P><STRONG><a name="[af]"></a>homePage()</STRONG> (Thumb, 188 bytes, Stack size 80 bytes, main.o(i._Z8homePagev))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = homePage() &rArr; BufferFiller::emit_p(const char*, ...) &rArr; wtoa(unsigned short, char*) &rArr;  wtoa(unsigned short, char*) (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;millis
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print::Print__sub_object()
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BufferFiller::emit_p(const char*, ...)
</UL>
<BR>[Called By]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[4d]"></a>__sti___6_main_c_bfill</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, main.o(i.__sti___6_main_c_bfill))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __sti___6_main_c_bfill
</UL>
<BR>[Calls]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print::Print__sub_object()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.init_array)
</UL>
<P><STRONG><a name="[6a]"></a>NVIC_SetPriority(IRQn_Type, unsigned)</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, stm32f1xx_hal_cortex.o(i._Z16NVIC_SetPriority9IRQn_Typej))
<BR><BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SYSTICK_Config
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
</UL>

<P><STRONG><a name="[46]"></a>SPI_1_Init()</STRONG> (Thumb, 80 bytes, Stack size 8 bytes, sys.o(i._Z10SPI_1_Initv))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = SPI_1_Init() &rArr; pinMode &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pinMode
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sys.o(i.__sti___5_sys_c_pinMode)
</UL>
<P><STRONG><a name="[47]"></a>SPI_2_Init()</STRONG> (Thumb, 80 bytes, Stack size 8 bytes, sys.o(i._Z10SPI_2_Initv))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = SPI_2_Init() &rArr; pinMode &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pinMode
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sys.o(i.__sti___5_sys_c_pinMode)
</UL>
<P><STRONG><a name="[48]"></a>SPI_3_Init()</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, sys.o(i._Z10SPI_3_Initv))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = SPI_3_Init() &rArr; pinMode &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pinMode
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sys.o(i.__sti___5_sys_c_pinMode)
</UL>
<P><STRONG><a name="[4e]"></a>__sti___5_sys_c_pinMode</STRONG> (Thumb, 200 bytes, Stack size 16 bytes, sys.o(i.__sti___5_sys_c_pinMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __sti___5_sys_c_pinMode &rArr; USARTClass::USARTClass(USART_TypeDef*, IRQn_Type, unsigned, RingBuffer*)
</UL>
<BR>[Calls]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USARTClass::USARTClass(USART_TypeDef*, IRQn_Type, unsigned, RingBuffer*)
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RingBuffer::RingBuffer()
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIClass::SPIClass(SPI_TypeDef*, void(*)())
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sys.o(.init_array)
</UL>
<P><STRONG><a name="[a3]"></a>USART_INT_ClearAllFlags(USART_TypeDef*, IRQn_Type)</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, usartclass.o(i._Z23USART_INT_ClearAllFlagsP13USART_TypeDef9IRQn_Type))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USART_INT_ClearAllFlags(USART_TypeDef*, IRQn_Type)
</UL>
<BR>[Calls]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_ClearPendingIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USARTClass::IrqHandler()
</UL>

<P><STRONG><a name="[76]"></a>UART_SetConfig(__UART_HandleTypeDef*)</STRONG> (Thumb, 178 bytes, Stack size 24 bytes, stm32f1xx_hal_uart.o(i._Z14UART_SetConfigP20__UART_HandleTypeDef))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = UART_SetConfig(__UART_HandleTypeDef*)
</UL>
<BR>[Calls]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK2Freq
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK1Freq
</UL>
<BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
</UL>

<P><STRONG><a name="[e2]"></a>_fp_digits</STRONG> (Thumb, 334 bytes, Stack size 56 bytes, printfa.o(i._fp_digits), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[de]"></a>_printf_core</STRONG> (Thumb, 1744 bytes, Stack size 136 bytes, printfa.o(i._printf_core), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0printf
</UL>

<P><STRONG><a name="[e5]"></a>_printf_post_padding</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, printfa.o(i._printf_post_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[e4]"></a>_printf_pre_padding</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, printfa.o(i._printf_pre_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>
<P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
