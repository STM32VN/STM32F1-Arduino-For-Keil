<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [..\..\STM32CppOutput\F4Cpp.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image ..\..\STM32CppOutput\F4Cpp.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5050106: Last Updated: Fri Nov 06 20:34:53 2020
<BR><P>
<H3>Maximum Stack Usage =        216 bytes + Unknown(Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
SdFile::write(unsigned char) &rArr; SdFile::write(const void*, unsigned short) &rArr; SdFile::addCluster() &rArr; SdVolume::allocContiguous(unsigned, unsigned*) &rArr; SdVolume::fatPut(unsigned, unsigned) &rArr; SdVolume::cacheRawBlock(unsigned, unsigned char) &rArr; SdVolume::cacheFlush() &rArr; Sd2Card::writeBlock(unsigned, const unsigned char*) &rArr; Sd2Card::cardCommand(unsigned char, unsigned) &rArr; Sd2Card::readEnd()
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[a]">SVC_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[a]">SVC_Handler</a><BR>
 <LI><a href="#[c]">PendSV_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[c]">PendSV_Handler</a><BR>
 <LI><a href="#[20]">ADC1_2_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[20]">ADC1_2_IRQHandler</a><BR>
 <LI><a href="#[8]">BusFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[8]">BusFault_Handler</a><BR>
 <LI><a href="#[b]">DebugMon_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[b]">DebugMon_Handler</a><BR>
 <LI><a href="#[6]">HardFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[6]">HardFault_Handler</a><BR>
 <LI><a href="#[7]">MemManage_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[7]">MemManage_Handler</a><BR>
 <LI><a href="#[9]">UsageFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[9]">UsageFault_Handler</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[20]">ADC1_2_IRQHandler</a> from startup_stm32f103xg.o(.text) referenced from startup_stm32f103xg.o(RESET)
 <LI><a href="#[3d]">ADC3_IRQHandler</a> from startup_stm32f103xg.o(.text) referenced from startup_stm32f103xg.o(RESET)
 <LI><a href="#[8]">BusFault_Handler</a> from stm32f1xx_it.o(i.BusFault_Handler) referenced from startup_stm32f103xg.o(RESET)
 <LI><a href="#[23]">CAN1_RX1_IRQHandler</a> from startup_stm32f103xg.o(.text) referenced from startup_stm32f103xg.o(RESET)
 <LI><a href="#[24]">CAN1_SCE_IRQHandler</a> from startup_stm32f103xg.o(.text) referenced from startup_stm32f103xg.o(RESET)
 <LI><a href="#[19]">DMA1_Channel1_IRQHandler</a> from sys.o(i.DMA1_Channel1_IRQHandler) referenced from startup_stm32f103xg.o(RESET)
 <LI><a href="#[1a]">DMA1_Channel2_IRQHandler</a> from sys.o(i.DMA1_Channel2_IRQHandler) referenced from startup_stm32f103xg.o(RESET)
 <LI><a href="#[1b]">DMA1_Channel3_IRQHandler</a> from sys.o(i.DMA1_Channel3_IRQHandler) referenced from startup_stm32f103xg.o(RESET)
 <LI><a href="#[1c]">DMA1_Channel4_IRQHandler</a> from sys.o(i.DMA1_Channel4_IRQHandler) referenced from startup_stm32f103xg.o(RESET)
 <LI><a href="#[1d]">DMA1_Channel5_IRQHandler</a> from sys.o(i.DMA1_Channel5_IRQHandler) referenced from startup_stm32f103xg.o(RESET)
 <LI><a href="#[1e]">DMA1_Channel6_IRQHandler</a> from sys.o(i.DMA1_Channel6_IRQHandler) referenced from startup_stm32f103xg.o(RESET)
 <LI><a href="#[1f]">DMA1_Channel7_IRQHandler</a> from sys.o(i.DMA1_Channel7_IRQHandler) referenced from startup_stm32f103xg.o(RESET)
 <LI><a href="#[46]">DMA2_Channel1_IRQHandler</a> from sys.o(i.DMA2_Channel1_IRQHandler) referenced from startup_stm32f103xg.o(RESET)
 <LI><a href="#[47]">DMA2_Channel2_IRQHandler</a> from sys.o(i.DMA2_Channel2_IRQHandler) referenced from startup_stm32f103xg.o(RESET)
 <LI><a href="#[48]">DMA2_Channel3_IRQHandler</a> from sys.o(i.DMA2_Channel3_IRQHandler) referenced from startup_stm32f103xg.o(RESET)
 <LI><a href="#[49]">DMA2_Channel4_5_IRQHandler</a> from sys.o(i.DMA2_Channel4_5_IRQHandler) referenced from startup_stm32f103xg.o(RESET)
 <LI><a href="#[b]">DebugMon_Handler</a> from stm32f1xx_it.o(i.DebugMon_Handler) referenced from startup_stm32f103xg.o(RESET)
 <LI><a href="#[14]">EXTI0_IRQHandler</a> from sys.o(i.EXTI0_IRQHandler) referenced from startup_stm32f103xg.o(RESET)
 <LI><a href="#[36]">EXTI15_10_IRQHandler</a> from sys.o(i.EXTI15_10_IRQHandler) referenced from startup_stm32f103xg.o(RESET)
 <LI><a href="#[15]">EXTI1_IRQHandler</a> from sys.o(i.EXTI1_IRQHandler) referenced from startup_stm32f103xg.o(RESET)
 <LI><a href="#[16]">EXTI2_IRQHandler</a> from sys.o(i.EXTI2_IRQHandler) referenced from startup_stm32f103xg.o(RESET)
 <LI><a href="#[17]">EXTI3_IRQHandler</a> from sys.o(i.EXTI3_IRQHandler) referenced from startup_stm32f103xg.o(RESET)
 <LI><a href="#[18]">EXTI4_IRQHandler</a> from sys.o(i.EXTI4_IRQHandler) referenced from startup_stm32f103xg.o(RESET)
 <LI><a href="#[25]">EXTI9_5_IRQHandler</a> from sys.o(i.EXTI9_5_IRQHandler) referenced from startup_stm32f103xg.o(RESET)
 <LI><a href="#[12]">FLASH_IRQHandler</a> from startup_stm32f103xg.o(.text) referenced from startup_stm32f103xg.o(RESET)
 <LI><a href="#[3e]">FSMC_IRQHandler</a> from startup_stm32f103xg.o(.text) referenced from startup_stm32f103xg.o(RESET)
 <LI><a href="#[6]">HardFault_Handler</a> from stm32f1xx_it.o(i.HardFault_Handler) referenced from startup_stm32f103xg.o(RESET)
 <LI><a href="#[2e]">I2C1_ER_IRQHandler</a> from startup_stm32f103xg.o(.text) referenced from startup_stm32f103xg.o(RESET)
 <LI><a href="#[2d]">I2C1_EV_IRQHandler</a> from startup_stm32f103xg.o(.text) referenced from startup_stm32f103xg.o(RESET)
 <LI><a href="#[30]">I2C2_ER_IRQHandler</a> from startup_stm32f103xg.o(.text) referenced from startup_stm32f103xg.o(RESET)
 <LI><a href="#[2f]">I2C2_EV_IRQHandler</a> from startup_stm32f103xg.o(.text) referenced from startup_stm32f103xg.o(RESET)
 <LI><a href="#[7]">MemManage_Handler</a> from stm32f1xx_it.o(i.MemManage_Handler) referenced from startup_stm32f103xg.o(RESET)
 <LI><a href="#[5]">NMI_Handler</a> from stm32f1xx_it.o(i.NMI_Handler) referenced from startup_stm32f103xg.o(RESET)
 <LI><a href="#[f]">PVD_IRQHandler</a> from startup_stm32f103xg.o(.text) referenced from startup_stm32f103xg.o(RESET)
 <LI><a href="#[c]">PendSV_Handler</a> from startup_stm32f103xg.o(.text) referenced from startup_stm32f103xg.o(RESET)
 <LI><a href="#[13]">RCC_IRQHandler</a> from startup_stm32f103xg.o(.text) referenced from startup_stm32f103xg.o(RESET)
 <LI><a href="#[37]">RTC_Alarm_IRQHandler</a> from startup_stm32f103xg.o(.text) referenced from startup_stm32f103xg.o(RESET)
 <LI><a href="#[11]">RTC_IRQHandler</a> from startup_stm32f103xg.o(.text) referenced from startup_stm32f103xg.o(RESET)
 <LI><a href="#[4]">Reset_Handler</a> from startup_stm32f103xg.o(.text) referenced from startup_stm32f103xg.o(RESET)
 <LI><a href="#[3f]">SDIO_IRQHandler</a> from startup_stm32f103xg.o(.text) referenced from startup_stm32f103xg.o(RESET)
 <LI><a href="#[31]">SPI1_IRQHandler</a> from startup_stm32f103xg.o(.text) referenced from startup_stm32f103xg.o(RESET)
 <LI><a href="#[32]">SPI2_IRQHandler</a> from startup_stm32f103xg.o(.text) referenced from startup_stm32f103xg.o(RESET)
 <LI><a href="#[41]">SPI3_IRQHandler</a> from startup_stm32f103xg.o(.text) referenced from startup_stm32f103xg.o(RESET)
 <LI><a href="#[a]">SVC_Handler</a> from startup_stm32f103xg.o(.text) referenced from startup_stm32f103xg.o(RESET)
 <LI><a href="#[d]">SysTick_Handler</a> from stm32f1xx_it.o(i.SysTick_Handler) referenced from startup_stm32f103xg.o(RESET)
 <LI><a href="#[4b]">SystemInit</a> from system_stm32f1xx.o(i.SystemInit) referenced from startup_stm32f103xg.o(.text)
 <LI><a href="#[10]">TAMPER_IRQHandler</a> from startup_stm32f103xg.o(.text) referenced from startup_stm32f103xg.o(RESET)
 <LI><a href="#[26]">TIM1_BRK_TIM9_IRQHandler</a> from startup_stm32f103xg.o(.text) referenced from startup_stm32f103xg.o(RESET)
 <LI><a href="#[29]">TIM1_CC_IRQHandler</a> from startup_stm32f103xg.o(.text) referenced from startup_stm32f103xg.o(RESET)
 <LI><a href="#[28]">TIM1_TRG_COM_TIM11_IRQHandler</a> from startup_stm32f103xg.o(.text) referenced from startup_stm32f103xg.o(RESET)
 <LI><a href="#[27]">TIM1_UP_TIM10_IRQHandler</a> from startup_stm32f103xg.o(.text) referenced from startup_stm32f103xg.o(RESET)
 <LI><a href="#[2a]">TIM2_IRQHandler</a> from startup_stm32f103xg.o(.text) referenced from startup_stm32f103xg.o(RESET)
 <LI><a href="#[2b]">TIM3_IRQHandler</a> from startup_stm32f103xg.o(.text) referenced from startup_stm32f103xg.o(RESET)
 <LI><a href="#[2c]">TIM4_IRQHandler</a> from startup_stm32f103xg.o(.text) referenced from startup_stm32f103xg.o(RESET)
 <LI><a href="#[40]">TIM5_IRQHandler</a> from startup_stm32f103xg.o(.text) referenced from startup_stm32f103xg.o(RESET)
 <LI><a href="#[44]">TIM6_IRQHandler</a> from startup_stm32f103xg.o(.text) referenced from startup_stm32f103xg.o(RESET)
 <LI><a href="#[45]">TIM7_IRQHandler</a> from startup_stm32f103xg.o(.text) referenced from startup_stm32f103xg.o(RESET)
 <LI><a href="#[39]">TIM8_BRK_TIM12_IRQHandler</a> from startup_stm32f103xg.o(.text) referenced from startup_stm32f103xg.o(RESET)
 <LI><a href="#[3c]">TIM8_CC_IRQHandler</a> from startup_stm32f103xg.o(.text) referenced from startup_stm32f103xg.o(RESET)
 <LI><a href="#[3b]">TIM8_TRG_COM_TIM14_IRQHandler</a> from startup_stm32f103xg.o(.text) referenced from startup_stm32f103xg.o(RESET)
 <LI><a href="#[3a]">TIM8_UP_TIM13_IRQHandler</a> from startup_stm32f103xg.o(.text) referenced from startup_stm32f103xg.o(RESET)
 <LI><a href="#[42]">UART4_IRQHandler</a> from sys.o(i.UART4_IRQHandler) referenced from startup_stm32f103xg.o(RESET)
 <LI><a href="#[43]">UART5_IRQHandler</a> from sys.o(i.UART5_IRQHandler) referenced from startup_stm32f103xg.o(RESET)
 <LI><a href="#[33]">USART1_IRQHandler</a> from sys.o(i.USART1_IRQHandler) referenced from startup_stm32f103xg.o(RESET)
 <LI><a href="#[34]">USART2_IRQHandler</a> from sys.o(i.USART2_IRQHandler) referenced from startup_stm32f103xg.o(RESET)
 <LI><a href="#[35]">USART3_IRQHandler</a> from sys.o(i.USART3_IRQHandler) referenced from startup_stm32f103xg.o(RESET)
 <LI><a href="#[38]">USBWakeUp_IRQHandler</a> from startup_stm32f103xg.o(.text) referenced from startup_stm32f103xg.o(RESET)
 <LI><a href="#[21]">USB_HP_CAN1_TX_IRQHandler</a> from startup_stm32f103xg.o(.text) referenced from startup_stm32f103xg.o(RESET)
 <LI><a href="#[22]">USB_LP_CAN1_RX0_IRQHandler</a> from startup_stm32f103xg.o(.text) referenced from startup_stm32f103xg.o(RESET)
 <LI><a href="#[9]">UsageFault_Handler</a> from stm32f1xx_it.o(i.UsageFault_Handler) referenced from startup_stm32f103xg.o(RESET)
 <LI><a href="#[e]">WWDG_IRQHandler</a> from startup_stm32f103xg.o(.text) referenced from startup_stm32f103xg.o(RESET)
 <LI><a href="#[4d]">SPI_1_Init()</a> from sys.o(i._Z10SPI_1_Initv) referenced from sys.o(i.__sti___5_sys_c_pinMode)
 <LI><a href="#[4e]">SPI_2_Init()</a> from sys.o(i._Z10SPI_2_Initv) referenced from sys.o(i.__sti___5_sys_c_pinMode)
 <LI><a href="#[4f]">SPI_3_Init()</a> from sys.o(i._Z10SPI_3_Initv) referenced from sys.o(i.__sti___5_sys_c_pinMode)
 <LI><a href="#[50]">USARTClass::write(unsigned char)</a> from usartclass.o(i._ZN10USARTClass5writeEh) referenced from usartclass.o(.constdata__ZTV10USARTClass)
 <LI><a href="#[56]">Adafruit_GFX::drawFastHLine(short, short, short, unsigned short)</a> from adafruit_gfx.o(i._ZN12Adafruit_GFX13drawFastHLineEssst) referenced from adafruit_gfx.o(.constdata__ZTV12Adafruit_GFX)
 <LI><a href="#[55]">Adafruit_GFX::drawFastVLine(short, short, short, unsigned short)</a> from adafruit_gfx.o(i._ZN12Adafruit_GFX13drawFastVLineEssst) referenced from adafruit_gfx.o(.constdata__ZTV12Adafruit_GFX)
 <LI><a href="#[52]">Adafruit_GFX::write(unsigned char)</a> from adafruit_gfx.o(i._ZN12Adafruit_GFX5writeEh) referenced from adafruit_gfx.o(.constdata__ZTV12Adafruit_GFX)
 <LI><a href="#[52]">Adafruit_GFX::write(unsigned char)</a> from adafruit_gfx.o(i._ZN12Adafruit_GFX5writeEh) referenced from adafruit_tftlcd_8bit_stm32.o(.constdata__ZTV26Adafruit_TFTLCD_8bit_STM32)
 <LI><a href="#[54]">Adafruit_GFX::drawLine(short, short, short, short, unsigned short)</a> from adafruit_gfx.o(i._ZN12Adafruit_GFX8drawLineEsssst) referenced from adafruit_gfx.o(.constdata__ZTV12Adafruit_GFX)
 <LI><a href="#[54]">Adafruit_GFX::drawLine(short, short, short, short, unsigned short)</a> from adafruit_gfx.o(i._ZN12Adafruit_GFX8drawLineEsssst) referenced from adafruit_tftlcd_8bit_stm32.o(.constdata__ZTV26Adafruit_TFTLCD_8bit_STM32)
 <LI><a href="#[57]">Adafruit_GFX::drawRect(short, short, short, short, unsigned short)</a> from adafruit_gfx.o(i._ZN12Adafruit_GFX8drawRectEsssst) referenced from adafruit_gfx.o(.constdata__ZTV12Adafruit_GFX)
 <LI><a href="#[57]">Adafruit_GFX::drawRect(short, short, short, short, unsigned short)</a> from adafruit_gfx.o(i._ZN12Adafruit_GFX8drawRectEsssst) referenced from adafruit_tftlcd_8bit_stm32.o(.constdata__ZTV26Adafruit_TFTLCD_8bit_STM32)
 <LI><a href="#[58]">Adafruit_GFX::fillRect(short, short, short, short, unsigned short)</a> from adafruit_gfx.o(i._ZN12Adafruit_GFX8fillRectEsssst) referenced from adafruit_gfx.o(.constdata__ZTV12Adafruit_GFX)
 <LI><a href="#[5d]">Adafruit_TFTLCD_8bit_STM32::fillScreen(unsigned short)</a> from adafruit_tftlcd_8bit_stm32.o(i._ZN26Adafruit_TFTLCD_8bit_STM3210fillScreenEt) referenced from adafruit_tftlcd_8bit_stm32.o(.constdata__ZTV26Adafruit_TFTLCD_8bit_STM32)
 <LI><a href="#[5b]">Adafruit_TFTLCD_8bit_STM32::drawFastHLine(short, short, short, unsigned short)</a> from adafruit_tftlcd_8bit_stm32.o(i._ZN26Adafruit_TFTLCD_8bit_STM3213drawFastHLineEssst) referenced from adafruit_tftlcd_8bit_stm32.o(.constdata__ZTV26Adafruit_TFTLCD_8bit_STM32)
 <LI><a href="#[5a]">Adafruit_TFTLCD_8bit_STM32::drawFastVLine(short, short, short, unsigned short)</a> from adafruit_tftlcd_8bit_stm32.o(i._ZN26Adafruit_TFTLCD_8bit_STM3213drawFastVLineEssst) referenced from adafruit_tftlcd_8bit_stm32.o(.constdata__ZTV26Adafruit_TFTLCD_8bit_STM32)
 <LI><a href="#[5c]">Adafruit_TFTLCD_8bit_STM32::fillRect(short, short, short, short, unsigned short)</a> from adafruit_tftlcd_8bit_stm32.o(i._ZN26Adafruit_TFTLCD_8bit_STM328fillRectEsssst) referenced from adafruit_tftlcd_8bit_stm32.o(.constdata__ZTV26Adafruit_TFTLCD_8bit_STM32)
 <LI><a href="#[59]">Adafruit_TFTLCD_8bit_STM32::drawPixel(short, short, unsigned short)</a> from adafruit_tftlcd_8bit_stm32.o(i._ZN26Adafruit_TFTLCD_8bit_STM329drawPixelEsst) referenced from adafruit_tftlcd_8bit_stm32.o(.constdata__ZTV26Adafruit_TFTLCD_8bit_STM32)
 <LI><a href="#[51]">Print::write(const unsigned char*, unsigned)</a> from print.o(i._ZN5Print5writeEPKhj) referenced from usartclass.o(.constdata__ZTV10USARTClass)
 <LI><a href="#[51]">Print::write(const unsigned char*, unsigned)</a> from print.o(i._ZN5Print5writeEPKhj) referenced from adafruit_gfx.o(.constdata__ZTV12Adafruit_GFX)
 <LI><a href="#[51]">Print::write(const unsigned char*, unsigned)</a> from print.o(i._ZN5Print5writeEPKhj) referenced from adafruit_tftlcd_8bit_stm32.o(.constdata__ZTV26Adafruit_TFTLCD_8bit_STM32)
 <LI><a href="#[51]">Print::write(const unsigned char*, unsigned)</a> from print.o(i._ZN5Print5writeEPKhj) referenced from sdfile.o(.constdata__ZTV6SdFile)
 <LI><a href="#[5e]">SdFile::write(unsigned char)</a> from sdfile.o(i._ZN6SdFile5writeEh) referenced from sdfile.o(.constdata__ZTV6SdFile)
 <LI><a href="#[53]">__cxa_pure_virtual</a> from pure_virt.o(i.__cxa_pure_virtual) referenced from adafruit_gfx.o(.constdata__ZTV12Adafruit_GFX)
 <LI><a href="#[4c]">__main</a> from entry.o(.ARM.Collect$$$$00000000) referenced from startup_stm32f103xg.o(.text)
 <LI><a href="#[61]">__sti___5_sys_c_pinMode</a> from sys.o(i.__sti___5_sys_c_pinMode) referenced from sys.o(.init_array)
 <LI><a href="#[5f]">__sti___6_SD_cpp_426a88ba</a> from sd.o(i.__sti___6_SD_cpp_426a88ba) referenced from sd.o(.init_array)
 <LI><a href="#[60]">__sti___6_main_c_tft</a> from main.o(i.__sti___6_main_c_tft) referenced from main.o(.init_array)
 <LI><a href="#[4a]">main</a> from main.o(i.main) referenced from entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[4c]"></a>__main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry.o(.ARM.Collect$$$$00000000))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xg.o(.text)
</UL>
<P><STRONG><a name="[107]"></a>_main_stk</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry2.o(.ARM.Collect$$$$00000001))

<P><STRONG><a name="[63]"></a>_main_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[77]"></a>__main_after_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[108]"></a>_main_clock</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry7b.o(.ARM.Collect$$$$00000008))

<P><STRONG><a name="[65]"></a>_main_cpp_init$empty</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry8a.o(.ARM.Collect$$$$00000009))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = _main_cpp_init$empty &rArr; __cpp_initialize__aeabi_
</UL>
<BR>[Calls]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cpp_initialize__aeabi_
</UL>

<P><STRONG><a name="[109]"></a>_main_cpp_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry8b.o(.ARM.Collect$$$$0000000A))

<P><STRONG><a name="[10a]"></a>_main_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry9a.o(.ARM.Collect$$$$0000000B))

<P><STRONG><a name="[10b]"></a>__rt_final_cpp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry10a.o(.ARM.Collect$$$$0000000D))

<P><STRONG><a name="[10c]"></a>__rt_final_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry11a.o(.ARM.Collect$$$$0000000F))

<P><STRONG><a name="[4]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_stm32f103xg.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xg.o(RESET)
</UL>
<P><STRONG><a name="[a]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f103xg.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xg.o(RESET)
</UL>
<P><STRONG><a name="[c]"></a>PendSV_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f103xg.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xg.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>ADC1_2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xg.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_2_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_2_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xg.o(RESET)
</UL>
<P><STRONG><a name="[3d]"></a>ADC3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xg.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xg.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>CAN1_RX1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xg.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xg.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>CAN1_SCE_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xg.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xg.o(RESET)
</UL>
<P><STRONG><a name="[12]"></a>FLASH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xg.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xg.o(RESET)
</UL>
<P><STRONG><a name="[3e]"></a>FSMC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xg.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xg.o(RESET)
</UL>
<P><STRONG><a name="[2e]"></a>I2C1_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xg.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xg.o(RESET)
</UL>
<P><STRONG><a name="[2d]"></a>I2C1_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xg.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xg.o(RESET)
</UL>
<P><STRONG><a name="[30]"></a>I2C2_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xg.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xg.o(RESET)
</UL>
<P><STRONG><a name="[2f]"></a>I2C2_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xg.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xg.o(RESET)
</UL>
<P><STRONG><a name="[f]"></a>PVD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xg.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xg.o(RESET)
</UL>
<P><STRONG><a name="[13]"></a>RCC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xg.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xg.o(RESET)
</UL>
<P><STRONG><a name="[37]"></a>RTC_Alarm_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xg.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xg.o(RESET)
</UL>
<P><STRONG><a name="[11]"></a>RTC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xg.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xg.o(RESET)
</UL>
<P><STRONG><a name="[3f]"></a>SDIO_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xg.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xg.o(RESET)
</UL>
<P><STRONG><a name="[31]"></a>SPI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xg.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xg.o(RESET)
</UL>
<P><STRONG><a name="[32]"></a>SPI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xg.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xg.o(RESET)
</UL>
<P><STRONG><a name="[41]"></a>SPI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xg.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xg.o(RESET)
</UL>
<P><STRONG><a name="[10]"></a>TAMPER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xg.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xg.o(RESET)
</UL>
<P><STRONG><a name="[26]"></a>TIM1_BRK_TIM9_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xg.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xg.o(RESET)
</UL>
<P><STRONG><a name="[29]"></a>TIM1_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xg.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xg.o(RESET)
</UL>
<P><STRONG><a name="[28]"></a>TIM1_TRG_COM_TIM11_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xg.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xg.o(RESET)
</UL>
<P><STRONG><a name="[27]"></a>TIM1_UP_TIM10_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xg.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xg.o(RESET)
</UL>
<P><STRONG><a name="[2a]"></a>TIM2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xg.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xg.o(RESET)
</UL>
<P><STRONG><a name="[2b]"></a>TIM3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xg.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xg.o(RESET)
</UL>
<P><STRONG><a name="[2c]"></a>TIM4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xg.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xg.o(RESET)
</UL>
<P><STRONG><a name="[40]"></a>TIM5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xg.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xg.o(RESET)
</UL>
<P><STRONG><a name="[44]"></a>TIM6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xg.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xg.o(RESET)
</UL>
<P><STRONG><a name="[45]"></a>TIM7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xg.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xg.o(RESET)
</UL>
<P><STRONG><a name="[39]"></a>TIM8_BRK_TIM12_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xg.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xg.o(RESET)
</UL>
<P><STRONG><a name="[3c]"></a>TIM8_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xg.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xg.o(RESET)
</UL>
<P><STRONG><a name="[3b]"></a>TIM8_TRG_COM_TIM14_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xg.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xg.o(RESET)
</UL>
<P><STRONG><a name="[3a]"></a>TIM8_UP_TIM13_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xg.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xg.o(RESET)
</UL>
<P><STRONG><a name="[38]"></a>USBWakeUp_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xg.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xg.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>USB_HP_CAN1_TX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xg.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xg.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>USB_LP_CAN1_RX0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xg.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xg.o(RESET)
</UL>
<P><STRONG><a name="[e]"></a>WWDG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xg.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xg.o(RESET)
</UL>
<P><STRONG><a name="[67]"></a>__aeabi_memset</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset$wrapper
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>

<P><STRONG><a name="[10d]"></a>__aeabi_memset4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[10e]"></a>__aeabi_memset8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[66]"></a>__aeabi_memclr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[8c]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RingBuffer::RingBuffer()
</UL>

<P><STRONG><a name="[10f]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[68]"></a>_memset$wrapper</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[e8]"></a>strlen</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, strlen.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print::write(const char*)
</UL>

<P><STRONG><a name="[62]"></a>__cpp_initialize__aeabi_</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, cpp_init.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __cpp_initialize__aeabi_
</UL>
<BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_cpp_init$empty
</UL>

<P><STRONG><a name="[69]"></a>__aeabi_dadd</STRONG> (Thumb, 322 bytes, Stack size 48 bytes, dadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_lasr
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print::printFloat(double, unsigned char)
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
</UL>

<P><STRONG><a name="[6e]"></a>__aeabi_dsub</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dadd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[6f]"></a>__aeabi_drsub</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __aeabi_drsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print::printFloat(double, unsigned char)
</UL>

<P><STRONG><a name="[70]"></a>__aeabi_dmul</STRONG> (Thumb, 228 bytes, Stack size 48 bytes, dmul.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print::printFloat(double, unsigned char)
</UL>

<P><STRONG><a name="[71]"></a>__aeabi_ddiv</STRONG> (Thumb, 222 bytes, Stack size 32 bytes, ddiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __aeabi_ddiv &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print::printFloat(double, unsigned char)
</UL>

<P><STRONG><a name="[72]"></a>__aeabi_i2d</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, dflti.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = __aeabi_i2d &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print::printFloat(double, unsigned char)
</UL>

<P><STRONG><a name="[73]"></a>__aeabi_ui2d</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, dfltui.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = __aeabi_ui2d &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print::printFloat(double, unsigned char)
</UL>

<P><STRONG><a name="[74]"></a>__aeabi_d2iz</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, dfixi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_d2iz
</UL>
<BR>[Calls]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
</UL>
<BR>[Called By]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print::printFloat(double, unsigned char)
</UL>

<P><STRONG><a name="[76]"></a>__aeabi_d2uiz</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, dfixui.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_d2uiz
</UL>
<BR>[Calls]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
</UL>
<BR>[Called By]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print::printFloat(double, unsigned char)
</UL>

<P><STRONG><a name="[110]"></a>__aeabi_cdcmpeq</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, cdcmple.o(.text), UNUSED)

<P><STRONG><a name="[dd]"></a>__aeabi_cdcmple</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, cdcmple.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print::printFloat(double, unsigned char)
</UL>

<P><STRONG><a name="[dc]"></a>__aeabi_cdrcmple</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, cdrcmple.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print::printFloat(double, unsigned char)
</UL>

<P><STRONG><a name="[6a]"></a>__aeabi_llsl</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, llshl.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>

<P><STRONG><a name="[111]"></a>_ll_shift_l</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llshl.o(.text), UNUSED)

<P><STRONG><a name="[75]"></a>__aeabi_llsr</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, llushr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>

<P><STRONG><a name="[112]"></a>_ll_ushift_r</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llushr.o(.text), UNUSED)

<P><STRONG><a name="[6b]"></a>__aeabi_lasr</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, llsshr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[113]"></a>_ll_sshift_r</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llsshr.o(.text), UNUSED)

<P><STRONG><a name="[114]"></a>__I$use$fp</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, iusefp.o(.text), UNUSED)

<P><STRONG><a name="[102]"></a>__rt_SIGPVFN</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, cpp_signal.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_pure_virtual
</UL>

<P><STRONG><a name="[6d]"></a>_double_round</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, depilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>

<P><STRONG><a name="[6c]"></a>_double_epilogue</STRONG> (Thumb, 156 bytes, Stack size 32 bytes, depilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[64]"></a>__scatterload</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, init.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main_after_scatterload
</UL>
<BR>[Called By]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_scatterload
</UL>

<P><STRONG><a name="[115]"></a>__scatterload_rt2</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, init.o(.text), UNUSED)

<P><STRONG><a name="[8]"></a>BusFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f1xx_it.o(i.BusFault_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xg.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>DMA1_Channel1_IRQHandler</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, sys.o(i.DMA1_Channel1_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xg.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>DMA1_Channel2_IRQHandler</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, sys.o(i.DMA1_Channel2_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xg.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>DMA1_Channel3_IRQHandler</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, sys.o(i.DMA1_Channel3_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xg.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>DMA1_Channel4_IRQHandler</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, sys.o(i.DMA1_Channel4_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xg.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>DMA1_Channel5_IRQHandler</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, sys.o(i.DMA1_Channel5_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xg.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>DMA1_Channel6_IRQHandler</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, sys.o(i.DMA1_Channel6_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xg.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>DMA1_Channel7_IRQHandler</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, sys.o(i.DMA1_Channel7_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xg.o(RESET)
</UL>
<P><STRONG><a name="[46]"></a>DMA2_Channel1_IRQHandler</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, sys.o(i.DMA2_Channel1_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xg.o(RESET)
</UL>
<P><STRONG><a name="[47]"></a>DMA2_Channel2_IRQHandler</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, sys.o(i.DMA2_Channel2_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xg.o(RESET)
</UL>
<P><STRONG><a name="[48]"></a>DMA2_Channel3_IRQHandler</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, sys.o(i.DMA2_Channel3_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xg.o(RESET)
</UL>
<P><STRONG><a name="[49]"></a>DMA2_Channel4_5_IRQHandler</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, sys.o(i.DMA2_Channel4_5_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xg.o(RESET)
</UL>
<P><STRONG><a name="[b]"></a>DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f1xx_it.o(i.DebugMon_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xg.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>EXTI0_IRQHandler</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, sys.o(i.EXTI0_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = EXTI0_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_EXTI_Callback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xg.o(RESET)
</UL>
<P><STRONG><a name="[36]"></a>EXTI15_10_IRQHandler</STRONG> (Thumb, 144 bytes, Stack size 16 bytes, sys.o(i.EXTI15_10_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = EXTI15_10_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_EXTI_Callback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xg.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>EXTI1_IRQHandler</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, sys.o(i.EXTI1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = EXTI1_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_EXTI_Callback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xg.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>EXTI2_IRQHandler</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, sys.o(i.EXTI2_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = EXTI2_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_EXTI_Callback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xg.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>EXTI3_IRQHandler</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, sys.o(i.EXTI3_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = EXTI3_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_EXTI_Callback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xg.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>EXTI4_IRQHandler</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, sys.o(i.EXTI4_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = EXTI4_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_EXTI_Callback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xg.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>EXTI9_5_IRQHandler</STRONG> (Thumb, 118 bytes, Stack size 16 bytes, sys.o(i.EXTI9_5_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = EXTI9_5_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_EXTI_Callback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xg.o(RESET)
</UL>
<P><STRONG><a name="[78]"></a>HAL_GPIO_EXTI_Callback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f1xx_hal_gpio.o(i.HAL_GPIO_EXTI_Callback))
<BR><BR>[Called By]<UL><LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI9_5_IRQHandler
<LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI4_IRQHandler
<LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI3_IRQHandler
<LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI2_IRQHandler
<LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI1_IRQHandler
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI15_10_IRQHandler
<LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI0_IRQHandler
</UL>

<P><STRONG><a name="[106]"></a>HAL_GPIO_Init</STRONG> (Thumb, 462 bytes, Stack size 40 bytes, stm32f1xx_hal_gpio.o(i.HAL_GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pinMode
</UL>

<P><STRONG><a name="[81]"></a>HAL_GetTick</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f1xx_hal.o(i.HAL_GetTick))
<BR><BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;micros
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;millis
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_PeriphCLKConfig
</UL>

<P><STRONG><a name="[8a]"></a>HAL_IncTick</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f1xx_hal.o(i.HAL_IncTick))
<BR><BR>[Called By]<UL><LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[79]"></a>HAL_Init</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, stm32f1xx_hal.o(i.HAL_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = HAL_Init &rArr; HAL_InitTick &rArr; HAL_NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriorityGrouping
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[7b]"></a>HAL_InitTick</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, stm32f1xx_hal.o(i.HAL_InitTick))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = HAL_InitTick &rArr; HAL_NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SYSTICK_Config
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
</UL>

<P><STRONG><a name="[7c]"></a>HAL_MspInit</STRONG> (Thumb, 86 bytes, Stack size 8 bytes, stm32f1xx_hal_msp.o(i.HAL_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_MspInit &rArr; HAL_NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriorityGrouping
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
</UL>

<P><STRONG><a name="[b8]"></a>HAL_NVIC_ClearPendingIRQ</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f1xx_hal_cortex.o(i.HAL_NVIC_ClearPendingIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USARTClass::begin(unsigned)
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_INT_ClearAllFlags(USART_TypeDef*, IRQn_Type)
</UL>

<P><STRONG><a name="[cd]"></a>HAL_NVIC_DisableIRQ</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f1xx_hal_cortex.o(i.HAL_NVIC_DisableIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USARTClass::begin(unsigned)
</UL>

<P><STRONG><a name="[ce]"></a>HAL_NVIC_EnableIRQ</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f1xx_hal_cortex.o(i.HAL_NVIC_EnableIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USARTClass::begin(unsigned)
</UL>

<P><STRONG><a name="[7e]"></a>HAL_NVIC_SetPriority</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, stm32f1xx_hal_cortex.o(i.HAL_NVIC_SetPriority))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_SetPriority(IRQn_Type, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USARTClass::begin(unsigned)
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MspInit
</UL>

<P><STRONG><a name="[7a]"></a>HAL_NVIC_SetPriorityGrouping</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f1xx_hal_cortex.o(i.HAL_NVIC_SetPriorityGrouping))
<BR><BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MspInit
</UL>

<P><STRONG><a name="[80]"></a>HAL_RCCEx_PeriphCLKConfig</STRONG> (Thumb, 224 bytes, Stack size 32 bytes, stm32f1xx_hal_rcc_ex.o(i.HAL_RCCEx_PeriphCLKConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = HAL_RCCEx_PeriphCLKConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[82]"></a>HAL_RCC_ClockConfig</STRONG> (Thumb, 280 bytes, Stack size 32 bytes, stm32f1xx_hal_rcc.o(i.HAL_RCC_ClockConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = HAL_RCC_ClockConfig &rArr; HAL_InitTick &rArr; HAL_NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetSysClockFreq
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[a6]"></a>HAL_RCC_GetPCLK1Freq</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f1xx_hal_rcc.o(i.HAL_RCC_GetPCLK1Freq))
<BR><BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig(__UART_HandleTypeDef*)
</UL>

<P><STRONG><a name="[a5]"></a>HAL_RCC_GetPCLK2Freq</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f1xx_hal_rcc.o(i.HAL_RCC_GetPCLK2Freq))
<BR><BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig(__UART_HandleTypeDef*)
</UL>

<P><STRONG><a name="[83]"></a>HAL_RCC_GetSysClockFreq</STRONG> (Thumb, 76 bytes, Stack size 20 bytes, stm32f1xx_hal_rcc.o(i.HAL_RCC_GetSysClockFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = HAL_RCC_GetSysClockFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
</UL>

<P><STRONG><a name="[84]"></a>HAL_RCC_OscConfig</STRONG> (Thumb, 778 bytes, Stack size 40 bytes, stm32f1xx_hal_rcc.o(i.HAL_RCC_OscConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = HAL_RCC_OscConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[86]"></a>HAL_SYSTICK_Callback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, main.o(i.HAL_SYSTICK_Callback))
<BR><BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SYSTICK_IRQHandler
</UL>

<P><STRONG><a name="[7d]"></a>HAL_SYSTICK_Config</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, stm32f1xx_hal_cortex.o(i.HAL_SYSTICK_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_SYSTICK_Config
</UL>
<BR>[Calls]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_SetPriority(IRQn_Type, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
</UL>

<P><STRONG><a name="[85]"></a>HAL_SYSTICK_IRQHandler</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, stm32f1xx_hal_cortex.o(i.HAL_SYSTICK_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_SYSTICK_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SYSTICK_Callback
</UL>
<BR>[Called By]<UL><LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[87]"></a>HAL_UART_Init</STRONG> (Thumb, 98 bytes, Stack size 16 bytes, stm32f1xx_hal_uart.o(i.HAL_UART_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = HAL_UART_Init &rArr; UART_SetConfig(__UART_HandleTypeDef*)
</UL>
<BR>[Calls]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig(__UART_HandleTypeDef*)
</UL>
<BR>[Called By]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USARTClass::begin(unsigned)
</UL>

<P><STRONG><a name="[88]"></a>HAL_UART_MspInit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f1xx_hal_uart.o(i.HAL_UART_MspInit))
<BR><BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
</UL>

<P><STRONG><a name="[6]"></a>HardFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f1xx_it.o(i.HardFault_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xg.o(RESET)
</UL>
<P><STRONG><a name="[7]"></a>MemManage_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f1xx_it.o(i.MemManage_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xg.o(RESET)
</UL>
<P><STRONG><a name="[5]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f1xx_it.o(i.NMI_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xg.o(RESET)
</UL>
<P><STRONG><a name="[d]"></a>SysTick_Handler</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, stm32f1xx_it.o(i.SysTick_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SysTick_Handler &rArr; HAL_SYSTICK_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SYSTICK_IRQHandler
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_IncTick
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xg.o(RESET)
</UL>
<P><STRONG><a name="[8b]"></a>SystemClock_Config</STRONG> (Thumb, 120 bytes, Stack size 96 bytes, main.o(i.SystemClock_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = SystemClock_Config &rArr; HAL_RCC_ClockConfig &rArr; HAL_InitTick &rArr; HAL_NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_PeriphCLKConfig
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[4b]"></a>SystemInit</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, system_stm32f1xx.o(i.SystemInit))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xg.o(.text)
</UL>
<P><STRONG><a name="[42]"></a>UART4_IRQHandler</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, sys.o(i.UART4_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = UART4_IRQHandler &rArr; USARTClass::IrqHandler() &rArr; RingBuffer::store_char(unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USARTClass::IrqHandler()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xg.o(RESET)
</UL>
<P><STRONG><a name="[43]"></a>UART5_IRQHandler</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, sys.o(i.UART5_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = UART5_IRQHandler &rArr; USARTClass::IrqHandler() &rArr; RingBuffer::store_char(unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USARTClass::IrqHandler()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xg.o(RESET)
</UL>
<P><STRONG><a name="[33]"></a>USART1_IRQHandler</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, sys.o(i.USART1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = USART1_IRQHandler &rArr; USARTClass::IrqHandler() &rArr; RingBuffer::store_char(unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USARTClass::IrqHandler()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xg.o(RESET)
</UL>
<P><STRONG><a name="[34]"></a>USART2_IRQHandler</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, sys.o(i.USART2_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = USART2_IRQHandler &rArr; USARTClass::IrqHandler() &rArr; RingBuffer::store_char(unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USARTClass::IrqHandler()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xg.o(RESET)
</UL>
<P><STRONG><a name="[35]"></a>USART3_IRQHandler</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, sys.o(i.USART3_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = USART3_IRQHandler &rArr; USARTClass::IrqHandler() &rArr; RingBuffer::store_char(unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USARTClass::IrqHandler()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xg.o(RESET)
</UL>
<P><STRONG><a name="[9]"></a>UsageFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f1xx_it.o(i.UsageFault_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xg.o(RESET)
</UL>
<P><STRONG><a name="[92]"></a>testCircles(unsigned char, unsigned short)</STRONG> (Thumb, 88 bytes, Stack size 48 bytes, main.o(i._Z11testCirclesht))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = testCircles(unsigned char, unsigned short) &rArr; Adafruit_GFX::drawCircle(short, short, short, unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;micros
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adafruit_GFX::height()
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adafruit_GFX::width()
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adafruit_GFX::drawCircle(short, short, short, unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;doTest()
</UL>

<P><STRONG><a name="[90]"></a>writeCommand(unsigned short)</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, adafruit_tftlcd_8bit_stm32.o(i._Z12writeCommandt))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = writeCommand(unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_table(const unsigned char*, short)
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adafruit_TFTLCD_8bit_STM32::flood(unsigned short, unsigned)
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeRegister32(unsigned short, unsigned)
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeRegister16(unsigned short, unsigned short)
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeRegister8(unsigned short, unsigned char)
</UL>

<P><STRONG><a name="[97]"></a>hx8347g_begin()</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, hx8347g.o(i._Z13hx8347g_beginv))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = hx8347g_begin() &rArr; hx8347g_setRotation(unsigned char) &rArr; hx8347g_setLR() &rArr; writeRegisterPair(unsigned short, unsigned short, unsigned short) &rArr; writeRegister8(unsigned short, unsigned char) &rArr; writeCommand(unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hx8347g_setRotation(unsigned char)
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hx8347g_setLR()
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeRegister8(unsigned short, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adafruit_TFTLCD_8bit_STM32::begin(unsigned short)
</UL>

<P><STRONG><a name="[9a]"></a>hx8347g_setLR()</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, hx8347g.o(i._Z13hx8347g_setLRv))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = hx8347g_setLR() &rArr; writeRegisterPair(unsigned short, unsigned short, unsigned short) &rArr; writeRegister8(unsigned short, unsigned char) &rArr; writeCommand(unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeRegisterPair(unsigned short, unsigned short, unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hx8347g_setRotation(unsigned char)
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hx8347g_begin()
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adafruit_TFTLCD_8bit_STM32::drawFastVLine(short, short, short, unsigned short)
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adafruit_TFTLCD_8bit_STM32::drawFastHLine(short, short, short, unsigned short)
</UL>

<P><STRONG><a name="[9c]"></a>hx8357x_begin()</STRONG> (Thumb, 118 bytes, Stack size 32 bytes, hx8357x.o(i._Z13hx8357x_beginv))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = hx8357x_begin() &rArr; delay &rArr; HAL_RCC_GetSysClockFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay
</UL>
<BR>[Called By]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adafruit_TFTLCD_8bit_STM32::begin(unsigned short)
</UL>

<P><STRONG><a name="[9d]"></a>ili932x_begin()</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, ili932x.o(i._Z13ili932x_beginv))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = ili932x_begin() &rArr; ili932x_setRotation(unsigned char) &rArr; ili932x_setAddrWindow(int, int, int, int) &rArr; writeRegister16(unsigned short, unsigned short) &rArr; writeCommand(unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ili932x_setRotation(unsigned char)
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeRegister16(unsigned short, unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adafruit_TFTLCD_8bit_STM32::begin(unsigned short)
</UL>

<P><STRONG><a name="[a0]"></a>ili9341_begin()</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, ili9341.o(i._Z13ili9341_beginv))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = ili9341_begin() &rArr; init_table(const unsigned char*, short) &rArr; delay &rArr; HAL_RCC_GetSysClockFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_table(const unsigned char*, short)
</UL>
<BR>[Called By]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adafruit_TFTLCD_8bit_STM32::begin(unsigned short)
</UL>

<P><STRONG><a name="[a1]"></a>testFastLines(unsigned short, unsigned short)</STRONG> (Thumb, 100 bytes, Stack size 32 bytes, main.o(i._Z13testFastLinestt))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = testFastLines(unsigned short, unsigned short) &rArr; Adafruit_TFTLCD_8bit_STM32::drawFastVLine(short, short, short, unsigned short) &rArr; Adafruit_TFTLCD_8bit_STM32::setAddrWindow(short, short, short, short) &rArr; hx8347g_setAddrWindow(int, int, int, int) &rArr; writeRegisterPair(unsigned short, unsigned short, unsigned short) &rArr; writeRegister8(unsigned short, unsigned char) &rArr; writeCommand(unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;micros
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adafruit_GFX::height()
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adafruit_GFX::width()
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adafruit_TFTLCD_8bit_STM32::drawFastVLine(short, short, short, unsigned short)
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adafruit_TFTLCD_8bit_STM32::drawFastHLine(short, short, short, unsigned short)
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adafruit_TFTLCD_8bit_STM32::fillScreen(unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;doTest()
</UL>

<P><STRONG><a name="[a2]"></a>testTriangles()</STRONG> (Thumb, 128 bytes, Stack size 40 bytes, main.o(i._Z13testTrianglesv))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = testTriangles() &rArr; Adafruit_TFTLCD_8bit_STM32::fillScreen(unsigned short) &rArr; Adafruit_TFTLCD_8bit_STM32::setAddrWindow(short, short, short, short) &rArr; hx8347g_setAddrWindow(int, int, int, int) &rArr; writeRegisterPair(unsigned short, unsigned short, unsigned short) &rArr; writeRegister8(unsigned short, unsigned char) &rArr; writeCommand(unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;micros
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adafruit_GFX::height()
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adafruit_GFX::width()
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adafruit_GFX::drawTriangle(short, short, short, short, short, short, unsigned short)
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adafruit_TFTLCD_8bit_STM32::color565(unsigned char, unsigned char, unsigned char)
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adafruit_TFTLCD_8bit_STM32::fillScreen(unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;doTest()
</UL>

<P><STRONG><a name="[a7]"></a>testFillScreen()</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, main.o(i._Z14testFillScreenv))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = testFillScreen() &rArr; Adafruit_TFTLCD_8bit_STM32::fillScreen(unsigned short) &rArr; Adafruit_TFTLCD_8bit_STM32::setAddrWindow(short, short, short, short) &rArr; hx8347g_setAddrWindow(int, int, int, int) &rArr; writeRegisterPair(unsigned short, unsigned short, unsigned short) &rArr; writeRegister8(unsigned short, unsigned char) &rArr; writeCommand(unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;micros
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adafruit_TFTLCD_8bit_STM32::fillScreen(unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;doTest()
</UL>

<P><STRONG><a name="[a8]"></a>testRoundRects()</STRONG> (Thumb, 158 bytes, Stack size 40 bytes, main.o(i._Z14testRoundRectsv))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = testRoundRects() &rArr; Adafruit_GFX::drawRoundRect(short, short, short, short, short, unsigned short) &rArr; Adafruit_GFX::drawCircleHelper(short, short, short, unsigned char, unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;micros
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adafruit_GFX::height()
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adafruit_GFX::width()
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adafruit_GFX::drawRoundRect(short, short, short, short, short, unsigned short)
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adafruit_TFTLCD_8bit_STM32::color565(unsigned char, unsigned char, unsigned char)
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adafruit_TFTLCD_8bit_STM32::fillScreen(unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;doTest()
</UL>

<P><STRONG><a name="[98]"></a>writeRegister8(unsigned short, unsigned char)</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, adafruit_tftlcd_8bit_stm32.o(i._Z14writeRegister8th))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = writeRegister8(unsigned short, unsigned char) &rArr; writeCommand(unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeCommand(unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hx8347g_setRotation(unsigned char)
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hx8347g_begin()
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adafruit_TFTLCD_8bit_STM32::drawPixel(short, short, unsigned short)
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adafruit_TFTLCD_8bit_STM32::setRotation(unsigned char)
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeRegisterPair(unsigned short, unsigned short, unsigned short)
</UL>

<P><STRONG><a name="[aa]"></a>testFilledRects(unsigned short, unsigned short)</STRONG> (Thumb, 166 bytes, Stack size 56 bytes, main.o(i._Z15testFilledRectstt))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = testFilledRects(unsigned short, unsigned short) &rArr; Adafruit_TFTLCD_8bit_STM32::fillRect(short, short, short, short, unsigned short) &rArr; Adafruit_TFTLCD_8bit_STM32::setAddrWindow(short, short, short, short) &rArr; hx8347g_setAddrWindow(int, int, int, int) &rArr; writeRegisterPair(unsigned short, unsigned short, unsigned short) &rArr; writeRegister8(unsigned short, unsigned char) &rArr; writeCommand(unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;micros
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adafruit_GFX::drawRect(short, short, short, short, unsigned short)
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adafruit_GFX::height()
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adafruit_GFX::width()
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adafruit_TFTLCD_8bit_STM32::fillRect(short, short, short, short, unsigned short)
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adafruit_TFTLCD_8bit_STM32::fillScreen(unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;doTest()
</UL>

<P><STRONG><a name="[9e]"></a>writeRegister16(unsigned short, unsigned short)</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, adafruit_tftlcd_8bit_stm32.o(i._Z15writeRegister16tt))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = writeRegister16(unsigned short, unsigned short) &rArr; writeCommand(unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeCommand(unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ili932x_setAddrWindow(int, int, int, int)
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ili932x_setRotation(unsigned char)
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ili932x_fillScreen(unsigned short)
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ili932x_drawPixel(short, short, unsigned short)
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ili932x_begin()
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adafruit_TFTLCD_8bit_STM32::drawPixel(short, short, unsigned short)
</UL>

<P><STRONG><a name="[ab]"></a>writeRegister32(unsigned short, unsigned)</STRONG> (Thumb, 80 bytes, Stack size 8 bytes, adafruit_tftlcd_8bit_stm32.o(i._Z15writeRegister32tj))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = writeRegister32(unsigned short, unsigned) &rArr; writeCommand(unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeCommand(unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ili9341_setAddrWindow(short, short, short, short)
</UL>

<P><STRONG><a name="[ac]"></a>ili932x_drawPixel(short, short, unsigned short)</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, ili932x.o(i._Z17ili932x_drawPixelsst))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = ili932x_drawPixel(short, short, unsigned short) &rArr; writeRegister16(unsigned short, unsigned short) &rArr; writeCommand(unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeRegister16(unsigned short, unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adafruit_TFTLCD_8bit_STM32::drawPixel(short, short, unsigned short)
</UL>

<P><STRONG><a name="[ad]"></a>testFilledCircles(unsigned char, unsigned short)</STRONG> (Thumb, 92 bytes, Stack size 48 bytes, main.o(i._Z17testFilledCirclesht))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = testFilledCircles(unsigned char, unsigned short) &rArr; Adafruit_GFX::fillCircle(short, short, short, unsigned short) &rArr; Adafruit_GFX::fillCircleHelper(short, short, short, unsigned char, short, unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;micros
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adafruit_GFX::height()
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adafruit_GFX::width()
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adafruit_GFX::fillCircle(short, short, short, unsigned short)
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adafruit_TFTLCD_8bit_STM32::fillScreen(unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;doTest()
</UL>

<P><STRONG><a name="[9b]"></a>writeRegisterPair(unsigned short, unsigned short, unsigned short)</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, adafruit_tftlcd_8bit_stm32.o(i._Z17writeRegisterPairttt))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = writeRegisterPair(unsigned short, unsigned short, unsigned short) &rArr; writeRegister8(unsigned short, unsigned char) &rArr; writeCommand(unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeRegister8(unsigned short, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hx8347g_setAddrWindow(int, int, int, int)
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hx8347g_setLR()
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adafruit_TFTLCD_8bit_STM32::drawPixel(short, short, unsigned short)
</UL>

<P><STRONG><a name="[af]"></a>ili932x_fillScreen(unsigned short)</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, ili932x.o(i._Z18ili932x_fillScreent))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ili932x_fillScreen(unsigned short) &rArr; writeRegister16(unsigned short, unsigned short) &rArr; writeCommand(unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeRegister16(unsigned short, unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adafruit_TFTLCD_8bit_STM32::fillScreen(unsigned short)
</UL>

<P><STRONG><a name="[99]"></a>hx8347g_setRotation(unsigned char)</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, hx8347g.o(i._Z19hx8347g_setRotationh))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = hx8347g_setRotation(unsigned char) &rArr; hx8347g_setLR() &rArr; writeRegisterPair(unsigned short, unsigned short, unsigned short) &rArr; writeRegister8(unsigned short, unsigned char) &rArr; writeCommand(unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hx8347g_setLR()
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeRegister8(unsigned short, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hx8347g_begin()
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adafruit_TFTLCD_8bit_STM32::setRotation(unsigned char)
</UL>

<P><STRONG><a name="[9f]"></a>ili932x_setRotation(unsigned char)</STRONG> (Thumb, 84 bytes, Stack size 8 bytes, ili932x.o(i._Z19ili932x_setRotationh))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = ili932x_setRotation(unsigned char) &rArr; ili932x_setAddrWindow(int, int, int, int) &rArr; writeRegister16(unsigned short, unsigned short) &rArr; writeCommand(unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ili932x_setAddrWindow(int, int, int, int)
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeRegister16(unsigned short, unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ili932x_begin()
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adafruit_TFTLCD_8bit_STM32::setRotation(unsigned char)
</UL>

<P><STRONG><a name="[b1]"></a>testFilledTriangles()</STRONG> (Thumb, 182 bytes, Stack size 64 bytes, main.o(i._Z19testFilledTrianglesv))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = testFilledTriangles() &rArr; Adafruit_GFX::fillTriangle(short, short, short, short, short, short, unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;micros
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adafruit_GFX::height()
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adafruit_GFX::width()
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adafruit_GFX::fillTriangle(short, short, short, short, short, short, unsigned short)
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adafruit_GFX::drawTriangle(short, short, short, short, short, short, unsigned short)
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adafruit_TFTLCD_8bit_STM32::color565(unsigned char, unsigned char, unsigned char)
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adafruit_TFTLCD_8bit_STM32::fillScreen(unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;doTest()
</UL>

<P><STRONG><a name="[b3]"></a>testFilledRoundRects()</STRONG> (Thumb, 152 bytes, Stack size 40 bytes, main.o(i._Z20testFilledRoundRectsv))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = testFilledRoundRects() &rArr; Adafruit_GFX::fillRoundRect(short, short, short, short, short, unsigned short) &rArr; Adafruit_GFX::fillCircleHelper(short, short, short, unsigned char, short, unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;micros
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adafruit_GFX::height()
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adafruit_GFX::width()
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adafruit_GFX::fillRoundRect(short, short, short, short, short, unsigned short)
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adafruit_TFTLCD_8bit_STM32::color565(unsigned char, unsigned char, unsigned char)
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adafruit_TFTLCD_8bit_STM32::fillScreen(unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;doTest()
</UL>

<P><STRONG><a name="[b5]"></a>hx8347g_setAddrWindow(int, int, int, int)</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, hx8347g.o(i._Z21hx8347g_setAddrWindowiiii))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = hx8347g_setAddrWindow(int, int, int, int) &rArr; writeRegisterPair(unsigned short, unsigned short, unsigned short) &rArr; writeRegister8(unsigned short, unsigned char) &rArr; writeCommand(unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeRegisterPair(unsigned short, unsigned short, unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adafruit_TFTLCD_8bit_STM32::setAddrWindow(short, short, short, short)
</UL>

<P><STRONG><a name="[b0]"></a>ili932x_setAddrWindow(int, int, int, int)</STRONG> (Thumb, 154 bytes, Stack size 24 bytes, ili932x.o(i._Z21ili932x_setAddrWindowiiii))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = ili932x_setAddrWindow(int, int, int, int) &rArr; writeRegister16(unsigned short, unsigned short) &rArr; writeCommand(unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeRegister16(unsigned short, unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ili932x_setRotation(unsigned char)
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adafruit_TFTLCD_8bit_STM32::setAddrWindow(short, short, short, short)
</UL>

<P><STRONG><a name="[b6]"></a>ili9341_setAddrWindow(short, short, short, short)</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, ili9341.o(i._Z21ili9341_setAddrWindowssss))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = ili9341_setAddrWindow(short, short, short, short) &rArr; writeRegister32(unsigned short, unsigned) &rArr; writeCommand(unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeRegister32(unsigned short, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adafruit_TFTLCD_8bit_STM32::setAddrWindow(short, short, short, short)
</UL>

<P><STRONG><a name="[b9]"></a>doTest()</STRONG> (Thumb, 388 bytes, Stack size 16 bytes, main.o(i._Z6doTestv))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = doTest() &rArr; testText() &rArr; Print::println(double, int) &rArr; Print::print(double, int) &rArr; Print::printFloat(double, unsigned char) &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print::println(unsigned long, int)
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print::println(const __FlashStringHelper*)
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print::print(const __FlashStringHelper*)
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;testRects(unsigned short)
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;testLines(unsigned short)
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;testText()
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;testFilledRoundRects()
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;testFilledTriangles()
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;testFilledCircles(unsigned char, unsigned short)
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;testFilledRects(unsigned short, unsigned short)
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;testRoundRects()
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;testFillScreen()
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;testTriangles()
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;testFastLines(unsigned short, unsigned short)
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;testCircles(unsigned char, unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[bd]"></a>testText()</STRONG> (Thumb, 232 bytes, Stack size 16 bytes, main.o(i._Z8testTextv))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = testText() &rArr; Print::println(double, int) &rArr; Print::print(double, int) &rArr; Print::printFloat(double, unsigned char) &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;micros
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adafruit_GFX::setCursor(short, short)
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adafruit_GFX::setTextColor(unsigned short)
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adafruit_GFX::setTextSize(unsigned char)
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print::println()
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print::println(unsigned, int)
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print::println(double, int)
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print::println(const char*)
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adafruit_TFTLCD_8bit_STM32::fillScreen(unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;doTest()
</UL>

<P><STRONG><a name="[be]"></a>testLines(unsigned short)</STRONG> (Thumb, 400 bytes, Stack size 48 bytes, main.o(i._Z9testLinest))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = testLines(unsigned short) &rArr; Adafruit_TFTLCD_8bit_STM32::fillScreen(unsigned short) &rArr; Adafruit_TFTLCD_8bit_STM32::setAddrWindow(short, short, short, short) &rArr; hx8347g_setAddrWindow(int, int, int, int) &rArr; writeRegisterPair(unsigned short, unsigned short, unsigned short) &rArr; writeRegister8(unsigned short, unsigned char) &rArr; writeCommand(unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;micros
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adafruit_GFX::drawLine(short, short, short, short, unsigned short)
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adafruit_GFX::height()
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adafruit_GFX::width()
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adafruit_TFTLCD_8bit_STM32::fillScreen(unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;doTest()
</UL>

<P><STRONG><a name="[bf]"></a>testRects(unsigned short)</STRONG> (Thumb, 128 bytes, Stack size 40 bytes, main.o(i._Z9testRectst))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = testRects(unsigned short) &rArr; Adafruit_TFTLCD_8bit_STM32::fillScreen(unsigned short) &rArr; Adafruit_TFTLCD_8bit_STM32::setAddrWindow(short, short, short, short) &rArr; hx8347g_setAddrWindow(int, int, int, int) &rArr; writeRegisterPair(unsigned short, unsigned short, unsigned short) &rArr; writeRegister8(unsigned short, unsigned char) &rArr; writeCommand(unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;micros
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adafruit_GFX::drawRect(short, short, short, short, unsigned short)
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adafruit_GFX::height()
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adafruit_GFX::width()
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adafruit_TFTLCD_8bit_STM32::fillScreen(unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;doTest()
</UL>

<P><STRONG><a name="[cb]"></a>RingBuffer::store_char(unsigned char)</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, ringbuffer.o(i._ZN10RingBuffer10store_charEh))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = RingBuffer::store_char(unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USARTClass::IrqHandler()
</UL>

<P><STRONG><a name="[ca]"></a>RingBuffer::RingBuffer()</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, ringbuffer.o(i._ZN10RingBufferC1Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = RingBuffer::RingBuffer()
</UL>
<BR>[Calls]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___5_sys_c_pinMode
</UL>

<P><STRONG><a name="[116]"></a>RingBuffer::RingBuffer__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, ringbuffer.o(i._ZN10RingBufferC1Ev), UNUSED)

<P><STRONG><a name="[8d]"></a>USARTClass::IrqHandler()</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, usartclass.o(i._ZN10USARTClass10IrqHandlerEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = USARTClass::IrqHandler() &rArr; RingBuffer::store_char(unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RingBuffer::store_char(unsigned char)
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_INT_ClearAllFlags(USART_TypeDef*, IRQn_Type)
</UL>
<BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_IRQHandler
<LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_IRQHandler
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART5_IRQHandler
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART4_IRQHandler
</UL>

<P><STRONG><a name="[cc]"></a>USARTClass::begin(unsigned)</STRONG> (Thumb, 442 bytes, Stack size 88 bytes, usartclass.o(i._ZN10USARTClass5beginEj))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = USARTClass::begin(unsigned) &rArr; pinMode &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pinMode
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_DisableIRQ
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_ClearPendingIRQ
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[50]"></a>USARTClass::write(unsigned char)</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, usartclass.o(i._ZN10USARTClass5writeEh))
<BR>[Address Reference Count : 1]<UL><LI> usartclass.o(.constdata__ZTV10USARTClass)
</UL>
<P><STRONG><a name="[103]"></a>USARTClass::USARTClass(USART_TypeDef*, IRQn_Type, unsigned, RingBuffer*)</STRONG> (Thumb, 30 bytes, Stack size 12 bytes, usartclass.o(i._ZN10USARTClassC1EP13USART_TypeDef9IRQn_TypejP10RingBuffer))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = USARTClass::USARTClass(USART_TypeDef*, IRQn_Type, unsigned, RingBuffer*)
</UL>
<BR>[Called By]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___5_sys_c_pinMode
</UL>

<P><STRONG><a name="[117]"></a>USARTClass::USARTClass__sub_object(USART_TypeDef*, IRQn_Type, unsigned, RingBuffer*)</STRONG> (Thumb, 0 bytes, Stack size 12 bytes, usartclass.o(i._ZN10USARTClassC1EP13USART_TypeDef9IRQn_TypejP10RingBuffer), UNUSED)

<P><STRONG><a name="[96]"></a>Adafruit_GFX::drawCircle(short, short, short, unsigned short)</STRONG> (Thumb, 316 bytes, Stack size 56 bytes, adafruit_gfx.o(i._ZN12Adafruit_GFX10drawCircleEssst))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = Adafruit_GFX::drawCircle(short, short, short, unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;testCircles(unsigned char, unsigned short)
</UL>

<P><STRONG><a name="[ae]"></a>Adafruit_GFX::fillCircle(short, short, short, unsigned short)</STRONG> (Thumb, 64 bytes, Stack size 40 bytes, adafruit_gfx.o(i._ZN12Adafruit_GFX10fillCircleEssst))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = Adafruit_GFX::fillCircle(short, short, short, unsigned short) &rArr; Adafruit_GFX::fillCircleHelper(short, short, short, unsigned char, short, unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adafruit_GFX::fillCircleHelper(short, short, short, unsigned char, short, unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;testFilledCircles(unsigned char, unsigned short)
</UL>

<P><STRONG><a name="[d5]"></a>Adafruit_GFX::setRotation(unsigned char)</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, adafruit_gfx.o(i._ZN12Adafruit_GFX11setRotationEh))
<BR><BR>[Called By]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adafruit_TFTLCD_8bit_STM32::setRotation(unsigned char)
</UL>

<P><STRONG><a name="[c5]"></a>Adafruit_GFX::setTextSize(unsigned char)</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, adafruit_gfx.o(i._ZN12Adafruit_GFX11setTextSizeEh))
<BR><BR>[Called By]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;testText()
</UL>

<P><STRONG><a name="[a4]"></a>Adafruit_GFX::drawTriangle(short, short, short, short, short, short, unsigned short)</STRONG> (Thumb, 76 bytes, Stack size 48 bytes, adafruit_gfx.o(i._ZN12Adafruit_GFX12drawTriangleEsssssst))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = Adafruit_GFX::drawTriangle(short, short, short, short, short, short, unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;testFilledTriangles()
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;testTriangles()
</UL>

<P><STRONG><a name="[b2]"></a>Adafruit_GFX::fillTriangle(short, short, short, short, short, short, unsigned short)</STRONG> (Thumb, 380 bytes, Stack size 88 bytes, adafruit_gfx.o(i._ZN12Adafruit_GFX12fillTriangleEsssssst))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = Adafruit_GFX::fillTriangle(short, short, short, short, short, short, unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;testFilledTriangles()
</UL>

<P><STRONG><a name="[c4]"></a>Adafruit_GFX::setTextColor(unsigned short)</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, adafruit_gfx.o(i._ZN12Adafruit_GFX12setTextColorEt))
<BR><BR>[Called By]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;testText()
</UL>

<P><STRONG><a name="[56]"></a>Adafruit_GFX::drawFastHLine(short, short, short, unsigned short)</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, adafruit_gfx.o(i._ZN12Adafruit_GFX13drawFastHLineEssst))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Adafruit_GFX::drawFastHLine(short, short, short, unsigned short)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> adafruit_gfx.o(.constdata__ZTV12Adafruit_GFX)
</UL>
<P><STRONG><a name="[55]"></a>Adafruit_GFX::drawFastVLine(short, short, short, unsigned short)</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, adafruit_gfx.o(i._ZN12Adafruit_GFX13drawFastVLineEssst))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Adafruit_GFX::drawFastVLine(short, short, short, unsigned short)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> adafruit_gfx.o(.constdata__ZTV12Adafruit_GFX)
</UL>
<P><STRONG><a name="[a9]"></a>Adafruit_GFX::drawRoundRect(short, short, short, short, short, unsigned short)</STRONG> (Thumb, 228 bytes, Stack size 64 bytes, adafruit_gfx.o(i._ZN12Adafruit_GFX13drawRoundRectEssssst))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = Adafruit_GFX::drawRoundRect(short, short, short, short, short, unsigned short) &rArr; Adafruit_GFX::drawCircleHelper(short, short, short, unsigned char, unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adafruit_GFX::drawCircleHelper(short, short, short, unsigned char, unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;testRoundRects()
</UL>

<P><STRONG><a name="[b4]"></a>Adafruit_GFX::fillRoundRect(short, short, short, short, short, unsigned short)</STRONG> (Thumb, 120 bytes, Stack size 64 bytes, adafruit_gfx.o(i._ZN12Adafruit_GFX13fillRoundRectEssssst))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = Adafruit_GFX::fillRoundRect(short, short, short, short, short, unsigned short) &rArr; Adafruit_GFX::fillCircleHelper(short, short, short, unsigned char, short, unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adafruit_GFX::fillCircleHelper(short, short, short, unsigned char, short, unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;testFilledRoundRects()
</UL>

<P><STRONG><a name="[d0]"></a>Adafruit_GFX::drawCircleHelper(short, short, short, unsigned char, unsigned short)</STRONG> (Thumb, 296 bytes, Stack size 40 bytes, adafruit_gfx.o(i._ZN12Adafruit_GFX16drawCircleHelperEsssht))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = Adafruit_GFX::drawCircleHelper(short, short, short, unsigned char, unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adafruit_GFX::drawRoundRect(short, short, short, short, short, unsigned short)
</UL>

<P><STRONG><a name="[cf]"></a>Adafruit_GFX::fillCircleHelper(short, short, short, unsigned char, short, unsigned short)</STRONG> (Thumb, 234 bytes, Stack size 48 bytes, adafruit_gfx.o(i._ZN12Adafruit_GFX16fillCircleHelperEssshst))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = Adafruit_GFX::fillCircleHelper(short, short, short, unsigned char, short, unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adafruit_GFX::fillRoundRect(short, short, short, short, short, unsigned short)
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adafruit_GFX::fillCircle(short, short, short, unsigned short)
</UL>

<P><STRONG><a name="[93]"></a>Adafruit_GFX::width()</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, adafruit_gfx.o(i._ZN12Adafruit_GFX5widthEv))
<BR><BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;testRects(unsigned short)
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;testLines(unsigned short)
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;testFilledRoundRects()
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;testFilledTriangles()
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;testFilledCircles(unsigned char, unsigned short)
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;testFilledRects(unsigned short, unsigned short)
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;testRoundRects()
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;testTriangles()
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;testFastLines(unsigned short, unsigned short)
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;testCircles(unsigned char, unsigned short)
</UL>

<P><STRONG><a name="[52]"></a>Adafruit_GFX::write(unsigned char)</STRONG> (Thumb, 102 bytes, Stack size 24 bytes, adafruit_gfx.o(i._ZN12Adafruit_GFX5writeEh))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = Adafruit_GFX::write(unsigned char) &rArr; Adafruit_GFX::drawChar(short, short, unsigned char, unsigned short, unsigned short, unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adafruit_GFX::drawChar(short, short, unsigned char, unsigned short, unsigned short, unsigned char)
</UL>
<BR>[Address Reference Count : 2]<UL><LI> adafruit_gfx.o(.constdata__ZTV12Adafruit_GFX)
<LI> adafruit_tftlcd_8bit_stm32.o(.constdata__ZTV26Adafruit_TFTLCD_8bit_STM32)
</UL>
<P><STRONG><a name="[94]"></a>Adafruit_GFX::height()</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, adafruit_gfx.o(i._ZN12Adafruit_GFX6heightEv))
<BR><BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;testRects(unsigned short)
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;testLines(unsigned short)
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;testFilledRoundRects()
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;testFilledTriangles()
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;testFilledCircles(unsigned char, unsigned short)
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;testFilledRects(unsigned short, unsigned short)
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;testRoundRects()
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;testTriangles()
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;testFastLines(unsigned short, unsigned short)
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;testCircles(unsigned char, unsigned short)
</UL>

<P><STRONG><a name="[d1]"></a>Adafruit_GFX::drawChar(short, short, unsigned char, unsigned short, unsigned short, unsigned char)</STRONG> (Thumb, 220 bytes, Stack size 48 bytes, adafruit_gfx.o(i._ZN12Adafruit_GFX8drawCharEsshtth))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = Adafruit_GFX::drawChar(short, short, unsigned char, unsigned short, unsigned short, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adafruit_GFX::write(unsigned char)
</UL>

<P><STRONG><a name="[54]"></a>Adafruit_GFX::drawLine(short, short, short, short, unsigned short)</STRONG> (Thumb, 172 bytes, Stack size 56 bytes, adafruit_gfx.o(i._ZN12Adafruit_GFX8drawLineEsssst))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = Adafruit_GFX::drawLine(short, short, short, short, unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;testLines(unsigned short)
</UL>
<BR>[Address Reference Count : 2]<UL><LI> adafruit_gfx.o(.constdata__ZTV12Adafruit_GFX)
<LI> adafruit_tftlcd_8bit_stm32.o(.constdata__ZTV26Adafruit_TFTLCD_8bit_STM32)
</UL>
<P><STRONG><a name="[57]"></a>Adafruit_GFX::drawRect(short, short, short, short, unsigned short)</STRONG> (Thumb, 94 bytes, Stack size 32 bytes, adafruit_gfx.o(i._ZN12Adafruit_GFX8drawRectEsssst))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Adafruit_GFX::drawRect(short, short, short, short, unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;testRects(unsigned short)
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;testFilledRects(unsigned short, unsigned short)
</UL>
<BR>[Address Reference Count : 2]<UL><LI> adafruit_gfx.o(.constdata__ZTV12Adafruit_GFX)
<LI> adafruit_tftlcd_8bit_stm32.o(.constdata__ZTV26Adafruit_TFTLCD_8bit_STM32)
</UL>
<P><STRONG><a name="[58]"></a>Adafruit_GFX::fillRect(short, short, short, short, unsigned short)</STRONG> (Thumb, 48 bytes, Stack size 32 bytes, adafruit_gfx.o(i._ZN12Adafruit_GFX8fillRectEsssst))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Adafruit_GFX::fillRect(short, short, short, short, unsigned short)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> adafruit_gfx.o(.constdata__ZTV12Adafruit_GFX)
</UL>
<P><STRONG><a name="[c3]"></a>Adafruit_GFX::setCursor(short, short)</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, adafruit_gfx.o(i._ZN12Adafruit_GFX9setCursorEss))
<BR><BR>[Called By]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;testText()
</UL>

<P><STRONG><a name="[da]"></a>Adafruit_GFX::Adafruit_GFX__sub_object(short, short)</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, adafruit_gfx.o(i._ZN12Adafruit_GFXC2Ess))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Adafruit_GFX::Adafruit_GFX__sub_object(short, short)
</UL>
<BR>[Called By]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adafruit_TFTLCD_8bit_STM32::Adafruit_TFTLCD_8bit_STM32()
</UL>

<P><STRONG><a name="[5d]"></a>Adafruit_TFTLCD_8bit_STM32::fillScreen(unsigned short)</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, adafruit_tftlcd_8bit_stm32.o(i._ZN26Adafruit_TFTLCD_8bit_STM3210fillScreenEt))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = Adafruit_TFTLCD_8bit_STM32::fillScreen(unsigned short) &rArr; Adafruit_TFTLCD_8bit_STM32::setAddrWindow(short, short, short, short) &rArr; hx8347g_setAddrWindow(int, int, int, int) &rArr; writeRegisterPair(unsigned short, unsigned short, unsigned short) &rArr; writeRegister8(unsigned short, unsigned char) &rArr; writeCommand(unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ili932x_fillScreen(unsigned short)
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adafruit_TFTLCD_8bit_STM32::flood(unsigned short, unsigned)
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adafruit_TFTLCD_8bit_STM32::setAddrWindow(short, short, short, short)
</UL>
<BR>[Called By]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;testRects(unsigned short)
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;testLines(unsigned short)
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;testText()
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;testFilledRoundRects()
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;testFilledTriangles()
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;testFilledCircles(unsigned char, unsigned short)
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;testFilledRects(unsigned short, unsigned short)
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;testRoundRects()
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;testFillScreen()
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;testTriangles()
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;testFastLines(unsigned short, unsigned short)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> adafruit_tftlcd_8bit_stm32.o(.constdata__ZTV26Adafruit_TFTLCD_8bit_STM32)
</UL>
<P><STRONG><a name="[d4]"></a>Adafruit_TFTLCD_8bit_STM32::setRotation(unsigned char)</STRONG> (Thumb, 186 bytes, Stack size 16 bytes, adafruit_tftlcd_8bit_stm32.o(i._ZN26Adafruit_TFTLCD_8bit_STM3211setRotationEh))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = Adafruit_TFTLCD_8bit_STM32::setRotation(unsigned char) &rArr; Adafruit_TFTLCD_8bit_STM32::setAddrWindow(short, short, short, short) &rArr; hx8347g_setAddrWindow(int, int, int, int) &rArr; writeRegisterPair(unsigned short, unsigned short, unsigned short) &rArr; writeRegister8(unsigned short, unsigned char) &rArr; writeCommand(unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adafruit_GFX::setRotation(unsigned char)
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ili932x_setRotation(unsigned char)
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hx8347g_setRotation(unsigned char)
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adafruit_TFTLCD_8bit_STM32::setAddrWindow(short, short, short, short)
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeRegister8(unsigned short, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[5b]"></a>Adafruit_TFTLCD_8bit_STM32::drawFastHLine(short, short, short, unsigned short)</STRONG> (Thumb, 122 bytes, Stack size 24 bytes, adafruit_tftlcd_8bit_stm32.o(i._ZN26Adafruit_TFTLCD_8bit_STM3213drawFastHLineEssst))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = Adafruit_TFTLCD_8bit_STM32::drawFastHLine(short, short, short, unsigned short) &rArr; Adafruit_TFTLCD_8bit_STM32::setAddrWindow(short, short, short, short) &rArr; hx8347g_setAddrWindow(int, int, int, int) &rArr; writeRegisterPair(unsigned short, unsigned short, unsigned short) &rArr; writeRegister8(unsigned short, unsigned char) &rArr; writeCommand(unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hx8347g_setLR()
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adafruit_TFTLCD_8bit_STM32::flood(unsigned short, unsigned)
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adafruit_TFTLCD_8bit_STM32::setAddrWindow(short, short, short, short)
</UL>
<BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;testFastLines(unsigned short, unsigned short)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> adafruit_tftlcd_8bit_stm32.o(.constdata__ZTV26Adafruit_TFTLCD_8bit_STM32)
</UL>
<P><STRONG><a name="[5a]"></a>Adafruit_TFTLCD_8bit_STM32::drawFastVLine(short, short, short, unsigned short)</STRONG> (Thumb, 124 bytes, Stack size 24 bytes, adafruit_tftlcd_8bit_stm32.o(i._ZN26Adafruit_TFTLCD_8bit_STM3213drawFastVLineEssst))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = Adafruit_TFTLCD_8bit_STM32::drawFastVLine(short, short, short, unsigned short) &rArr; Adafruit_TFTLCD_8bit_STM32::setAddrWindow(short, short, short, short) &rArr; hx8347g_setAddrWindow(int, int, int, int) &rArr; writeRegisterPair(unsigned short, unsigned short, unsigned short) &rArr; writeRegister8(unsigned short, unsigned char) &rArr; writeCommand(unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hx8347g_setLR()
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adafruit_TFTLCD_8bit_STM32::flood(unsigned short, unsigned)
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adafruit_TFTLCD_8bit_STM32::setAddrWindow(short, short, short, short)
</UL>
<BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;testFastLines(unsigned short, unsigned short)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> adafruit_tftlcd_8bit_stm32.o(.constdata__ZTV26Adafruit_TFTLCD_8bit_STM32)
</UL>
<P><STRONG><a name="[d2]"></a>Adafruit_TFTLCD_8bit_STM32::setAddrWindow(short, short, short, short)</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, adafruit_tftlcd_8bit_stm32.o(i._ZN26Adafruit_TFTLCD_8bit_STM3213setAddrWindowEssss))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = Adafruit_TFTLCD_8bit_STM32::setAddrWindow(short, short, short, short) &rArr; hx8347g_setAddrWindow(int, int, int, int) &rArr; writeRegisterPair(unsigned short, unsigned short, unsigned short) &rArr; writeRegister8(unsigned short, unsigned char) &rArr; writeCommand(unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ili9341_setAddrWindow(short, short, short, short)
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ili932x_setAddrWindow(int, int, int, int)
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hx8347g_setAddrWindow(int, int, int, int)
</UL>
<BR>[Called By]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adafruit_TFTLCD_8bit_STM32::drawPixel(short, short, unsigned short)
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adafruit_TFTLCD_8bit_STM32::fillRect(short, short, short, short, unsigned short)
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adafruit_TFTLCD_8bit_STM32::drawFastVLine(short, short, short, unsigned short)
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adafruit_TFTLCD_8bit_STM32::drawFastHLine(short, short, short, unsigned short)
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adafruit_TFTLCD_8bit_STM32::setRotation(unsigned char)
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adafruit_TFTLCD_8bit_STM32::fillScreen(unsigned short)
</UL>

<P><STRONG><a name="[d6]"></a>Adafruit_TFTLCD_8bit_STM32::begin(unsigned short)</STRONG> (Thumb, 118 bytes, Stack size 16 bytes, adafruit_tftlcd_8bit_stm32.o(i._ZN26Adafruit_TFTLCD_8bit_STM325beginEt))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = Adafruit_TFTLCD_8bit_STM32::begin(unsigned short) &rArr; Adafruit_TFTLCD_8bit_STM32::reset() &rArr; pinMode &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ili9341_begin()
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ili932x_begin()
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hx8357x_begin()
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hx8347g_begin()
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adafruit_TFTLCD_8bit_STM32::reset()
</UL>
<BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[d3]"></a>Adafruit_TFTLCD_8bit_STM32::flood(unsigned short, unsigned)</STRONG> (Thumb, 306 bytes, Stack size 32 bytes, adafruit_tftlcd_8bit_stm32.o(i._ZN26Adafruit_TFTLCD_8bit_STM325floodEtj))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = Adafruit_TFTLCD_8bit_STM32::flood(unsigned short, unsigned) &rArr; writeCommand(unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeCommand(unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adafruit_TFTLCD_8bit_STM32::fillRect(short, short, short, short, unsigned short)
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adafruit_TFTLCD_8bit_STM32::drawFastVLine(short, short, short, unsigned short)
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adafruit_TFTLCD_8bit_STM32::drawFastHLine(short, short, short, unsigned short)
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adafruit_TFTLCD_8bit_STM32::fillScreen(unsigned short)
</UL>

<P><STRONG><a name="[d7]"></a>Adafruit_TFTLCD_8bit_STM32::reset()</STRONG> (Thumb, 128 bytes, Stack size 8 bytes, adafruit_tftlcd_8bit_stm32.o(i._ZN26Adafruit_TFTLCD_8bit_STM325resetEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = Adafruit_TFTLCD_8bit_STM32::reset() &rArr; pinMode &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pinMode
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;digitalWrite
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay
</UL>
<BR>[Called By]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adafruit_TFTLCD_8bit_STM32::begin(unsigned short)
</UL>

<P><STRONG><a name="[a3]"></a>Adafruit_TFTLCD_8bit_STM32::color565(unsigned char, unsigned char, unsigned char)</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, main.o(i._ZN26Adafruit_TFTLCD_8bit_STM328color565Ehhh))
<BR><BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;testFilledRoundRects()
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;testFilledTriangles()
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;testRoundRects()
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;testTriangles()
</UL>

<P><STRONG><a name="[5c]"></a>Adafruit_TFTLCD_8bit_STM32::fillRect(short, short, short, short, unsigned short)</STRONG> (Thumb, 162 bytes, Stack size 32 bytes, adafruit_tftlcd_8bit_stm32.o(i._ZN26Adafruit_TFTLCD_8bit_STM328fillRectEsssst))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = Adafruit_TFTLCD_8bit_STM32::fillRect(short, short, short, short, unsigned short) &rArr; Adafruit_TFTLCD_8bit_STM32::setAddrWindow(short, short, short, short) &rArr; hx8347g_setAddrWindow(int, int, int, int) &rArr; writeRegisterPair(unsigned short, unsigned short, unsigned short) &rArr; writeRegister8(unsigned short, unsigned char) &rArr; writeCommand(unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adafruit_TFTLCD_8bit_STM32::flood(unsigned short, unsigned)
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adafruit_TFTLCD_8bit_STM32::setAddrWindow(short, short, short, short)
</UL>
<BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;testFilledRects(unsigned short, unsigned short)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> adafruit_tftlcd_8bit_stm32.o(.constdata__ZTV26Adafruit_TFTLCD_8bit_STM32)
</UL>
<P><STRONG><a name="[59]"></a>Adafruit_TFTLCD_8bit_STM32::drawPixel(short, short, unsigned short)</STRONG> (Thumb, 196 bytes, Stack size 24 bytes, adafruit_tftlcd_8bit_stm32.o(i._ZN26Adafruit_TFTLCD_8bit_STM329drawPixelEsst))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = Adafruit_TFTLCD_8bit_STM32::drawPixel(short, short, unsigned short) &rArr; Adafruit_TFTLCD_8bit_STM32::setAddrWindow(short, short, short, short) &rArr; hx8347g_setAddrWindow(int, int, int, int) &rArr; writeRegisterPair(unsigned short, unsigned short, unsigned short) &rArr; writeRegister8(unsigned short, unsigned char) &rArr; writeCommand(unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ili932x_drawPixel(short, short, unsigned short)
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adafruit_TFTLCD_8bit_STM32::setAddrWindow(short, short, short, short)
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeRegisterPair(unsigned short, unsigned short, unsigned short)
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeRegister16(unsigned short, unsigned short)
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeRegister8(unsigned short, unsigned char)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> adafruit_tftlcd_8bit_stm32.o(.constdata__ZTV26Adafruit_TFTLCD_8bit_STM32)
</UL>
<P><STRONG><a name="[d9]"></a>Adafruit_TFTLCD_8bit_STM32::Adafruit_TFTLCD_8bit_STM32()</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, adafruit_tftlcd_8bit_stm32.o(i._ZN26Adafruit_TFTLCD_8bit_STM32C1Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Adafruit_TFTLCD_8bit_STM32::Adafruit_TFTLCD_8bit_STM32() &rArr; Adafruit_GFX::Adafruit_GFX__sub_object(short, short)
</UL>
<BR>[Calls]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adafruit_GFX::Adafruit_GFX__sub_object(short, short)
</UL>
<BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___6_main_c_tft
</UL>

<P><STRONG><a name="[118]"></a>Adafruit_TFTLCD_8bit_STM32::Adafruit_TFTLCD_8bit_STM32__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, adafruit_tftlcd_8bit_stm32.o(i._ZN26Adafruit_TFTLCD_8bit_STM32C1Ev), UNUSED)

<P><STRONG><a name="[db]"></a>Print::printFloat(double, unsigned char)</STRONG> (Thumb, 280 bytes, Stack size 32 bytes, print.o(i._ZN5Print10printFloatEdh))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = Print::printFloat(double, unsigned char) &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmple
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print::print(int, int)
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print::print(char)
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print::print(const char*)
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print::write(const char*)
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print::print(unsigned long, int)
</UL>
<BR>[Called By]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print::print(double, int)
</UL>

<P><STRONG><a name="[e3]"></a>Print::printNumber(unsigned long, unsigned char)</STRONG> (Thumb, 58 bytes, Stack size 48 bytes, print.o(i._ZN5Print11printNumberEmh))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = Print::printNumber(unsigned long, unsigned char) &rArr; Print::write(const char*)
</UL>
<BR>[Calls]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print::write(const char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print::print(unsigned long, int)
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print::print(long, int)
</UL>

<P><STRONG><a name="[bb]"></a>Print::print(const __FlashStringHelper*)</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, print.o(i._ZN5Print5printEPK19__FlashStringHelper))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Print::print(const __FlashStringHelper*) &rArr; Print::write(const char*)
</UL>
<BR>[Calls]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print::write(const char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print::println(const __FlashStringHelper*)
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;doTest()
</UL>

<P><STRONG><a name="[e1]"></a>Print::print(const char*)</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, print.o(i._ZN5Print5printEPKc))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Print::print(const char*) &rArr; Print::write(const char*)
</UL>
<BR>[Calls]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print::write(const char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print::println(const char*)
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print::printFloat(double, unsigned char)
</UL>

<P><STRONG><a name="[df]"></a>Print::print(char)</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, print.o(i._ZN5Print5printEc))
<BR><BR>[Called By]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print::println()
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print::print(long, int)
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print::printFloat(double, unsigned char)
</UL>

<P><STRONG><a name="[e4]"></a>Print::print(double, int)</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, print.o(i._ZN5Print5printEdi))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = Print::print(double, int) &rArr; Print::printFloat(double, unsigned char) &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print::printFloat(double, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print::println(double, int)
</UL>

<P><STRONG><a name="[e5]"></a>Print::print(unsigned char, int)</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, print.o(i._ZN5Print5printEhi))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = Print::print(unsigned char, int) &rArr; Print::print(unsigned long, int) &rArr; Print::printNumber(unsigned long, unsigned char) &rArr; Print::write(const char*)
</UL>
<BR>[Calls]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print::print(unsigned long, int)
</UL>
<BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[e2]"></a>Print::print(int, int)</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, print.o(i._ZN5Print5printEii))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = Print::print(int, int) &rArr; Print::print(long, int) &rArr; Print::printNumber(unsigned long, unsigned char) &rArr; Print::write(const char*)
</UL>
<BR>[Calls]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print::print(long, int)
</UL>
<BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print::println(int, int)
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print::printFloat(double, unsigned char)
</UL>

<P><STRONG><a name="[e7]"></a>Print::print(unsigned, int)</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, print.o(i._ZN5Print5printEji))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = Print::print(unsigned, int) &rArr; Print::print(unsigned long, int) &rArr; Print::printNumber(unsigned long, unsigned char) &rArr; Print::write(const char*)
</UL>
<BR>[Calls]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print::print(unsigned long, int)
</UL>
<BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print::println(unsigned, int)
</UL>

<P><STRONG><a name="[e6]"></a>Print::print(long, int)</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, print.o(i._ZN5Print5printEli))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = Print::print(long, int) &rArr; Print::printNumber(unsigned long, unsigned char) &rArr; Print::write(const char*)
</UL>
<BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print::print(char)
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print::printNumber(unsigned long, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print::print(int, int)
</UL>

<P><STRONG><a name="[e0]"></a>Print::print(unsigned long, int)</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, print.o(i._ZN5Print5printEmi))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = Print::print(unsigned long, int) &rArr; Print::printNumber(unsigned long, unsigned char) &rArr; Print::write(const char*)
</UL>
<BR>[Calls]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print::printNumber(unsigned long, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print::print(unsigned, int)
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print::println(unsigned long, int)
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print::print(unsigned char, int)
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print::printFloat(double, unsigned char)
</UL>

<P><STRONG><a name="[de]"></a>Print::write(const char*)</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, print.o(i._ZN5Print5writeEPKc))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Print::write(const char*)
</UL>
<BR>[Calls]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print::print(const char*)
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print::print(const __FlashStringHelper*)
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print::printNumber(unsigned long, unsigned char)
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print::printFloat(double, unsigned char)
</UL>

<P><STRONG><a name="[51]"></a>Print::write(const unsigned char*, unsigned)</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, print.o(i._ZN5Print5writeEPKhj))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Print::write(const unsigned char*, unsigned)
</UL>
<BR>[Address Reference Count : 4]<UL><LI> sdfile.o(.constdata__ZTV6SdFile)
<LI> adafruit_gfx.o(.constdata__ZTV12Adafruit_GFX)
<LI> adafruit_tftlcd_8bit_stm32.o(.constdata__ZTV26Adafruit_TFTLCD_8bit_STM32)
<LI> usartclass.o(.constdata__ZTV10USARTClass)
</UL>
<P><STRONG><a name="[ba]"></a>Print::println(const __FlashStringHelper*)</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, print.o(i._ZN5Print7printlnEPK19__FlashStringHelper))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Print::println(const __FlashStringHelper*) &rArr; Print::println()
</UL>
<BR>[Calls]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print::println()
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print::print(const __FlashStringHelper*)
</UL>
<BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;doTest()
</UL>

<P><STRONG><a name="[c6]"></a>Print::println(const char*)</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, print.o(i._ZN5Print7printlnEPKc))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Print::println(const char*) &rArr; Print::println()
</UL>
<BR>[Calls]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print::println()
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print::print(const char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;testText()
</UL>

<P><STRONG><a name="[c7]"></a>Print::println(double, int)</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, print.o(i._ZN5Print7printlnEdi))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = Print::println(double, int) &rArr; Print::print(double, int) &rArr; Print::printFloat(double, unsigned char) &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print::println()
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print::print(double, int)
</UL>
<BR>[Called By]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;testText()
</UL>

<P><STRONG><a name="[e9]"></a>Print::println(int, int)</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, print.o(i._ZN5Print7printlnEii))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = Print::println(int, int) &rArr; Print::print(int, int) &rArr; Print::print(long, int) &rArr; Print::printNumber(unsigned long, unsigned char) &rArr; Print::write(const char*)
</UL>
<BR>[Calls]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print::println()
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print::print(int, int)
</UL>
<BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[c8]"></a>Print::println(unsigned, int)</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, print.o(i._ZN5Print7printlnEji))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = Print::println(unsigned, int) &rArr; Print::print(unsigned, int) &rArr; Print::print(unsigned long, int) &rArr; Print::printNumber(unsigned long, unsigned char) &rArr; Print::write(const char*)
</UL>
<BR>[Calls]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print::println()
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print::print(unsigned, int)
</UL>
<BR>[Called By]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;testText()
</UL>

<P><STRONG><a name="[bc]"></a>Print::println(unsigned long, int)</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, print.o(i._ZN5Print7printlnEmi))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = Print::println(unsigned long, int) &rArr; Print::print(unsigned long, int) &rArr; Print::printNumber(unsigned long, unsigned char) &rArr; Print::write(const char*)
</UL>
<BR>[Calls]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print::println()
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print::print(unsigned long, int)
</UL>
<BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;doTest()
</UL>

<P><STRONG><a name="[c9]"></a>Print::println()</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, print.o(i._ZN5Print7printlnEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Print::println()
</UL>
<BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print::print(char)
</UL>
<BR>[Called By]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print::println(unsigned long, int)
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print::println(unsigned, int)
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print::println(int, int)
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print::println(double, int)
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print::println(const char*)
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print::println(const __FlashStringHelper*)
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;testText()
</UL>

<P><STRONG><a name="[ea]"></a>SdFile::addCluster()</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, sdfile.o(i._ZN6SdFile10addClusterEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = SdFile::addCluster() &rArr; SdVolume::allocContiguous(unsigned, unsigned*) &rArr; SdVolume::fatPut(unsigned, unsigned) &rArr; SdVolume::cacheRawBlock(unsigned, unsigned char) &rArr; SdVolume::cacheFlush() &rArr; Sd2Card::writeBlock(unsigned, const unsigned char*) &rArr; Sd2Card::cardCommand(unsigned char, unsigned) &rArr; Sd2Card::readEnd()
</UL>
<BR>[Calls]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdVolume::allocContiguous(unsigned, unsigned*)
</UL>
<BR>[Called By]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdFile::write(const void*, unsigned short)
</UL>

<P><STRONG><a name="[ec]"></a>SdFile::cacheDirEntry(unsigned char)</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, sdfile.o(i._ZN6SdFile13cacheDirEntryEh))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = SdFile::cacheDirEntry(unsigned char) &rArr; SdVolume::cacheRawBlock(unsigned, unsigned char) &rArr; SdVolume::cacheFlush() &rArr; Sd2Card::writeBlock(unsigned, const unsigned char*) &rArr; Sd2Card::cardCommand(unsigned char, unsigned) &rArr; Sd2Card::readEnd()
</UL>
<BR>[Calls]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdVolume::cacheRawBlock(unsigned, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdFile::sync()
</UL>

<P><STRONG><a name="[ee]"></a>SdFile::sync()</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, sdfile.o(i._ZN6SdFile4syncEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = SdFile::sync() &rArr; SdFile::cacheDirEntry(unsigned char) &rArr; SdVolume::cacheRawBlock(unsigned, unsigned char) &rArr; SdVolume::cacheFlush() &rArr; Sd2Card::writeBlock(unsigned, const unsigned char*) &rArr; Sd2Card::cardCommand(unsigned char, unsigned) &rArr; Sd2Card::readEnd()
</UL>
<BR>[Calls]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdVolume::cacheFlush()
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdFile::cacheDirEntry(unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdFile::write(const void*, unsigned short)
</UL>

<P><STRONG><a name="[f0]"></a>SdFile::write(const void*, unsigned short)</STRONG> (Thumb, 330 bytes, Stack size 40 bytes, sdfile.o(i._ZN6SdFile5writeEPKvt))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = SdFile::write(const void*, unsigned short) &rArr; SdFile::addCluster() &rArr; SdVolume::allocContiguous(unsigned, unsigned*) &rArr; SdVolume::fatPut(unsigned, unsigned) &rArr; SdVolume::cacheRawBlock(unsigned, unsigned char) &rArr; SdVolume::cacheFlush() &rArr; Sd2Card::writeBlock(unsigned, const unsigned char*) &rArr; Sd2Card::cardCommand(unsigned char, unsigned) &rArr; Sd2Card::readEnd()
</UL>
<BR>[Calls]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdVolume::fatGet(unsigned, unsigned*) const
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdVolume::cacheRawBlock(unsigned, unsigned char)
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdVolume::cacheFlush()
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdVolume::isEOC(unsigned) const
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdVolume::clusterStartBlock(unsigned) const
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdVolume::cacheSetDirty()
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdFile::addCluster()
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sd2Card::writeBlock(unsigned, const unsigned char*)
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdFile::seekSet(unsigned)
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdFile::sync()
</UL>
<BR>[Called By]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdFile::write(unsigned char)
</UL>

<P><STRONG><a name="[5e]"></a>SdFile::write(unsigned char)</STRONG> (Thumb, 12 bytes, Stack size 16 bytes, sdfile.o(i._ZN6SdFile5writeEh))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = SdFile::write(unsigned char) &rArr; SdFile::write(const void*, unsigned short) &rArr; SdFile::addCluster() &rArr; SdVolume::allocContiguous(unsigned, unsigned*) &rArr; SdVolume::fatPut(unsigned, unsigned) &rArr; SdVolume::cacheRawBlock(unsigned, unsigned char) &rArr; SdVolume::cacheFlush() &rArr; Sd2Card::writeBlock(unsigned, const unsigned char*) &rArr; Sd2Card::cardCommand(unsigned char, unsigned) &rArr; Sd2Card::readEnd()
</UL>
<BR>[Calls]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdFile::write(const void*, unsigned short)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sdfile.o(.constdata__ZTV6SdFile)
</UL>
<P><STRONG><a name="[f1]"></a>SdFile::seekSet(unsigned)</STRONG> (Thumb, 98 bytes, Stack size 24 bytes, sdfile.o(i._ZN6SdFile7seekSetEj))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = SdFile::seekSet(unsigned) &rArr; SdVolume::fatGet(unsigned, unsigned*) const &rArr; SdVolume::cacheRawBlock(unsigned, unsigned char) &rArr; SdVolume::cacheFlush() &rArr; Sd2Card::writeBlock(unsigned, const unsigned char*) &rArr; Sd2Card::cardCommand(unsigned char, unsigned) &rArr; Sd2Card::readEnd()
</UL>
<BR>[Calls]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdVolume::fatGet(unsigned, unsigned*) const
</UL>
<BR>[Called By]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdFile::write(const void*, unsigned short)
</UL>

<P><STRONG><a name="[105]"></a>SdFile::SdFile()</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, sd.o(i._ZN6SdFileC1Ev))
<BR><BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___6_SD_cpp_426a88ba
</UL>

<P><STRONG><a name="[119]"></a>SdFile::SdFile__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, sd.o(i._ZN6SdFileC1Ev), UNUSED)

<P><STRONG><a name="[f5]"></a>Sd2Card::writeBlock(unsigned, const unsigned char*)</STRONG> (Thumb, 108 bytes, Stack size 16 bytes, sd2card.o(i._ZN7Sd2Card10writeBlockEjPKh))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = Sd2Card::writeBlock(unsigned, const unsigned char*) &rArr; Sd2Card::cardCommand(unsigned char, unsigned) &rArr; Sd2Card::readEnd()
</UL>
<BR>[Calls]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sd2Card::writeData(unsigned char, const unsigned char*)
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sd2Card::chipSelectHigh()
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sd2Card::waitNotBusy(unsigned short)
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sd2Card::cardCommand(unsigned char, unsigned)
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiRec()
</UL>
<BR>[Called By]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdVolume::cacheFlush()
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdFile::write(const void*, unsigned short)
</UL>

<P><STRONG><a name="[f7]"></a>Sd2Card::cardCommand(unsigned char, unsigned)</STRONG> (Thumb, 104 bytes, Stack size 24 bytes, sd2card.o(i._ZN7Sd2Card11cardCommandEhj))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = Sd2Card::cardCommand(unsigned char, unsigned) &rArr; Sd2Card::readEnd()
</UL>
<BR>[Calls]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sd2Card::readEnd()
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sd2Card::chipSelectLow()
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sd2Card::waitNotBusy(unsigned short)
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiSend(unsigned char)
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiRec()
</UL>
<BR>[Called By]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sd2Card::readData(unsigned, unsigned short, unsigned short, unsigned char*)
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sd2Card::writeBlock(unsigned, const unsigned char*)
</UL>

<P><STRONG><a name="[f9]"></a>Sd2Card::waitNotBusy(unsigned short)</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, sd2card.o(i._ZN7Sd2Card11waitNotBusyEt))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Sd2Card::waitNotBusy(unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;millis
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiRec()
</UL>
<BR>[Called By]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sd2Card::cardCommand(unsigned char, unsigned)
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sd2Card::writeBlock(unsigned, const unsigned char*)
</UL>

<P><STRONG><a name="[fc]"></a>Sd2Card::chipSelectLow()</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, sd2card.o(i._ZN7Sd2Card13chipSelectLowEv))
<BR><BR>[Calls]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;digitalWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sd2Card::cardCommand(unsigned char, unsigned)
</UL>

<P><STRONG><a name="[fa]"></a>Sd2Card::chipSelectHigh()</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, sd2card.o(i._ZN7Sd2Card14chipSelectHighEv))
<BR><BR>[Calls]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;digitalWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sd2Card::writeData(unsigned char, const unsigned char*)
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sd2Card::readData(unsigned, unsigned short, unsigned short, unsigned char*)
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sd2Card::readEnd()
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sd2Card::waitStartBlock()
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sd2Card::writeBlock(unsigned, const unsigned char*)
</UL>

<P><STRONG><a name="[fe]"></a>Sd2Card::waitStartBlock()</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, sd2card.o(i._ZN7Sd2Card14waitStartBlockEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Sd2Card::waitStartBlock()
</UL>
<BR>[Calls]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;millis
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sd2Card::chipSelectHigh()
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiRec()
</UL>
<BR>[Called By]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sd2Card::readData(unsigned, unsigned short, unsigned short, unsigned char*)
</UL>

<P><STRONG><a name="[fb]"></a>Sd2Card::readEnd()</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, sd2card.o(i._ZN7Sd2Card7readEndEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Sd2Card::readEnd()
</UL>
<BR>[Calls]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sd2Card::chipSelectHigh()
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiRec()
</UL>
<BR>[Called By]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sd2Card::readData(unsigned, unsigned short, unsigned short, unsigned char*)
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sd2Card::cardCommand(unsigned char, unsigned)
</UL>

<P><STRONG><a name="[ff]"></a>Sd2Card::readData(unsigned, unsigned short, unsigned short, unsigned char*)</STRONG> (Thumb, 162 bytes, Stack size 24 bytes, sd2card.o(i._ZN7Sd2Card8readDataEjttPh))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = Sd2Card::readData(unsigned, unsigned short, unsigned short, unsigned char*) &rArr; Sd2Card::cardCommand(unsigned char, unsigned) &rArr; Sd2Card::readEnd()
</UL>
<BR>[Calls]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sd2Card::readEnd()
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sd2Card::waitStartBlock()
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sd2Card::chipSelectHigh()
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sd2Card::cardCommand(unsigned char, unsigned)
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiRec()
</UL>
<BR>[Called By]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sd2Card::readBlock(unsigned, unsigned char*)
</UL>

<P><STRONG><a name="[100]"></a>Sd2Card::readBlock(unsigned, unsigned char*)</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, sd2card.o(i._ZN7Sd2Card9readBlockEjPh))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = Sd2Card::readBlock(unsigned, unsigned char*) &rArr; Sd2Card::readData(unsigned, unsigned short, unsigned short, unsigned char*) &rArr; Sd2Card::cardCommand(unsigned char, unsigned) &rArr; Sd2Card::readEnd()
</UL>
<BR>[Calls]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sd2Card::readData(unsigned, unsigned short, unsigned short, unsigned char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdVolume::cacheRawBlock(unsigned, unsigned char)
</UL>

<P><STRONG><a name="[f8]"></a>Sd2Card::writeData(unsigned char, const unsigned char*)</STRONG> (Thumb, 80 bytes, Stack size 24 bytes, sd2card.o(i._ZN7Sd2Card9writeDataEhPKh))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Sd2Card::writeData(unsigned char, const unsigned char*)
</UL>
<BR>[Calls]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sd2Card::chipSelectHigh()
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiSend(unsigned char)
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiRec()
</UL>
<BR>[Called By]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sd2Card::writeBlock(unsigned, const unsigned char*)
</UL>

<P><STRONG><a name="[c1]"></a>SPIClass::transfer(unsigned char)</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, sys.o(i._ZN8SPIClass8transferEh))
<BR><BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiSend(unsigned char)
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiRec()
</UL>

<P><STRONG><a name="[104]"></a>SPIClass::SPIClass(SPI_TypeDef*, void(*)())</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, sys.o(i._ZN8SPIClassC1EP11SPI_TypeDefPFYvvE))
<BR><BR>[Called By]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___5_sys_c_pinMode
</UL>

<P><STRONG><a name="[11a]"></a>SPIClass::SPIClass__sub_object(SPI_TypeDef*, void(*)())</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, sys.o(i._ZN8SPIClassC1EP11SPI_TypeDefPFYvvE), UNUSED)

<P><STRONG><a name="[ef]"></a>SdVolume::cacheFlush()</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, sdvolume.o(i._ZN8SdVolume10cacheFlushEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = SdVolume::cacheFlush() &rArr; Sd2Card::writeBlock(unsigned, const unsigned char*) &rArr; Sd2Card::cardCommand(unsigned char, unsigned) &rArr; Sd2Card::readEnd()
</UL>
<BR>[Calls]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sd2Card::writeBlock(unsigned, const unsigned char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdVolume::cacheRawBlock(unsigned, unsigned char)
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdFile::write(const void*, unsigned short)
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdFile::sync()
</UL>

<P><STRONG><a name="[ed]"></a>SdVolume::cacheRawBlock(unsigned, unsigned char)</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, sdvolume.o(i._ZN8SdVolume13cacheRawBlockEjh))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = SdVolume::cacheRawBlock(unsigned, unsigned char) &rArr; SdVolume::cacheFlush() &rArr; Sd2Card::writeBlock(unsigned, const unsigned char*) &rArr; Sd2Card::cardCommand(unsigned char, unsigned) &rArr; Sd2Card::readEnd()
</UL>
<BR>[Calls]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdVolume::cacheFlush()
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sd2Card::readBlock(unsigned, unsigned char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdVolume::fatGet(unsigned, unsigned*) const
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdVolume::fatPut(unsigned, unsigned)
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdFile::cacheDirEntry(unsigned char)
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdFile::write(const void*, unsigned short)
</UL>

<P><STRONG><a name="[f6]"></a>SdVolume::cacheSetDirty()</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, sdfile.o(i._ZN8SdVolume13cacheSetDirtyEv))
<BR><BR>[Called By]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdVolume::fatPut(unsigned, unsigned)
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdFile::write(const void*, unsigned short)
</UL>

<P><STRONG><a name="[eb]"></a>SdVolume::allocContiguous(unsigned, unsigned*)</STRONG> (Thumb, 174 bytes, Stack size 40 bytes, sdvolume.o(i._ZN8SdVolume15allocContiguousEjPj))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = SdVolume::allocContiguous(unsigned, unsigned*) &rArr; SdVolume::fatPut(unsigned, unsigned) &rArr; SdVolume::cacheRawBlock(unsigned, unsigned char) &rArr; SdVolume::cacheFlush() &rArr; Sd2Card::writeBlock(unsigned, const unsigned char*) &rArr; Sd2Card::cardCommand(unsigned char, unsigned) &rArr; Sd2Card::readEnd()
</UL>
<BR>[Calls]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdVolume::fatGet(unsigned, unsigned*) const
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdVolume::fatPut(unsigned, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdFile::addCluster()
</UL>

<P><STRONG><a name="[101]"></a>SdVolume::fatPut(unsigned, unsigned)</STRONG> (Thumb, 118 bytes, Stack size 24 bytes, sdvolume.o(i._ZN8SdVolume6fatPutEjj))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = SdVolume::fatPut(unsigned, unsigned) &rArr; SdVolume::cacheRawBlock(unsigned, unsigned char) &rArr; SdVolume::cacheFlush() &rArr; Sd2Card::writeBlock(unsigned, const unsigned char*) &rArr; Sd2Card::cardCommand(unsigned char, unsigned) &rArr; Sd2Card::readEnd()
</UL>
<BR>[Calls]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdVolume::cacheRawBlock(unsigned, unsigned char)
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdVolume::cacheSetDirty()
</UL>
<BR>[Called By]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdVolume::allocContiguous(unsigned, unsigned*)
</UL>

<P><STRONG><a name="[f4]"></a>SdVolume::clusterStartBlock(unsigned) const</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, sdfile.o(i._ZNK8SdVolume17clusterStartBlockEj))
<BR><BR>[Called By]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdFile::write(const void*, unsigned short)
</UL>

<P><STRONG><a name="[f3]"></a>SdVolume::isEOC(unsigned) const</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, sdfile.o(i._ZNK8SdVolume5isEOCEj))
<BR><BR>[Called By]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdFile::write(const void*, unsigned short)
</UL>

<P><STRONG><a name="[f2]"></a>SdVolume::fatGet(unsigned, unsigned*) const</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, sdvolume.o(i._ZNK8SdVolume6fatGetEjPj))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = SdVolume::fatGet(unsigned, unsigned*) const &rArr; SdVolume::cacheRawBlock(unsigned, unsigned char) &rArr; SdVolume::cacheFlush() &rArr; Sd2Card::writeBlock(unsigned, const unsigned char*) &rArr; Sd2Card::cardCommand(unsigned char, unsigned) &rArr; Sd2Card::readEnd()
</UL>
<BR>[Calls]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdVolume::cacheRawBlock(unsigned, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdVolume::allocContiguous(unsigned, unsigned*)
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdFile::seekSet(unsigned)
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdFile::write(const void*, unsigned short)
</UL>

<P><STRONG><a name="[53]"></a>__cxa_pure_virtual</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, pure_virt.o(i.__cxa_pure_virtual))
<BR><BR>[Calls]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGPVFN
</UL>
<BR>[Address Reference Count : 1]<UL><LI> adafruit_gfx.o(.constdata__ZTV12Adafruit_GFX)
</UL>
<P><STRONG><a name="[11b]"></a>__scatterload_copy</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_copy), UNUSED)

<P><STRONG><a name="[11c]"></a>__scatterload_null</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_null), UNUSED)

<P><STRONG><a name="[11d]"></a>__scatterload_zeroinit</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_zeroinit), UNUSED)

<P><STRONG><a name="[91]"></a>delay</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, sys.o(i.delay))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = delay &rArr; HAL_RCC_GetSysClockFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetSysClockFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;doTest()
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_table(const unsigned char*, short)
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ili932x_begin()
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hx8357x_begin()
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hx8347g_begin()
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adafruit_TFTLCD_8bit_STM32::reset()
</UL>

<P><STRONG><a name="[d8]"></a>digitalWrite</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, sys.o(i.digitalWrite))
<BR><BR>[Called By]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sd2Card::chipSelectHigh()
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sd2Card::chipSelectLow()
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adafruit_TFTLCD_8bit_STM32::reset()
</UL>

<P><STRONG><a name="[4a]"></a>main</STRONG> (Thumb, 174 bytes, Stack size 0 bytes, main.o(i.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = main &rArr; doTest() &rArr; testText() &rArr; Print::println(double, int) &rArr; Print::print(double, int) &rArr; Print::printFloat(double, unsigned char) &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pinMode
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adafruit_GFX::height()
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adafruit_GFX::width()
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print::print(int, int)
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print::print(const char*)
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print::println(unsigned long, int)
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print::println(int, int)
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print::println(const char*)
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print::println(const __FlashStringHelper*)
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print::print(unsigned char, int)
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USARTClass::begin(unsigned)
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;testText()
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;doTest()
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adafruit_TFTLCD_8bit_STM32::begin(unsigned short)
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adafruit_TFTLCD_8bit_STM32::setRotation(unsigned char)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P><STRONG><a name="[95]"></a>micros</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, sys.o(i.micros))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = micros
</UL>
<BR>[Calls]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;testRects(unsigned short)
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;testLines(unsigned short)
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;testText()
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;testFilledRoundRects()
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;testFilledTriangles()
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;testFilledCircles(unsigned char, unsigned short)
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;testFilledRects(unsigned short, unsigned short)
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;testRoundRects()
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;testFillScreen()
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;testTriangles()
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;testFastLines(unsigned short, unsigned short)
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;testCircles(unsigned char, unsigned short)
</UL>

<P><STRONG><a name="[fd]"></a>millis</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, sys.o(i.millis))
<BR><BR>[Calls]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sd2Card::waitStartBlock()
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sd2Card::waitNotBusy(unsigned short)
</UL>

<P><STRONG><a name="[8e]"></a>pinMode</STRONG> (Thumb, 308 bytes, Stack size 32 bytes, sys.o(i.pinMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = pinMode &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USARTClass::begin(unsigned)
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adafruit_TFTLCD_8bit_STM32::reset()
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_3_Init()
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_2_Init()
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_1_Init()
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[5f]"></a>__sti___6_SD_cpp_426a88ba</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, sd.o(i.__sti___6_SD_cpp_426a88ba))
<BR><BR>[Calls]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdFile::SdFile()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sd.o(.init_array)
</UL>
<P><STRONG><a name="[c0]"></a>spiRec()</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, sd2card.o(i._Z6spiRecv))
<BR><BR>[Calls]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIClass::transfer(unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sd2Card::writeData(unsigned char, const unsigned char*)
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sd2Card::readData(unsigned, unsigned short, unsigned short, unsigned char*)
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sd2Card::readEnd()
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sd2Card::waitStartBlock()
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sd2Card::waitNotBusy(unsigned short)
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sd2Card::cardCommand(unsigned char, unsigned)
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sd2Card::writeBlock(unsigned, const unsigned char*)
</UL>

<P><STRONG><a name="[c2]"></a>spiSend(unsigned char)</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, sd2card.o(i._Z7spiSendh))
<BR><BR>[Calls]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIClass::transfer(unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sd2Card::writeData(unsigned char, const unsigned char*)
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sd2Card::cardCommand(unsigned char, unsigned)
</UL>

<P><STRONG><a name="[8f]"></a>init_table(const unsigned char*, short)</STRONG> (Thumb, 118 bytes, Stack size 32 bytes, ili9341.o(i._Z10init_tablePKhs))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = init_table(const unsigned char*, short) &rArr; delay &rArr; HAL_RCC_GetSysClockFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeCommand(unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ili9341_begin()
</UL>

<P><STRONG><a name="[60]"></a>__sti___6_main_c_tft</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, main.o(i.__sti___6_main_c_tft))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __sti___6_main_c_tft &rArr; Adafruit_TFTLCD_8bit_STM32::Adafruit_TFTLCD_8bit_STM32() &rArr; Adafruit_GFX::Adafruit_GFX__sub_object(short, short)
</UL>
<BR>[Calls]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adafruit_TFTLCD_8bit_STM32::Adafruit_TFTLCD_8bit_STM32()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.init_array)
</UL>
<P><STRONG><a name="[7f]"></a>NVIC_SetPriority(IRQn_Type, unsigned)</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, stm32f1xx_hal_cortex.o(i._Z16NVIC_SetPriority9IRQn_Typej))
<BR><BR>[Called By]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SYSTICK_Config
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
</UL>

<P><STRONG><a name="[4d]"></a>SPI_1_Init()</STRONG> (Thumb, 80 bytes, Stack size 8 bytes, sys.o(i._Z10SPI_1_Initv))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = SPI_1_Init() &rArr; pinMode &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pinMode
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sys.o(i.__sti___5_sys_c_pinMode)
</UL>
<P><STRONG><a name="[4e]"></a>SPI_2_Init()</STRONG> (Thumb, 80 bytes, Stack size 8 bytes, sys.o(i._Z10SPI_2_Initv))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = SPI_2_Init() &rArr; pinMode &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pinMode
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sys.o(i.__sti___5_sys_c_pinMode)
</UL>
<P><STRONG><a name="[4f]"></a>SPI_3_Init()</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, sys.o(i._Z10SPI_3_Initv))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = SPI_3_Init() &rArr; pinMode &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pinMode
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sys.o(i.__sti___5_sys_c_pinMode)
</UL>
<P><STRONG><a name="[61]"></a>__sti___5_sys_c_pinMode</STRONG> (Thumb, 200 bytes, Stack size 16 bytes, sys.o(i.__sti___5_sys_c_pinMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = __sti___5_sys_c_pinMode &rArr; USARTClass::USARTClass(USART_TypeDef*, IRQn_Type, unsigned, RingBuffer*)
</UL>
<BR>[Calls]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USARTClass::USARTClass(USART_TypeDef*, IRQn_Type, unsigned, RingBuffer*)
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RingBuffer::RingBuffer()
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIClass::SPIClass(SPI_TypeDef*, void(*)())
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sys.o(.init_array)
</UL>
<P><STRONG><a name="[b7]"></a>USART_INT_ClearAllFlags(USART_TypeDef*, IRQn_Type)</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, usartclass.o(i._Z23USART_INT_ClearAllFlagsP13USART_TypeDef9IRQn_Type))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USART_INT_ClearAllFlags(USART_TypeDef*, IRQn_Type)
</UL>
<BR>[Calls]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_ClearPendingIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USARTClass::IrqHandler()
</UL>

<P><STRONG><a name="[89]"></a>UART_SetConfig(__UART_HandleTypeDef*)</STRONG> (Thumb, 178 bytes, Stack size 24 bytes, stm32f1xx_hal_uart.o(i._Z14UART_SetConfigP20__UART_HandleTypeDef))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = UART_SetConfig(__UART_HandleTypeDef*)
</UL>
<BR>[Calls]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK2Freq
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK1Freq
</UL>
<BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
</UL>
<P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
